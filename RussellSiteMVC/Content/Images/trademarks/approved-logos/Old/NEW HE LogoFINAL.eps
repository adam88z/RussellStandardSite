%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: NEW HE LogoFINAL.eps
%%Creator: Adobe Illustrator(R) 13.0
%%For: PALMER PRODUCTS
%%CreationDate: 4/9/09
%%BoundingBox: 0 0 325 80
%%HiResBoundingBox: 0 0 324.4859 79.3926
%%CropBox: 0 0 324.4859 79.3926
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 13.0.2%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 13.0.2 x434 R agm 4.4379 ct 5.1039%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 32 8%%BeginData: 7404 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD0AFFC99999A0FFA79999C3CAFD0BFF532F292F54A9072F0754FD%3AFF2F2F292F072F077EFD1CFFCA999368696EFFFFFF998D688D6FCAFD09%FFA8292929A9A85406295AFFFFFF7EA9FFFFA87E7EA8FFFF7E7E7EA97E7E%7EFFFFA97E7E84FFFFFF7EA9FFFF847E7EA9A87E7EA9847E7E847E7EFFA9%FD047E84FD04FF7E0729295A2F2907FFFFFF7EA8FD04FF7E7E7EA8FFAF5A%7E7E8454A9FD06FFC2698D689368CAFFC3FFFF6E93688D689AFD09FF7E06%5AFFFF7E292FFFFFFF7E2929FFFF7E072907FFA82F070D7E3007297EFF2F%29075AFFFF532953FFFF7E07292FA90729537E0729072F07847E29072F07%2F2FFD04FF54067EFF7E5A2F7EFFA82F07A9FFFF5A2F072F07A954290729%072953FFFFCFFFFF99688D6869689AFFC968A0FFA1688D68696893A7FFCF%FD05FF5307295A532F062FFFFFFF5306077EFFFF5406077E7E062953FF7E%070654A807062FA8FFA9290629A8FFFF2F07FF530753FFA82F07FF5A2F29%FF2907A8FF29297EFFFFFF2907292F07FF84FFFF54062953FFA80707A97E%2F532F2F7E065A5307FD04FF99689369936893FFFF939369FFFF99689368%936893CAFD06FF7E072F072F072F2FFFFFAF075A0754FFFF532F075A2F30%077EFFA90730297E2F2F29FFFF7E077E077EFFFF2F2F532954FFFFFF2F2F%2F30A9A9FF54077E7E2F07A9FFFFFF54072F072FFD04FF295A292FFFFF2F%29075A54A984FF7E2954FF7EFFFFFF99688D688D68699AFFA069688D99FF%A18D688D688D6893A8FD05FF53292FFFFF7E0654FFFF5329290707A9FF54%2954072F532953FF7E2F5307075A292FFFFF2F07292929FFFF540707062F%A9FFAF2F072F07FFA8FF2929072907A9FD04FF2F2953A929FF295A7E0729%2F0784FF7E532F062954FFFF7E065AFD04FFA06893688D689393FFFF9368%8D6893C9FF9993688D68936899FD05FF7E0754FFFF7E2929FFFF2F2F7E2F%2954FF54547E292FA9067EFFA907A90729A83029FFA82F537E2929A8FF2F%2FA97E0654FFFF292FFFA97E2FFF5407A92F297EFD04FF54077EFFFF5429%7E54297E532953FF0785FFA9072FFFFF7E295AFFFFFFCA6869688D686968%C9FF9A688D68696899FFCF688D6869688D68A0FFFFFF7E0629067E7E2906%072F540654FF5406075A2F077E0654532907A92F07532F077E06077E2F01%84FF2F012F7E07067E840701545A0706542F0729A9070753A9060753FFFF%540629072F0629075A062FFF7E06295A290654530729FFFF2F012FA8FFFF%999368936993689AFFCA68936993689368C3FFC36893689369936FFFFFFF%7E5A545A7EAF537E537E545A5AFF5A5A537E545A7E7EA87E535A847E53FD%047E5A547E535A7EFF537E547E535A5AA9537E547E537E535A53FFA85453%7EFFA9535AFFFF5A5A545A535A54857E5A54FF7E5A537E7E7E53545AFFFF%FF537E53FFFFA793688D688D688DA7FF9369688D688D688D6EFFFF93688D%688D6869A0FFFF84537E5A7E537E5A7E537E5A7E537E5A7E537E5A7E537E%5A7E547E547E537E5A7E5A7E547E537E547E537E547E537E547E5A7E547E%537E5A7E537E5A7E5A7E547E537E537E5A7E5A7E5A7E547E537E537E547E%5A7E5A7E547E535A537E537E537EC26893688D68939AFFA193688D689368%8D68939AFFA193688D6893689AFFFFA8857EA97EA97EA97EA97E857E7E7E%A97EA97EA97EA95A857E847EA97EA97E7E7E857EA97EA97E847EA97EA97E%A9FD057EA97EA97EA97E7E7E847E7E7EA97EA97EA9FD077EA97EA97EA97E%7E7E847E7E7EA9A8A97EA97EA97EA9A86F69688D686968FFFF93688D6869%688D68696893A8FF6F8D6869688D68FD0CFF7E0753A8FD08FF5A0754A9FD%05FF542F07FD04FF2F067EFD06FF2F2F53FD05FF7E2F532F295A077EFD05%FF7E0753537E2F2FA8FD05FFA82F075A535429A9FD08FF936893699368C3%AFA876A1A1A177A17DA177A176A8FFCA699368936993C9FD0CFF2F7EFD0A%FF2F7EFD07FF2F2F54FFFF7E0730FD07FFA907FD06FF5A7EFF2F54FF7E53%FD06FF2F7EFFA9FF537EFD06FF5A30FFFFFF7E0784FD07FF688D688D6893%FF2F070707852F07070D2F5A5354077EFF9A688D688D68C3FD0CFF077EFD%0AFF0784FD06FFA9545329FFFF2F5A29FD07FF7E2FA9FD05FFA9FFFF532F%FD09FF07547E2F84FFA9FD06FF7E29FD04FF5407FD07FF93688D6893A1FF%7E2F077D99A10729077E93C9C97E30FFCA93688D6893A1FD0CFF2F5AFD09%FFAF2F7EFD07FF2FAF077E7E5A842FFD07FF8407FD09FF2F54FD09FF2F53%7E07A9FD08FF5A2FFD04FF542FFD07FF688D68696FFFA1A007077D99A02F%07075399547799A1A1FF9A8D686968C3FD0CFF077EFFFFA854A8FD05FF07%7EFD07FF2FFF7E072F84A929FD07FF7E07A8FD08FF542FFD09FF077EFF7E%A8FF53FD06FF7E29FD04FF2F29FD07FF93699368CFFF999930072F0D3007%2F07545A0D53936893FFFF93936893C3FD0BFFA82F53A97E2F53FD05FF84%2954FD06FFA907A9FF292FFF5429A8FD06FF7E07A9FD08FF292FFD08FFA8%2F53A9847E075AFD06FF2F2F7EA97E5429FD08FF6E8D689AFFC9689A0729%29532F2F07072F7D29536899689AFFC9686968CFFD0BFF7E535A535A53FD%05FFA97E535AA8FD05FF5A5453FF7EA9A85A537EFD05FFA9535453FD07FF%7E5A537EFD07FF7E535A535A535AA9FD05FF7E5A535A537E7EFD09FF9A68%93FFFF6F939A3007A16EC22F2F077E6EA977995AA168CAFF9A6893FD63FF%A0699AFF9A696FA8070753A0A12F0607539999C3530D756993FFA78D99FF%FFFFCFA8A8FD0DFFCFFD09FFCAC9A8FD11FFA8FFCAFD05FFCFFD29FFCF99%FFCA9368C22F29072F8430072F0730537E2F2953936893A1FF99C9FFFFFF%C34BFFCFCFCACFA7FD04FFCAFFFFFFA17DFFCAFFC9CFFFFFCA9A75FFCAFF%FFFFCAFFFFFFCAFFFFFFCAFFCAFFA19A75A17DCAFFFFA8FD2DFFCA9A9AA1%A97E847EFF7E7E5A7E7E7E5A7E7EA89AC39AC9FFCFCFFFFFFF996F6F6F6E%756F6F756F4B9A6E6F6F754B756F75766F4BFFFF7552FFA16F4B9A6F6F4B%9A6E6F4B7675756F6F4B764A6F6F7568766F76A8FD49FF996F6F4B6F6F6F%4B6F75A1446F6F6F4B756F754A6F6F75A8C34BA19A6F6F6F4B6F6F6F4B6F%6F6F6E6F4B6F6F6F4B754B756F6F6F934BAFFD2BFFA7936F9A99996F9A99%996F9A99996F9A99996F996F936F93A0FD05FF75A07576769A687D767DA1%6F76CA75A17576767C756F4BFFA19A75A06F757D767576767675A076756F%A075A07576757676A076A16F7DFD2DFF9A93689368936893689368936893%689368936893689393FD0BFF9A76FD0CFFCFA16F7DFD4DFF9A8D688D688D%688D688D688D688D688D688D68696FFD0CFFCAA8FD0DFF757CA8FFA7C39A%9A7DFD0BFFC976A8FFFFFFA19A7CFFFFFFA7FFA7FD07FFA0A8FFFFCA9976%FD06FFCAA7FD07FFA8A8FD0FFFA093688D6893688D6893688D6893688D68%939AFD20FFA068766F76A1CFA1CF9ACAA8CAA7CAA1A04AA1A8FFA06F6875%A8A1A16F6F75A1A1A8C9A7FFCA6F7DCAA7C24BA1A1CAA0FFA7CA9976A7CA%A7CAA1FFA19A4BA8A1A8A1A8A1A0A8FD08FFA7996869688D6869688D6869%688D6893A1FD21FFCA6F7D93446F4A756F6F4A75FD046F4B6F447DFF9A4A%9A686F44756F6F4A6F4A754A7CFFC34B766E6F4A756E76756F4B6F4B6F4B%6F4B6F4B6F6F7C6F6F4B754A6F4B6F44A8FD0AFFCA999369936893689368%9399C9FD23FFC94BC94B756F76A86F4B756E6F4A6F6F6F4B75A8FF996F76%A16F756F766F766F766F7DFFFF9A756F754B756F75A8994B76686F4B7551%CA686F4A6F7C75FD046F51CF6876A8FD0CFFCACAA0A099A0A0C9A8FD25FF%C9A1A7A1A1A176FF99A1A1A0A0A1996F76A1A1FFFFC376A8FFC37DA77CA0%A1A1A8A0A8FFFFC97CA17CA176A17DCA76A1A1A07CA1A0A7CAA0A0A176A8%76A176A17CA1FFA1A8FD48FFA1934BFD7DFFC976FD38FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: (Page 1) 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.1-c036 46.277092, Fri Feb 23 2007 14:16:18        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">NEW HE LogoFINAL</rdf:li>
            </rdf:Alt>
         </dc:title>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreatorTool>Adobe Illustrator CS3</xap:CreatorTool>
         <xap:CreateDate>2009-04-09T10:27:05-04:00</xap:CreateDate>
         <xap:ModifyDate>2009-04-09T10:27:05-04:00</xap:ModifyDate>
         <xap:MetadataDate>2009-04-09T10:27:05-04:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>64</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAQAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q85/Mr86/L3k0tYQL&#xA;+k9dpvZxtRIaioM770/1Rv8ALrmPlziOw3Luuzexcmp9R9OPv7/c8E1b83PzP82ajHZwajNbNdyC&#xA;G2sNOrbgtI3FUDIfUatafExzElkker1uLsnS6ePEYg1zMt/2PddMm8p+QrbQPJ2tyLe6tr9Uv7qb&#xA;94HkYfalL1PptKRHGD8/HMiIjCokc+bymUZtWZ58fphj5D9XnW5eQfmBdeffy085TWmk61exaVOf&#xA;rWmK8rSxGJm3Ro5eaExt8JqNxQ98okDjNAvR6COn1uAGcI8Y2ltR+zvZn+X3/OSkNzLHp/nGFLZ2&#xA;oqarbgiOvT99Hvx/1l29gN8ux6n+c6ztD2bMRxYDf9E/oL3aGaKaJJoXWSGRQ8ciEMrKwqGUjYgj&#xA;MsG3lCCDR5oPXtGtdb0a80m6eRLa9iaGV4WCyBW6lWIah+jLMeQwkJDowlGxT5S8laH5ft/zavNI&#xA;17WGsdK0W7uRDdTXCQB5LOfjErPJ8Pxcakd86fUZJHAJRjcpAdO91GEAZSJHYea/847Ty6fzBhfy&#xA;7rIv7bWSLi9lguY7hI7iedw6oYtlAWhCnfBoJT8L1xrh8vJOpo5Bwnn5vpIR6R+XvkKb05JJNP0W&#xA;3llQ3DhpHJZnVC4CirO/EbZz9yz5fORdptjh5Bi35N/nDN57m1Gzv7WGzv7NUmhjhLESQseLH4q/&#xA;Ybj9+ZOv0IwgEGwWnTanxL2pjv5h/nn528m+aJ9JutDszbms9jK0js8tqZHjjkbgxClvTOxy/S9n&#xA;Y8sOISPn72rPq5Y5VSafmn+ecnlVtGXRrSG+/StoL9muCy8YJaCEgIerUauV6Ps7xOLiNcJpnqNV&#xA;wVQu0Nrf5vfmLpPkPSvNdzoFkkGoSNzBlYhYJY43tHCh+VZOUlfCg8clj0OGWUwEjt+CieonGAlS&#xA;J0b885Lz8sNY813NpBDqmlzi2FgGfg7yFBEd/i35mv8AqnI5OzqzRgD6SOaY6q8ZkRyVfyh/Njzb&#xA;561W7judJtbbS7JB9ZuYnbmsr19NeDsSa8WrQYNdoseGIoniKdPqJZCdqAQ/5h/n1/hXzzDoEFnF&#xA;c2UHofpa4Yt6kZlPJlj4mlViIO/fDpezfExcRNHoxzavgnwsu/M7zf5g8teWBruhWNvqUEJD3rSy&#xA;UVIGFFkTiylqsR0rmLo8EMk+GRIb8+QxjYFsCb88vOMH5fDzbeaTYQJd3SQ6VEZj+/jUypcME5mS&#xA;sckaj5GuZ38nYzl8ME7Dfy5U4/5uXh8ZCOuvzR/NOz8hyebLzyza28KSRsElkZT9Vk+ESGMv6gPq&#xA;FQBToa0pkBo8By+GJH9rI55iHEYpKPzz/NBtAg19fLVg2mXSzSW8i3AMrpbMyzOsAl9bjGUPI8KA&#xA;bnbLv5Ow8XDxGx5d/nVNY1eTh4uHb3pp55/PLzBomlaBrml6Xa3Oja3ZpKJ5nbml2C3rQcVYGkfw&#xA;7061yrT9nQnKUZE8UT9nRnm1RiBIDYqOpfnd+YXlk2N15v8AKUVvpV8R6U9tcKzEEctirTLy478W&#xA;41yUez8WSxjn6h5Ilqpwoyjt73q2r6ZpvmvyzJZSySrp+qwI3qwn05fTekilSQ1D07Zq4TOKd9Yu&#xA;ZICQrvfIvk7SfLV7r2tWvmXV7iw0/TrS5ntZI544pZZ4JEVIl9UMrs6lvgXc0zqs85iMTAAkkOlx&#xA;gGREiQB5vRPyn8p+ZdL82eX/ADP5eW61HytrMM6XZnZEkgjDtGyzfHxbi6LIvH7XQCozA1uaEoSh&#xA;OhOLlafHISEo2Ylm35wfnVP5H1ax0vTrOG+upYjcXgmZgI0ZuMYHA/abi1a+3jmFoezxmiZE0G7U&#xA;6rwyABbM9a896TpfkZ/OJV59O+rRXUUaU5uLgqsS7mgq0gB8MxMemlLL4fW3IllAhxdHlk353/mh&#xA;H5eHmj/CtpJ5dmB9G6imMpiIbjWbg7Mort8SLmzHZ+Hj4OM8biHVZOHi4fT70y8x/nZ5mGq2tr5T&#xA;0m31SJdHj1jVDIXBgV4/XNXDoqhIyOoqSQBvtleLs+HCTkJHq4R9zKepldRF7Wkmmf8AOQ3nWe3s&#xA;NZvNDtIPLEmopYX+oJ6jlDRXkUD1BxYRyBlLCh6ZdPsvGCYiR46sBrjrJGjXpumb/nb+ZreTtCS1&#xA;05x+ntSDLanY+jGNnmIPfsle/wAjnNZ8vCKHN6zsTsz8zkuX93Hn5+X63yVPPPcTyTzyNLPKxeWV&#xA;yWZmY1LMTuSTmC+hRiAKHJ7V/wA4/eUrKzhvvzC1ykWnaWki2Lv05Kp9aYDvxX4F8ST3GX4Yj6jy&#xA;DzHb+rlIx02P6p8/0D9LzHzv5vv/ADV5pvNduC0ZmelrFX+5hTaJAR/KOpHU1OUylxGy7zRaSODE&#xA;MY6c/M9Xtfw/m/8AlD/vzzb5f/4OSRV/H6xGv/Bj2y/64f0ovM/8Z2s/2nJ+P9ifsfOzKysVYEMD&#xA;Qg7EEZjvYva/+cfvzUuNP1KHyjq85fTLxuGmSOa+hOx2iB/kkOwHZvmcvwZeE0eReY7f7LE4nNAe&#xA;ofV5jv8AeH0df39lp9lNe3sy29pbqZJ55DRUUdSTmxjEyNDm8QSALL5P8oHyN5h/OTV5PMBjm0PU&#xA;7u+ks/WZ4leSa4LQboVILBtt86fP4sNOOD6gB927p8XBLKeLkb+9Z+b9h5G0Lz/YWnldI4bWxWP9&#xA;JxxPJIEuUnbmrGRm+IIBUA46GWWeImfM8vdS6kQjkHD05vRfzz88aV5j03RPKnl7VrSQa5co93dG&#xA;YLDFEjBY/WffirSHl0r8HTpmB2dp5YzKcwfSHK1eQSAhEj1MJik1X8svzf0671mfTx66xpqUOlvI&#xA;0MVtMvpEOjhHVgFWah67H2zMPDqMBEQfK+/8bOPZxZQZVv3J5+cDaB5n/MsWttqVrMj+XXjgmSaN&#xA;0N5HJPPBDyDU5u3AAdfiynQ8WPDZB+v7Ng26ip5Kv+H7XmnGS+8k32s6jcqbiBrPSNKidhyaGEGS&#xA;YICan0h6VadOW+bHlkEQO8n8fNxLvGSfIB6v+Zes6Pcf849+Wbe3vreW49LT4vRSVGf1Le2UTJxB&#xA;ryjLDmO1RXNXpMchqpEg9ftLl55DwBv3MPfTbMfmrceXoLy3/wAH6jqcGsTTiVBbG0hWScUmJChV&#xA;SZ4zv9oU6jMvjPgcZB8QR4fO+TVw/veH+Em2S/8AOPPmnQdB0/zje6newwJGYbhI3kRZJEjE1fTV&#xA;iCxJZVFO5A75j9qYZTMAB+Nm3R5IxEiSw6fy75m8yeTNf86zXmkiyvLw314k0xF6ksJkCxR/DwXk&#xA;Jm4xlgWFKD7OZYywx5I4wJWBXk45hKcDPajv5s6tPzA03WP+cdtQ0+9vYU1fT4E08wSSKssgR1MB&#xA;RCQzViFNupVswpaYw1YIHpO/63JjmEsBs7gU85g8u6jB5B0vzvba3b3Mmk3fpJo7sjtaIZneOsbm&#xA;lZJQ78OO6nl40zzlBynGYkcQ597iCBGMTB5dHr/nX8zfLvm78jtTuo7uC31SZIIrnTGkUTJOJ0Zl&#xA;VGPJlIQspHUe4NNVp9JPFqQK9Pf8HOyZ4zwkvP8A8vLry35ftfL/AJt1LzFDcpY2+oxXXlqaVpJ4&#xA;2lMsccdtAquqrNzDvz4jeu+Z2qE5mWMRqzH1fr9zjYDGIEjLv2/Uifzj80fp/wDL3yddz21tpt3O&#xA;1zMml27g8LavpxSenRSqv6Zp29+wjocPBlmASRtv5stVk4scTySrXrF7DzToK+eNWvfMHkm5RZbC&#xA;9iuDJH6ZAV1Xd1HpuOMioQ3Hp2y3HLihLwwI5Ou34+DDIKmOMmUH1Imu+XLbQF1aK9tl0KGMFLyJ&#xA;1a3WNDw+FkqtARx2+Wc34czPho8TtuIVd7PkTyQvkK980a4vm65W30y5tboafdlZm9O6eZPSkVYd&#xA;yVQsaNt451Oo8UQj4Y3sX7nS4uAzlxct3oOjfmeulS+VfI3k3WFm02wlc6zr1zbLDDJbmRppCI5i&#xA;WRIoy5ZuQrTY0zByaPi48uSO55Rtyo6ijGETsOZY/cWGu/mFP5z822l3pUNhITDJHqMxS5itYGjk&#xA;hMQCssfIRIvNiAxqPHLxKOAQxkSvy5W1ESy8UhVeaP8AKn5gWsn5Ga35fvoYb+fS2QJZTSGNns7i&#xA;dSJE4kOTBM1dunw12yGbTH8zGY2v7/2hlizDwSDvX3Md1DQfL+m+WpfMXk7zmqLIoW68vXTiG9Ic&#xA;hGiKIeNwByPL92FI8cvjknKfBkh/ndP2NRjGMeKEvg90stWtrn8kZde1WC206/vNEmt5Jikdv6lI&#xA;njhC0CCklAyIu2/wjNLKBGp4Y2QJe92MZXi4jtsx/wD5xjOk3fkTUtMuTBcTDU3uHspODtwENuEk&#xA;MbVPHmmzU6jL+1+IZRIX9PP5tOgowI83jf5ueZZPMP5gatec+dvBM1pZ+AhtyUUr7MQX+nOTnLik&#xA;S+t9k6bwdPGPUiz7yk/lHyzf+ZvMVlolkP313IFaShIjjG7yNTsqgnAASaDk6vUxwYzklyD1v8+v&#xA;M1jomj6d+W+gn07SzijfUeJ3oorFE1OpY/vH96ZdmIFQHIPPdg6aWWctTk5yO36T+gPDMoeqZp+U&#xA;vnuTyd5vt72Rj+jLqltqSD/fLn7dPGNvi+8d8njnwm3WdraH8zhMR9Q3j7/2sj/5yB8iR6L5iTzD&#xA;pyg6PrpMvKPdEuSOTgEEikg/eL9NOmSzQo2ORcLsDXHLj8OX1w+79nJ5VHI8ciyRsUkQhkZTQgg1&#xA;BByp35F7F9oeXdSk86/llaXZS3luNTsvTmS6Qy27TJWKX1I0ZCU9RG2DDNrpcv0yN/pfLO0tL4Wa&#xA;ePoD9h5fYxi3/KTVLeeO4g0/ypHNCyyRSLpt3VWU1Uj/AEvsRm1OuiRROT5j9TqhpyOkfl+1fe/l&#xA;VrN9eTXt5Y+VZ7q4dpZ5n027LO7GrMT9b6k4I62MRQOSveP1JOAk2eH5ftYr5h0rQtA1W307WIPL&#xA;VvfvxW0QaDq8ok6FRC8UrpIRyAopNDt1zJxTlONx46/rxaZgRIB4b/qllmofl3r+v3H6W1G18s3d&#xA;1dIjNPc6XfLKVCgKHV7pXUhaCjAEZjR1UIDhBmAP6Q/U3SwmW54fl+1ZH+VGrx3SXaWHlVbmJlkj&#xA;lGm3fIMhBUj/AEvtTH87GqvJ8x+pfAN36fl+1jXmS20jRru38v62nluGYSPLZWn6B1eRHkuAnNoW&#xA;ildJC3FA3AncU6imZOIymDOPH/p49GmdA8J4f9KWRr+V2r3OnW1ubDyubKMvPbwPpd6nBp1TmeDX&#xA;QZWYRryBFdsx/wA5EEm8l/1h+pt8AkV6f9L+1LfM2gf4XsI7nWovLVtYmFrMTJoupzxpCX5mN2gn&#xA;kCBneo5UqemWYcviGo8ZPP6o/qYzjwCzw1/VP63eXfIUOu6OmqaLbeU7nTb1WRZV0u+TkEkoylXu&#xA;lYUePuO2OXU8EuGRyAj+kP1LDFxCxwUf6P7UDezaXpF3P5Glm8tLcXEsck+jW+i6rcc5SoeMkQzS&#xA;Atxoeu2TiDMeL6/fxR/UxJETwen3cJ/Wn4/KLUhE0Q07yoI3ZWZf0bd0LKCFP+9fbkco/PR78nzH&#xA;6mz8ue6Py/akvmbR7Lylp/1PW4/LVlp15IkrAaJqksDyxhlTk8M8iBwHagJrQ5dhyHKbjxkj+lH9&#xA;TDJEQFHhr+qf1o/Sfy2m1TSo7ux0/wAsGxu6SIJdI1CBm4FlVjHNcxuOp41XcGo2OQnqxGVE5LH9&#xA;KP6mUcNjYRr+qf1oDzR5J0/yvpi6lrdr5TtrNpUgVxpV9IS8laAKl0zHYEmg6DJ4dQchqJyE/wBa&#xA;P6mM8QgLPB/pf2pbqOteXtUura3v5fL91dWlqkVrDJ5e1syR2kdeAVedRGvI07ZZDHOIJHGAT/Ph&#xA;zYSlEmjw3/UkyPy/pV55x8qwQaafLF7oFjPJHBayaXeosMyElqI90rKT6nL5HMfLMYp2eMSP9Ifq&#xA;bYxM47cNf1T+tNr3y95u0rypNpk3+Hx5ehQ+rp8GlahOvB5ObUhhuZHb425Gi++VRy45T4vXx9/F&#xA;H9TMwkI16a/qn9bzyzHk29iMtnD5cuYgxQyQ+XNbkUMOoqrkV3zPl4g58f8Ap4OMOE8uH/SSTvyf&#xA;omma7NfxeXF8qyz28fo38R0fUYJFjnBHErPcRtRgpBplOfIYVx+J5eqP6A2Y4iV8PD/pT+tkln+W&#xA;nmGytbu0tbXytDbX6LHeRJp12FlRTyVXH1vcA75jy1cCQScm3mP1NgwkbDh38v2sNuI9A0bVrrRZ&#xA;Y/Ltvqbo0VxZr5e1pneINuV4yNzjJSoZaqeoOZYMpxEvXX9eDTtE16b/AKpda2fla/12BA/lGDVX&#xA;I9GC60fUbIOw2A9K4nhjZj4EVOMpTjH/ACnD5SifuCRGJP8ABf8AVP63ouq+WvzA1fTzp2pyeXLu&#xA;wPEm2ksLsp8Bqu31vtmBDNigbjxg+8fqciUJkUeH5ftQ3l3yH5p0C7a40qLy1YtMAlw9tp92jtGG&#xA;qVr9aOSy6mExUuM/EfqRDFKJ24fl+18iO7O7O5qzEsx8SdznMvsoFPfPyu8j3eifl7ca8b/9DeYf&#xA;MsltZaNeMnNoop7iNYwE7+u258FofHM/RGEJCcxY5V+Pxs8R7Q6meomcOI7YwSfeBv8AIbe9if5f&#xA;eZfNms+ZpbvVXm1e2050m1CztdPhvLi4UvwK8VRWp4tXbOh7T0+nw4+IY7Mu4PJ9mZdRmycHi8Ij&#xA;3yoJL5x1rzfoXmB9OkvqlIobpVezgt5EFxCs4jliKHiyB+LKe+ZGk0emy4xPw4i/Jx9VrNTiyGHi&#xA;k11B2Zvp9m87GO81iayCppiLdSW1qyzXOqWf1pI4Y0s2rw4sDykUeLCuaeU8fiTjHDAjHz9wdyce&#xA;UYccznneW6HmDW+7M/K2nzec/IGo+UPMV7Fd3LD6xoWoARoZLVkSS2uEiWjL6TvwkFNvsVyjWeDk&#xA;A8OhcbruLLRT1GkzGcwSYSonv/H7XzPqmmXul6jc6dfRGG8tJGhnjPZ0ND8x4HNM+m4ssckRKO4L&#xA;6m/5xwkd/wAs4VY1Ed3cKg8BUNT72OZul+k+94P2jH+FH+qHqOZLoXYq8o/OL/lOvy0/7azf8nLf&#xA;NnoP7rL/AFf1uLqPrh73pmq6vpmkWTXupXKWlojKjTSGi8nYKo+ZY0zXwxymaiLLkmQG5ReQS8p/&#xA;Nn/yZX5Zf8x11+u2zZ6L+5y+4fpcTP8A3kPi9WzWOWwP89f/ACVGv/8AGOD/AKiYszezv7+P46OP&#xA;qv7ssN0PXrX8qvNnmfy7qJ4aDcQvrfl9CSATQ87ZDvu3HgP9X3zMyYjqccJj6vpl+tphIYpSifp5&#xA;hAeV9CvdM/NryfdaoD+m9as7/VNWqKcZ7lJW9On7IjQKlPbJ5sglgmI/TEgD4UiESMkb5kEl77mj&#xA;c95T/wA5L/8AktT/AMx1v+p82fZP998C4mu/uy9WzWOWgNR0HSdSvLC7vrcTz6ZKZ7FmLcY5SvHn&#xA;wB4swHQsDTtk4ZJRBAPPmxMQavo80/8AXlP+3H/xtmy/5B/5zjf5f/NelaboGkaZd393YWy28+py&#xA;i4vihbjJKBx58CeIY/tFQK9TvmunllIAE8uTkiIF11TDK2T5v8gXf5h235R6/L5WitjHHe3TPNzm&#xA;+vKeEfM28SIULBdwS/jt0zoNTHEc8eO+Q93xddiMxjPD3l7bZR+W7fXNNvLr04vNepWHoKWZlmmh&#xA;iCyyBkB4ng37RFR0zTyMzEgfQC5oq/6TI8x2x5drf/rQ/l7/ALYs/wDxObNlj/xSX9b9TjS/vh/V&#xA;T384tM0O9/LrW5NWRONpayz2kzAco7lVrDwY7gtJxXbrWmU6Cchljw9T9jLUxBgb7lT8oNQ1TUPy&#xA;10G71R2kvHgIaR6lmRJGSJmJ3JaNVNe+DXRjHNIR5J05JxglmGYjc+RPJ/5XXOsfmld+W7hCNP0m&#xA;6lbUpBt/o8MlFC/8ZfhC+xr2zWQxky4X0TWdqDHpBlH1TAr3n9TPPOfmm68yfm55f8vaFC0ui+Vb&#xA;+1nvBAtYkMM8azSsF2WOBTwr0G/jl0pcUwByDqdHpo4NHky5DU8sZVfmDQ955vI/Kfl863ear6MF&#xA;7ez24DxWmmsolkDScWbdZKqo36Z2naWslp8YlGPFvTwXZeihqcpjOfhjvQvnPQ49E8wtYI09RawT&#xA;Sx3RBmikntllkhkoF+KNnKHbtmRo85y4hMiiejia3AMWaUIniAvfvei2ukx3Wp6TEb+6a50X9DT2&#xA;kd9dyTRzW93ZC4nW3icfCYpOCqqHoaUznc3aYjLNjlwiwQKG5Pm9Jj7IPhYc0CZWbl3RopHpFvD5&#xA;HeDzJZ30p13RZ7aLU7OkbW0j3YkZ7RZEflyjgjIk+EgNtsQK6jLpJ4YQyHYy5Dq9ZDtKHaGXJphG&#xA;8YH1fjzZd+fnliw1nSdO/MjQR6lnexRpqJUCtGFIZXoTRh/dP4Gg8cqzAGpjkWPYOpljnLTZPqjy&#xA;/SP0h6j+RujPpf5ZaQkilZrtXvJAdtp3LRn6YuOZGnjUfe6HtzN4mqlXIbfL9rOUuLd5pIUlRpoe&#xA;PrRKwLJzFV5KNxUdK5fbqiCqYoYf5t/LSy8z6xY6reaxqVtNpb+rpsVq1qkcEnw1dedvI7EmMH42&#xA;PtQZl4NWccTERjvzu/1tOTDxEGzt+O5DP+U2n3Osafqmq69rGrtps63NtaXs8LWwlTdWMUcMY2Ph&#xA;kvzpETGMYxvuG/3o/LgkEkmmc5hN7D/M/wCWtp5h8wWGuXWs6lb3WlP6umRW5tBFbuQnIqslvIzc&#xA;jGCfUZvu2zLw6s44GIjGpc+e/wBrRPBxSErO3u/UyvmltbA3E9ViUCS4lKrWm3JiAiAn2AGYhI5u&#xA;QASknnPyfaeb9HOlXeoXdpp01DcR2RgHrAMrpzaWKY0UrUcCPeuX6fOcUuIAE+f9rVlx8YolAa1+&#xA;WOha8NDbXLi61K50GYzQXUxhEkwLBvTuPTiRHT4VGygmm53NbMeslDi4QBxfjbdjLAJVe9LdU/LS&#xA;21Hzbb+aX13VIdUs1aOyELWYihjfkGjVGtn5KQ5+3yPvjDVmOMw4Y8J9/wCtZYblxWb+H6mY5iNz&#xA;FvPn5fWHnWyjsNT1G9t9PRlkNraG3RXkWvF2aSGWSoDdAwHtmTptUcJuIF+d/rac2EZBRJpkGm2c&#xA;1nYxW015NfyRAg3dz6XqvUkjn6KQpsNtlHvU75ROVm6ptiKHeicilhn/ACrC1/xj/i79O6p+mOPp&#xA;VrZel6Ff7nh9VpwptX7Xetd8zPzh8Pw+GPD8f1tHgevis38P1MzzDb0Pf2s11ZyW8N3LYySABbq3&#xA;ERlTcH4RMkse/TdDkomjdWgiwwjQfygtdAs3stH8za3Z2skjTPEktmQZHADN8VqevEZmZNcZm5Ri&#xA;T8f1tENPwihI/Z+pMfLP5aaVoXmC58wNqOoavq1zD9XN1qcyTMkfIMVj4Rx8a0H8MrzauU4CFCMR&#xA;3MoYRGXFZJ82XZitzCdU/K221HzQPMz+YNWg1WONoLZ4Hs0WGBmZvSjU2x+EcyKtVvEnMyGsMYcH&#xA;DHh+P62iWC5cVm/h+pq6/KfSNSliPmDVtV163hcSJZX1wn1cuOhaK3jgDU98RrZR+gRj7hv9tqcA&#xA;P1ElmscccUaxRKEjQBURQAqqBQAAdAMwybb12Kse1f8Awx5bh1XWbyUaWNVZFvtSQHkHEfpRGoV+&#xA;PED4SRSvzymfDGydrczD4uYxhEcXByHxsvJ9L8o/kBYrqQXza88erW5tblJruH7BmjuKqViRg3OF&#xA;ep6VwaXNDDMTidw7ftH89q8XhZMVRu9gf1q+g+V/+cetD1mz1ey8xJ9bspFmg9S8Rl5L0qOIrmyy&#xA;dtSnExJFHydHD2fzRNjHJATfl9/zjjLL6n+JSpLFmC3sdDXsaofwyY7dn3j5FifZ3Mf8nNOBp/5O&#xA;CxTTx5+vxYRoIktP0xJ6KoooqCP7IUDoKZV/Kwu6hf8AVZ/yFqKrgyfall35Z/5x3Gl2+knzKyWk&#xA;E0lyqxXCuWklVEZnYRPWixAAdt/HMLW6saiQlM8h0H7Ha9l6XWaMHwsX1d/9rMfI9p+WN15cv/JP&#xA;l/V5dXsLqOVpoHJkaFJhxcq4jjCDl8Qr+103yjHwEGIJN/juRrp6qOWOfJEQkK+NfH8B6RBBDBDH&#xA;BCgjhiUJHGooFVRQADwAzKAoU6SUiTZ5vlR/Nnn7Sdb1rVdIiu7C712+vWuXNmJj6EABtgvqK5RQ&#xA;8rITQdBWuYAnKttr3+ZeqOHTykBkIlGHBEb9BAykduf6/kqXv5hfnS1zBpdzeX8WozyuIrVLZY7h&#xA;pYkA4hVjQtGXJ7dskZzur3a8On0wiZyEeCoA78iQZSrezL6R776J/N+Yf5yRaBquuXF8YW0q6TTJ&#xA;tNWygcGVomWSUyqOS+m6hxSqkkD7O2SlknV31px8Wl08piFbiAkSZczV8PcLse6kPY+dvz4SPToF&#xA;luWXUvrDWUtxZxFvQQA+tJ+7J+AcnA3J8GBFQJ5Bt5MsmDSnilGtpAVZqRMem/08W993VJdP89/m&#xA;xbQXbaYbiGe/H6QnEVgjySTSXAh4/wB2eNVXkPhofpwRlLkO/wC/dnk0+m3J3rjo8XSEREfEy3DM&#xA;Py6/Mfz95g/NO0tNTmeCykS5NxpjRGKNIo4nEZCsOXP1V+Imvh7CzDMylv3OP2hpMeHCOGr4qsG7&#xA;9NyPzIofNGeY9Vm178wtQg8xaFrGp6FobCLStFsrWR4riYbNczsfTUpUVXfcEduXIE3IkgmuSxxe&#xA;HhjwThHjFyN+rf8AhoXLYc+8sUvfzS/Ng6nqd9pUFxp+ladzt/0b9UjMFrDURQL8SbyBjv8ALb4a&#xA;jK/FmbI/G7lHR6WAjGVE87EtyBAk9dt6ERzUX/Mj88LdnvJZr17e3a4SVjYRiFa0jRyfRAZRI4p4&#xA;YeOfO/xaBp9KaBER9N1I9IGUuvfQ9/yal/Mb88bUSXs0t88EP1lJSbFREjcAgkJ9JQVDsOPYEfPH&#xA;jmL3/F0nHpdLOUYnhG8b9X9Eyl8OQ96IH5m/na1w0R+uQNPGhQvYxkk29sXuPTUxUq5PNdvDCck/&#xA;v+xrhpNMOG+En0fxbXKRv5RDHNf1Pz75la3i8wQXDyg29nJKlpweSFy1wxLcBVkHEsPlkCTdn8cI&#xA;bYRxQiRCqINWf9Unwj5QFp55Z1z84RqFtPZW93bI/PVbq2htAIrgO5LvKFQfC6RALSrfyAkjDEzB&#xA;26D792GbHpjEiwZSnQN7gRIj9o3s0HqX5IeavOnmGLWZvMUczQrMjWVy6COEl+YkjhBRGonFepP9&#xA;cjTyJjZdb2phxY8tYztQ+B89zv3vUMvda7FXYq7FXYq7FXYq7FXYq7FVC/sLLUbKaxvoUuLS4Qxz&#xA;wSDkrK3UEYJRBFFnjyShISiaIfLf5o/kVrXlu4m1LQ4pNR0BiWogLz2w68ZFG7KP5x/sqd9flxGP&#xA;ue87L7chmAjk9OT7D7v1PKcqd+7FXYqybyT+XnmfzjfC30m1P1dWAuL+QFbeIH+Z+5/yVqclGJka&#xA;Dg63tDFpo3M79B1L60/L/wAgaL5K0RdO09fUuJKPfXrCkk8gHU+CrU8V7fOpOfixCA83z3tDXz1O&#xA;Tily6DuZPlrguxVJn8paRJ5tj80uJG1SK0NlFVyYljLl+QTs3xEdehyPCLttOaRgIfwgk/Ov1Jzk&#xA;mp2KrZEEkbISQGBUlSVYVFNiNwcBCQaLE/Kn5a6X5f1u811r691bV7uP0PrmoSiWRIAQRGpAX+Va&#xA;k+G1N6wx4xFydTq5ZQBQjGPIDlvz+bAvNn5v/mBp1/5is4LDTLRdAhSS4kZ5rpq3DxxwqrL6K8z6&#xA;wahWmx+WUSzT35bO003Z2Cc8YuUvEs9I7R+fOimflj/nIHypcaJZfpWS5bWTGqXKQ2rFZJlQGQxB&#xA;C/wgmm9D3oMsGoFdXDl2XlBP01sfqFeqyN+vJHN/zkL+W63N1CZ7njaqG9b0DwkYkDgm/LlU/tKB&#xA;74fHig9l5gAdt768qHFv3bbr738/fINrHOWN280E7231ZYQJGaIVkZebIvFP2uRB9sEtRELj7Lyy&#xA;O1cgf9MLA99ftSDyf+fVtq/ny80y7djpd9PDbeX44YQSC54l53LBhyPHoD1PQDcY8tyIPf8Ac26v&#xA;s7gwxyR5cMTLfe5XW3cmv5pfmp5k8t+YbPy/5c0uPUtQubb6yVZJZ33Z1CiKEo3+6ySeXTtgy5ZC&#xA;VAJ0Ggx5MfiZJcMeKuYHS+vP3UhPLf8AzkP5cubLTYdYjlOtXbMt1FYW8jQwkNRSRIfUIKn9jlvX&#xA;CNQNmOXsjLHiO3DGQG5HWq8uotKtM/5ySZ7mzfU9HNtpksdxcXFxGWZvRTkkBiDBVYtOnpNVqcsj&#xA;HUHqOjdPsY2YwlcvE4B8Bcj8GXWP56+R7z6okS3wnvF9RLf6q7uqmUxAt6fMfaX9kn79ssGeJpwp&#xA;9nZIxMjw1EkcxvXOu9f+Y/5my+VNf0HTYkgMV8ZbjVJZw7GKzt6NI0YQj4ygfjWu4pTGeXhlXTqy&#xA;0ui8XGZD6uKMY+ZPO/gGOeb/APnIHS20iSHygJJtYkngt4XuIGCATozh0B+03w8VU9zWhGVzz2PS&#xA;5Gn7MIJOWuER4ufPfhA+fcj9L/PTyzbeW0u7+a+1SW3UfWb6Gw9BHLMQNi/pKRsD8e56eGS/MADq&#xA;1/yVllk4Bwg77cV1XTZEan+ffk6PTrqXSzLe3cWni+iQRn0w7heEErKWKuDIOe1BuK12xnqALrox&#xA;0/Zk5ygJekTP2c7+XJQ0z/nITyg+lQzamlzFerCjXyQQO8KSstQgc/zHZa/fh/MRQOzMpqq35bjl&#xA;ub91BMo/zw8lStJFAl7PeLMltBZR25aeeRhVhFGGqfT6PypQ5LxhdedNR0MxHiNVwiXz5D3nuSXS&#xA;P+chtBl1LVbfVLaW3gtprhdOeGNneSK1RpJPVVivB+Kg8fffxyuOoFb/AIDlZeyZiQjHe+Ef50hd&#xA;fBMh/wA5A/l8Y2kBvDGkImkcW54qXj9RI2blxDt9gb05d++SOoi1Y+y80jECvVy3773rnWzL/J/m&#xA;3TvNehx6zp0VxDaysyKt1H6b1Q0JFCyke6k+HUHLYy4hbh5sRxzMTVjuTrJNTsVYf5l/KP8AL7zE&#xA;7zX+kxpdybtd2xMEhY/tN6ZVXP8ArA5TLBEuy03a2ow7Rlt3HdiMv/OMH5fO5ZbzVIx/Is0BH/DQ&#xA;MfxyA0se8uwHtNqR0h8j+tONG/5x/wDyz02USvYSahIpqv1yVpFG/wDInpo3+yU4Y6aI83Hzdv6q&#xA;Yri4fcHoNraWtpbpbWkKW9vEOMcMShEUeCqoAGXgAbB08pmRsmyq4WLsVdirsVdirsVdirsVYFrH&#xA;5NeWtVPmAz3d6jeZJ7ee+KvH8P1UsUSKsZKqTJv8h4ZV4I+23NGvmK2G0DD4G/t3UtE/JHyro/mG&#xA;DXLW5vHuoTcvxmkjYNJdxtFI9QikfA5A4/1qI4QPlSc3aE8keEgfUD/pRwge6koH/ONnkgWclsb3&#xA;UHZ2T052kjLJEjFjEoEYSjFqkleo2pvWP5ePm5Eu2cpkZVHcHatvVzPmfewrzx+Skdlfw6R5T0rV&#xA;7i7vHT/cpPNE2nqjNykMpVOaleIG9K/5XeqWH1UAXMxdpEwlkySjxb0APVxcPAPKq3+HwemeWPyQ&#xA;8paBrNtq8M93c3VpNLcwpO8ZhWWeNUYhFRenGq77HMmOIA26nNrp5I8JoA8P+xjwj8d6YeZvyp8t&#xA;+ZPMaa7qk140i24tHs4pvSgkhVmbg3BRJQlzUB8EsQJspxa/JDGIRoUSbrfeuvTl03QGo/kZ5CvN&#xA;QlvY4JbJpLX6olvasscKELxSYIFqZF6/ESCdyDgOCJvzZQ7SyxjGPMRlfv3sgnuKX/8AQu/kloni&#xA;luL2RDaJZxfHEDEEmWdpE/d05O6mtQdmbxwHBH7vsZR7UyiuX8fx4+dsg8q/lX5Z8seYZtb0szi4&#xA;mtfqfpSOHQIXWR2qV5lneMMatT2pSk4YxG6aM+rnljGMv4b+3+wAeS3zp+VPl7zdqQ1LUbi7iuVt&#xA;DZRiB4wioXZ+XFkf4jzIO9KYJ4RI2fxvbLT67JiAEa2kZfEiv7EgP/OO/kxZ4JYLy/i9KeK4YepE&#xA;xPoLxhQH09lj7dcicAP2/a2R7SyCPDQ5RHwib+080RefkL5Uu9C0vRJdR1NbHSFmW2jSaKhNxM00&#xA;juGicFuT02HTbDLBE1fRlj7UywlKQEeKcjIn5/ddjzQV7/zjb5FuXkdbrUInYKsIEsTLCq0ACAxV&#xA;pxFByJ64Py8btY9q5RAQAFAf73hvnzr4JtN+SPlOTQ9T0Zbi8jttUvl1Cd1eIOrrUrGn7unpjkaA&#xA;ivvkpYQRXnbCHaOSM+MCN8HB5VVITS/+cfvJWm6hHfW13qYljZ2p9a4V5rxb440SQVB/ZYV75Eae&#xA;IZZu08uQES4dzfLy4fuQbf8AONvkZxGJb3UXKI6OfViBkLuX5t+6+0K096D6X8vFtj21nBJHDvLi&#xA;5eXDtfcOSb2n5HeTLXy1qfl1HumsdTnjuGkZ4zLCYSDGsLenxAXcbqdiRkjiBFeduNHX5BMTFWI8&#xA;PlVV+33su8ueWtH8u6YunaVB6NuGMkhJLPJI32pJHbdmanU/IbAZZGIAoOLkySnLikbJf//Z</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:0DBD26B98126DE11B3D1B8A72A0FD3AC</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:0EBD26B98126DE11B3D1B8A72A0FD3AC</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:36afd8f9-fe20-3645-90ae-f2b1e5add112</stRef:instanceID>
            <stRef:documentID>uuid:35BA543EB01ADE1188099490AB71EC1D</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/">
         <illustrator:StartupProfile>Basic CMYK</illustrator:StartupProfile>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>5.000000</stDim:w>
            <stDim:h>5.000000</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>False</xapTPg:HasVisibleOverprint>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Default Swatch Group</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
                  <xapG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>White</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>0.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>Black</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>0.000000</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>100.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>logo red</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>20.000000</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>C=0 M=100 Y=100 K=20</xapG:swatchName>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:cyan>0.000000</xapG:cyan>
                           <xapG:magenta>100.000000</xapG:magenta>
                           <xapG:yellow>100.000000</xapG:yellow>
                           <xapG:black>19.999998</xapG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xapG:swatchName>PANTONE Reflex Blue C</xapG:swatchName>
                           <xapG:type>PROCESS</xapG:type>
                           <xapG:tint>100.000000</xapG:tint>
                           <xapG:mode>CMYK</xapG:mode>
                           <xapG:cyan>100.000000</xapG:cyan>
                           <xapG:magenta>72.999992</xapG:magenta>
                           <xapG:yellow>0.000000</xapG:yellow>
                           <xapG:black>2.000000</xapG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xapG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -79.3926 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 79.3926 li
324.486 79.3926 li
324.486 0 li
cp
clp
[1 0 0 1 0 0 ]ct
85.6099 50.2793 mo
86.2461 50.2793 86.4297 50.7412 86.3354 51.0806 cv
86.2393 51.4346 85.6025 53.0073 85.3032 54.1025 cv
84.4834 57.0767 84.5801 59.2212 84.5073 59.479 cv
84.3789 59.9409 83.6416 60.1431 83.4409 60.1431 cv
82.8662 60.1431 82.5864 59.7578 82.6455 59.4175 cv
82.7378 58.9297 82.9048 57.585 83.1675 56.2305 cv
83.4346 54.873 84.0757 52.2524 84.3101 51.4053 cv
84.5474 50.542 85.21 50.2793 85.6099 50.2793 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
f
95.2588 53.0601 mo
96.0308 53.0601 96.1992 54.1401 96.0405 54.9399 cv
95.9307 55.4976 95.7026 56.5576 95.541 57.2036 cv
95.3765 57.8521 95.2695 58.6401 95.1533 59.0718 cv
95.0327 59.5034 94.6616 59.9487 93.9316 59.9487 cv
93.2046 59.9487 93.1929 59.5483 93.3071 59.1323 cv
93.5591 58.2104 94.0957 56.4976 94.2915 55.7749 cv
94.4644 55.1416 94.6797 54.2466 94.1846 54.2466 cv
93.6899 54.2466 93.3335 54.4648 92.6216 55.0366 cv
92.5879 55.0967 92.2744 56.7642 92.1211 57.3604 cv
91.957 58.0098 91.7832 58.811 91.6655 59.2451 cv
91.5483 59.6729 91.2446 60.1055 90.5254 60.1221 cv
89.8726 60.1221 89.731 59.9063 89.8452 59.4922 cv
89.9121 59.2598 90.8003 56.3809 90.9316 55.7158 cv
91.0679 55.1133 91.062 54.4048 90.6572 54.4058 cv
90.2383 54.4058 89.0098 55.3765 88.7285 56.4111 cv
88.3447 57.7969 88.5024 58.9668 88.291 59.7373 cv
88.2012 60.0796 87.5225 60.2803 87.3066 60.2803 cv
86.9053 60.2803 86.5889 60.1265 86.5547 59.9116 cv
86.5361 59.4175 86.8032 57.8281 86.9067 57.3374 cv
87.2109 55.7798 87.1812 54.8706 87.3384 54.3018 cv
87.4683 53.8369 88.1611 53.5122 88.3926 53.5122 cv
88.9521 53.5122 89.2759 53.6216 89.0913 54.6846 cv
89.6997 53.958 90.7222 53.2183 91.5107 53.2183 cv
92.0708 53.2183 92.5566 53.5264 92.5947 54.1274 cv
93.2432 53.4941 94.4644 53.0601 95.2588 53.0601 cv
cp
f
98.8501 57.0498 mo
98.6479 57.7891 98.4888 58.9448 98.4014 59.2544 cv
98.7266 59.2544 100.691 57.8481 101.004 56.7227 cv
101.32 55.5703 100.717 54.2124 100.281 54.2124 cv
99.834 54.2124 99.439 54.8003 99.3574 55.0942 cv
99.1709 55.7695 99.0596 56.2974 98.8501 57.0498 cv
cp
97.29 55.2485 mo
97.332 55.0942 97.6538 54.8154 97.7979 54.6309 cv
97.9941 53.7524 li
98.1055 53.2295 98.5923 52.8726 99.2114 52.8726 cv
99.5684 52.8726 99.9067 53.1025 99.834 53.3672 cv
100.032 53.1514 100.294 53.041 100.543 53.041 cv
101.472 53.0396 103.315 54.9053 102.837 56.6465 cv
102.355 58.3877 98.27 60.4087 98.1953 60.4561 cv
98.0732 61.0122 97.6694 62.9365 97.5449 63.3838 cv
97.4263 63.8159 96.9707 64.123 96.5518 64.123 cv
96.0405 64.123 95.7798 63.8315 95.9897 63.0625 cv
96.1294 62.5669 96.4282 61.6909 96.6299 60.9653 cv
96.9893 59.6563 97.3105 56.9126 97.6152 55.8027 cv
97.3364 55.8027 97.2178 55.5103 97.29 55.2485 cv
cp
f
108.436 55.7168 mo
108.16 55.7168 107.726 55.6553 107.763 55.3481 cv
107.828 54.8862 107.779 54.6694 107.472 54.6694 cv
107.223 54.6694 106.826 54.9321 105.834 55.8862 cv
105.75 56.3032 105.621 57.168 105.505 58.1553 cv
105.423 58.9111 105.492 59.4478 105.398 59.7881 cv
105.302 60.1265 104.651 60.3125 104.429 60.3135 cv
104.013 60.3125 103.692 60.1265 103.659 59.9116 cv
103.638 59.4175 103.882 57.8008 103.986 57.3091 cv
104.08 56.7993 104.235 55.1646 104.391 54.5977 cv
104.583 53.9014 104.873 53.5171 105.568 53.5303 cv
106.097 53.5303 106.261 53.8252 106.207 54.0244 cv
106.13 54.3047 106.039 54.5757 105.978 54.8105 cv
106.979 53.7476 107.733 53.376 108.527 53.376 cv
109.293 53.375 109.553 53.8535 109.241 54.9922 cv
109.145 55.3315 108.715 55.7168 108.436 55.7168 cv
cp
f
113.553 56.8223 mo
113.9 55.5732 113.687 54.3755 113.254 54.3755 cv
112.802 54.3755 111.648 55.7617 111.236 57.2539 cv
110.894 58.5029 111.142 59.0576 111.623 59.0576 cv
112.179 59.0576 113.209 58.0859 113.553 56.8223 cv
cp
112.267 53.5122 mo
112.473 53.3726 112.518 53.1113 112.919 53.1079 cv
113.308 53.1079 113.372 53.2617 113.727 53.2617 cv
114.473 53.2617 115.979 54.1567 115.333 56.4976 cv
114.693 58.8228 112.405 60.2134 111.104 60.2148 cv
109.786 60.2188 108.883 59.4009 109.444 57.3477 cv
109.826 55.9634 111.052 54.2676 112.267 53.5122 cv
cp
f
121.71 55.4487 mo
120.763 56.6333 119.046 59.2231 118.802 59.6523 cv
118.648 59.9321 118.338 60.2231 117.996 60.2231 cv
117.668 60.2231 117.404 59.8398 117.361 59.3774 cv
117.314 58.7612 116.49 55.1582 116.772 54.1401 cv
116.869 53.7827 117.212 53.3853 117.893 53.3853 cv
118.299 53.3853 118.728 53.5068 118.528 54.9067 cv
118.448 55.478 118.584 57.2988 118.75 57.8813 cv
119.276 57.0317 120.816 54.583 121.019 54.1812 cv
121.185 53.8589 121.481 53.3501 121.946 53.3501 cv
122.509 53.3325 122.7 53.6392 122.597 54.0747 cv
122.524 54.3506 122.165 54.8594 121.71 55.4487 cv
cp
f
122.875 60.2813 mo
122.381 60.2813 122.074 60.0386 122.223 59.4985 cv
122.372 58.96 122.965 56.1235 123.415 54.4893 cv
123.557 53.98 124.109 53.6099 124.696 53.6099 cv
125.191 53.6099 125.337 53.8701 125.236 54.2236 cv
125.146 54.5635 124.773 55.5229 124.566 56.2739 cv
124.364 57.0161 124.094 58.8945 123.971 59.3403 cv
123.797 59.9707 123.245 60.2813 122.875 60.2813 cv
cp
124.658 52.6084 mo
124.118 52.6084 123.874 52.4194 123.988 52.0063 cv
124.088 51.6494 124.644 51.2676 125.075 51.2642 cv
125.697 51.2676 125.994 51.4795 125.882 51.8818 cv
125.749 52.376 125.39 52.6084 124.658 52.6084 cv
cp
f
131.3 53.189 mo
132.355 53.189 132.447 54.2656 132.333 55.0708 cv
132.25 55.5923 131.997 56.686 131.834 57.3311 cv
131.671 57.979 131.548 58.7676 131.433 59.1963 cv
131.312 59.6294 130.74 60.0142 130.231 60.0142 cv
129.765 60.0142 129.396 59.7847 129.509 59.3657 cv
129.62 58.9668 129.984 57.8716 130.151 57.2539 cv
130.309 56.686 131.05 54.3276 130.382 54.3276 cv
129.966 54.3301 128.476 55.0708 127.931 57.061 cv
127.773 57.626 127.681 59.0923 127.495 59.7549 cv
127.404 60.0967 126.969 60.2646 126.662 60.2646 cv
126.197 60.2646 125.95 60.0361 125.9 59.8193 cv
125.833 59.2212 126.083 58.2617 126.221 57.3052 cv
126.333 56.5527 126.539 55.0723 126.671 54.5957 cv
126.822 54.0391 127.162 53.6099 127.901 53.6074 cv
128.414 53.6074 128.647 53.8213 128.51 54.6074 cv
129.451 53.6519 130.461 53.189 131.3 53.189 cv
cp
f
134.265 64.7754 mo
133.336 64.7783 131.938 64.4531 132.283 63.2036 cv
132.396 62.7891 132.749 62.4644 133.292 62.4644 cv
133.722 62.4644 133.898 62.7881 133.913 63.0166 cv
133.917 63.3892 134.05 63.8047 134.485 63.8047 cv
135.323 63.8047 136.294 62.1841 136.595 61.0918 cv
136.753 60.519 136.872 59.7485 136.93 58.8535 cv
136.622 59.3633 135.641 60.0454 134.701 60.0454 cv
133.677 60.0454 132.637 59.4751 133.115 57.7314 cv
134.086 54.2188 136.766 52.9243 137.974 52.9214 cv
138.283 52.9189 138.919 53.0293 138.892 53.3052 cv
138.795 53.7681 138.273 54.416 137.949 54.416 cv
137.797 54.416 137.728 54.3853 137.743 54.3267 cv
137.743 54.3267 137.739 54.2158 137.738 54.2314 cv
137.752 54.1699 137.563 54.0952 137.451 54.0952 cv
136.628 54.0962 135.433 55.5732 134.856 57.667 cv
134.59 58.6401 134.877 58.9346 135.484 58.9307 cv
135.903 58.9307 136.229 58.7021 136.438 58.4541 cv
136.6 58.2539 136.709 58.0244 136.822 57.8394 cv
137.087 57.3901 137.151 57.2036 137.362 56.4517 cv
137.444 56.1421 137.455 55.6035 137.58 55.1416 cv
137.69 54.7412 138.155 54.2944 138.744 54.2944 cv
139.116 54.2944 139.388 54.6011 139.346 54.8613 cv
139.288 55.1235 139.151 56.0791 138.883 57.0518 cv
138.622 58.0059 138.778 59.1299 138.224 61.1343 cv
137.673 63.1382 135.861 64.7754 134.265 64.7754 cv
cp
f
146.288 59.6958 mo
144.772 59.6968 144.402 59.3403 144.672 58.3691 cv
145.979 53.624 150.328 50.4741 152.265 50.4741 cv
152.914 50.4741 153.031 50.6733 152.941 50.9985 cv
152.769 51.6143 151.724 52.0498 151.203 52.2485 cv
147.539 53.6841 146.579 57.061 146.38 57.7983 cv
146.178 58.5249 146.547 58.5391 147.275 58.5391 cv
148.035 58.5391 150.598 57.7173 151.525 57.395 cv
151.88 57.2676 152.326 56.9482 152.686 56.9482 cv
153.09 56.9316 153.296 57.1909 153.192 57.5786 cv
153.045 58.1157 152.635 58.3618 152.286 58.5635 cv
151.485 58.9526 147.81 59.6934 146.288 59.6958 cv
cp
f
157.919 56.7881 mo
158.262 55.5425 158.052 54.3379 157.617 54.3379 cv
157.169 54.3403 156.013 55.7285 155.598 57.2241 cv
155.255 58.4707 155.505 59.0244 155.986 59.0244 cv
156.542 59.0244 157.57 58.0513 157.919 56.7881 cv
cp
156.626 53.4785 mo
156.837 53.3374 156.88 53.0767 157.278 53.0757 cv
157.67 53.0757 157.736 53.2295 158.09 53.2295 cv
158.832 53.2295 160.34 54.1221 159.696 56.4644 cv
159.055 58.7881 156.768 60.1802 155.467 60.1802 cv
154.149 60.1802 153.244 59.3647 153.81 57.3164 cv
154.19 55.9297 155.415 54.2334 156.626 53.4785 cv
cp
f
169.355 53.0063 mo
170.126 53.0049 170.296 54.0835 170.135 54.8853 cv
170.029 55.4409 169.8 56.5005 169.639 57.1494 cv
169.473 57.7959 169.366 58.584 169.248 59.0137 cv
169.129 59.4478 168.758 59.8896 168.032 59.895 cv
167.304 59.895 167.291 59.4922 167.407 59.0771 cv
167.656 58.1553 168.191 56.4463 168.391 55.7197 cv
168.565 55.0854 168.778 54.1914 168.282 54.1914 cv
167.785 54.1929 167.434 54.4087 166.718 54.98 cv
166.685 55.04 166.367 56.7041 166.217 57.3091 cv
166.057 57.9526 165.881 58.7573 165.763 59.186 cv
165.639 59.6191 165.341 60.0488 164.622 60.0674 cv
163.971 60.0693 163.827 59.8516 163.945 59.4341 cv
164.007 59.2017 164.892 56.3218 165.028 55.6553 cv
165.163 55.0596 165.156 54.3481 164.755 54.3481 cv
164.334 54.3481 163.109 55.3213 162.822 56.3564 cv
162.441 57.7402 162.601 58.9141 162.387 59.6846 cv
162.294 60.0205 161.624 60.2212 161.406 60.2212 cv
161.002 60.2212 160.687 60.0693 160.652 59.8535 cv
160.638 59.3608 160.903 57.7725 161.005 57.2793 cv
161.31 55.7222 161.285 54.8145 161.438 54.2456 cv
161.564 53.7817 162.258 53.458 162.49 53.458 cv
163.046 53.458 163.373 53.5649 163.193 54.627 cv
163.792 53.9063 164.817 53.1631 165.606 53.1631 cv
166.165 53.1631 166.656 53.4683 166.691 54.0732 cv
167.344 53.439 168.565 53.0063 169.355 53.0063 cv
cp
f
179.64 52.9971 mo
180.415 52.9971 180.585 54.0747 180.424 54.876 cv
180.318 55.4331 180.09 56.4951 179.926 57.1431 cv
179.763 57.7891 179.657 58.5737 179.539 59.0078 cv
179.421 59.438 179.048 59.8857 178.319 59.8857 cv
177.592 59.8877 177.579 59.4839 177.695 59.0718 cv
177.948 58.145 178.482 56.437 178.678 55.7114 cv
178.852 55.0815 179.066 54.1836 178.572 54.1865 cv
178.075 54.1865 177.721 54.4004 177.006 54.9692 cv
176.976 55.0337 176.657 56.6978 176.508 57.2998 cv
176.346 57.9443 176.171 58.7456 176.047 59.1787 cv
175.932 59.6113 175.625 60.0415 174.91 60.0591 cv
174.257 60.0591 174.12 59.8433 174.233 59.4263 cv
174.296 59.1963 175.186 56.314 175.317 55.6514 cv
175.455 55.0493 175.447 54.3403 175.042 54.3403 cv
174.625 54.3452 173.397 55.3159 173.112 56.3457 cv
172.733 57.7314 172.89 58.9023 172.68 59.6729 cv
172.585 60.0132 171.91 60.2148 171.693 60.2148 cv
171.288 60.2148 170.976 60.063 170.942 59.8433 cv
170.924 59.353 171.188 57.7637 171.293 57.2705 cv
171.599 55.7158 171.568 54.8042 171.727 54.2354 cv
171.856 53.7725 172.549 53.4517 172.781 53.4517 cv
173.34 53.4517 173.661 53.5547 173.479 54.6191 cv
174.082 53.896 175.105 53.1548 175.898 53.1548 cv
176.454 53.1538 176.941 53.4609 176.98 54.063 cv
177.63 53.4287 178.852 52.9971 179.64 52.9971 cv
cp
f
184.14 53.9946 mo
184.03 54.3955 183.655 55.4756 183.469 56.1558 cv
183.273 56.8608 182.73 58.7729 183.477 58.7729 cv
184.455 58.7729 185.481 57.5698 185.804 56.3999 cv
185.923 55.9658 185.964 55.6411 185.995 55.3677 cv
186.072 54.627 185.964 54.2236 186.06 53.8872 cv
186.153 53.5469 186.684 53.1465 187.271 53.1465 cv
187.686 53.1465 187.86 53.3145 187.893 53.5288 cv
187.911 54.0244 187.559 55.6411 187.455 56.1382 cv
187.362 56.6465 187.176 57.707 187.119 58.2012 cv
187.104 58.3691 186.989 59.0605 186.957 59.186 cv
186.833 59.6191 186.252 59.895 186.061 59.895 cv
185.844 59.895 185.287 59.8501 185.237 59.5278 cv
185.208 59.3403 185.29 58.9243 185.362 58.5083 cv
184.176 59.6655 182.837 60.2378 182.05 60.2378 cv
181.477 60.2378 180.855 59.623 181.474 57.1577 cv
181.635 56.5078 182.084 54.5977 182.201 54.1646 cv
182.324 53.7329 182.718 53.2568 183.459 53.2568 cv
184.124 53.2568 184.251 53.5776 184.14 53.9946 cv
cp
f
194.056 53.1401 mo
195.114 53.1401 195.2 54.2188 195.09 55.021 cv
195.006 55.5435 194.752 56.6377 194.588 57.2832 cv
194.426 57.9331 194.301 58.7188 194.183 59.1514 cv
194.065 59.5825 193.497 59.9668 192.984 59.9668 cv
192.521 59.9678 192.149 59.7373 192.265 59.3198 cv
192.375 58.9214 192.736 57.8237 192.908 57.2065 cv
193.062 56.6387 193.804 54.2798 193.137 54.2798 cv
192.72 54.2822 191.231 55.0225 190.682 57.0098 cv
190.527 57.5811 190.435 59.0449 190.252 59.7075 cv
190.155 60.0479 189.726 60.2188 189.414 60.2188 cv
188.952 60.2188 188.704 59.9834 188.656 59.7705 cv
188.588 59.1694 188.834 58.2153 188.973 57.2563 cv
189.089 56.5054 189.294 55.0264 189.428 54.5469 cv
189.577 53.9897 189.912 53.5586 190.656 53.5586 cv
191.167 53.5586 191.405 53.7725 191.266 54.5601 cv
192.208 53.606 193.218 53.1401 194.056 53.1401 cv
cp
f
196.339 60.229 mo
195.842 60.229 195.54 59.978 195.687 59.4404 cv
195.834 58.9023 196.43 56.0674 196.879 54.4316 cv
197.014 53.9243 197.569 53.5532 198.155 53.5532 cv
198.654 53.5532 198.795 53.8179 198.699 54.168 cv
198.606 54.5112 198.236 55.4663 198.031 56.2202 cv
197.826 56.9609 197.553 58.8408 197.432 59.2847 cv
197.259 59.9189 196.71 60.229 196.339 60.229 cv
cp
198.12 52.5518 mo
197.582 52.5518 197.338 52.3682 197.453 51.9497 cv
197.547 51.5967 198.103 51.2104 198.539 51.2104 cv
199.153 51.2104 199.455 51.4253 199.347 51.8291 cv
199.208 52.3193 198.849 52.5518 198.12 52.5518 cv
cp
f
199.682 54.8335 mo
199.401 54.8335 199.274 54.5703 199.322 54.3853 cv
199.404 54.0952 199.628 53.7681 199.989 53.7681 cv
200.19 53.7681 200.412 53.6895 200.583 53.6895 cv
200.829 52.8101 200.784 52.1177 200.967 51.5039 cv
201.061 51.1616 201.422 50.8086 201.932 50.8086 cv
202.505 50.8086 202.704 51.144 202.625 51.4399 cv
202.549 51.7314 202.374 52.8101 202.185 53.4902 cv
202.396 53.458 202.534 53.3501 202.781 53.3501 cv
203.108 53.3501 203.285 53.6113 203.207 53.9512 cv
203.145 54.2271 202.905 54.4292 202.738 54.4766 cv
202.484 54.5508 202.178 54.583 202.017 54.6143 cv
201.939 54.8926 201.571 56.5708 201.485 57.0498 cv
201.396 57.5415 200.968 59.3774 200.89 59.6665 cv
200.811 59.9463 200.399 60.334 199.993 60.3354 cv
199.502 60.3354 199.153 60.1196 199.198 59.7935 cv
199.254 59.4702 199.628 57.8813 199.794 57.2793 cv
199.959 56.6812 200.303 55.1084 200.391 54.7847 cv
200.17 54.8003 199.912 54.8335 199.682 54.8335 cv
cp
f
203.619 60.2212 mo
203.122 60.2212 202.821 59.9746 202.969 59.4365 cv
203.118 58.896 203.71 56.061 204.161 54.4292 cv
204.298 53.9189 204.85 53.5503 205.441 53.5469 cv
205.936 53.5469 206.079 53.8101 205.984 54.1636 cv
205.885 54.502 205.52 55.4614 205.309 56.2163 cv
205.106 56.957 204.838 58.833 204.713 59.2798 cv
204.544 59.9116 203.994 60.2212 203.619 60.2212 cv
cp
205.403 52.5483 mo
204.861 52.5483 204.618 52.3647 204.735 51.9453 cv
204.831 51.5903 205.385 51.2051 205.819 51.2051 cv
206.441 51.2051 206.736 51.418 206.631 51.8198 cv
206.488 52.3115 206.133 52.5454 205.403 52.5483 cv
cp
f
208.824 55.6089 mo
209.142 55.4561 209.939 55.1636 210.21 55.0107 cv
210.28 54.7617 210.129 54.2378 209.62 54.2378 cv
209.415 54.2378 208.931 55.2251 208.824 55.6089 cv
cp
209.931 58.7842 mo
209.559 59.0137 208.03 60.063 207.646 60.0674 cv
206.621 60.0674 206.528 58.5415 206.806 57.5376 cv
206.878 57.2759 li
206.79 57.3091 206.691 57.3218 206.557 57.3218 cv
206.415 57.3218 206.333 57.064 206.38 56.8906 cv
206.499 56.46 206.653 56.354 207.156 56.1519 cv
207.718 54.1157 208.931 52.9141 209.318 52.9141 cv
210.986 52.9126 211.876 54.0205 211.72 54.5908 cv
211.612 54.9922 211.538 55.3159 210.861 55.686 cv
210.332 55.98 208.815 56.6592 208.509 56.8608 cv
208.41 57.228 li
208.196 57.9971 208.34 58.5391 208.561 58.5391 cv
208.778 58.5381 209.148 58.3223 209.657 57.9229 cv
209.957 57.6724 210.452 57.228 210.931 56.9033 cv
211.233 56.7041 211.417 56.5977 211.621 56.5977 cv
211.991 56.5977 212.113 56.7642 212.035 57.0547 cv
211.887 57.5952 210.625 58.3501 209.931 58.7842 cv
cp
f
214.513 60.1504 mo
213.4 60.1543 212.47 59.814 212.706 58.9526 cv
212.978 57.9624 213.61 57.4722 214.104 57.4722 cv
214.584 57.4722 214.764 57.8237 214.708 58.0396 cv
214.626 58.3325 214.489 58.502 214.4 58.5352 cv
214.312 58.5786 214.159 58.689 214.104 58.8745 cv
214.044 59.105 214.557 59.1514 214.729 59.1514 cv
215.707 59.1514 216.264 58.5146 216.368 58.146 cv
216.682 57.0059 215.594 56.8389 214.818 56.8389 cv
213.89 56.8418 213.49 56.8838 213.306 56.8838 cv
212.98 56.8838 212.642 56.5317 212.808 55.9297 cv
213.044 55.0708 215.328 52.9717 216.542 52.9536 cv
217.609 52.9536 217.54 54.2158 217.464 54.4932 cv
217.413 54.6816 217.078 55.1094 216.614 55.1094 cv
216.165 55.1094 216.027 54.9888 216.022 54.7886 cv
216.018 54.6963 215.95 54.4316 215.778 54.4316 cv
215.623 54.4316 215.47 54.479 215.398 54.5137 cv
215.101 54.6357 214.632 55.0542 214.532 55.4063 cv
214.492 55.5591 214.571 55.605 215.005 55.605 cv
215.144 55.605 215.568 55.5898 215.971 55.5898 cv
216.264 55.5898 218.452 55.9731 217.964 57.7432 cv
217.568 59.1787 215.6 60.1504 214.513 60.1504 cv
cp
f
143.891 67.4795 mo
143.498 67.4795 143.435 66.9863 143.49 66.7861 cv
143.542 66.6011 143.832 66.1094 144.2 66.1094 cv
144.715 66.1094 147.053 65.5942 147.471 65.5498 cv
147.884 65.502 150.528 64.8999 151.152 64.8999 cv
151.488 64.8965 151.652 65.2671 151.566 65.5767 cv
151.485 65.8848 151.073 66.2559 150.637 66.2559 cv
150.203 66.2559 148.743 66.4253 148.049 66.5962 cv
147.803 67.4292 147.594 68.7529 147.456 69.3706 cv
147.302 69.9883 146.901 71.8965 146.8 72.4995 cv
146.704 73.0703 146.815 73.7915 146.704 74.1948 cv
146.59 74.6118 146.074 74.7959 145.624 74.7959 cv
145.175 74.7998 144.93 74.4429 144.954 73.8389 cv
144.968 73.5181 145.237 71.8706 145.526 70.8062 cv
145.875 69.5415 146.019 68.5234 146.398 66.9688 cv
145.639 67.0762 144.412 67.4795 143.891 67.4795 cv
cp
f
154.589 71.0918 mo
154.916 69.8574 154.898 68.9492 154.545 68.9492 cv
153.909 68.9492 152.484 70.3081 152.229 71.23 cv
152.07 71.8037 151.871 72.6323 151.831 73.0649 cv
151.81 73.437 151.802 73.96 151.708 74.2974 cv
151.61 74.6533 151.288 74.8701 150.994 74.8701 cv
150.293 74.8853 150.255 74.7471 150.206 74.5313 cv
150.167 74.0356 150.531 71.4766 150.652 70.8164 cv
150.919 69.4609 151.154 66.7974 151.528 65.4365 cv
151.816 64.3901 152.298 64.0513 153.101 64.0513 cv
153.583 64.0483 153.813 64.3413 153.715 64.6982 cv
153.617 65.0513 153.396 65.5752 153.093 66.6704 cv
152.888 67.4272 152.762 68.5659 152.541 69.4746 cv
152.866 68.8433 154.226 67.7949 155.588 67.7949 cv
156.535 67.793 156.936 68.8081 156.268 71.2261 cv
156.144 71.6919 155.594 73.1255 155.397 73.7725 cv
155.282 74.2036 154.924 74.666 154.195 74.6533 cv
153.724 74.6348 153.529 74.3286 153.629 73.96 cv
153.791 73.3901 154.257 72.3115 154.589 71.0918 cv
cp
f
162.218 70.332 mo
161.941 70.332 161.509 70.2695 161.545 69.9624 cv
161.613 69.4995 161.564 69.2847 161.253 69.2847 cv
161.005 69.2847 160.607 69.5479 159.619 70.502 cv
159.529 70.9194 159.404 71.7798 159.289 72.7671 cv
159.204 73.522 159.273 74.061 159.177 74.4014 cv
159.086 74.7407 158.432 74.9243 158.212 74.9243 cv
157.794 74.9243 157.475 74.7417 157.441 74.5259 cv
157.42 74.0308 157.661 72.4111 157.771 71.9209 cv
157.863 71.4126 158.02 69.7808 158.174 69.2065 cv
158.369 68.5156 158.659 68.1279 159.349 68.1445 cv
159.879 68.1445 160.043 68.4375 159.992 68.6377 cv
159.914 68.9136 159.825 69.1934 159.756 69.4248 cv
160.764 68.3604 161.515 67.9878 162.306 67.9868 cv
163.08 67.9868 163.335 68.4634 163.024 69.6074 cv
162.928 69.9458 162.499 70.3311 162.218 70.332 cv
cp
f
167.333 71.4355 mo
167.68 70.1885 167.469 68.9844 167.036 68.9878 cv
166.585 68.9878 165.43 70.3726 165.017 71.8706 cv
164.673 73.1172 164.923 73.6724 165.404 73.6724 cv
165.961 73.6724 166.99 72.6978 167.333 71.4355 cv
cp
166.049 68.125 mo
166.254 67.9839 166.298 67.7231 166.698 67.7222 cv
167.087 67.7222 167.155 67.8789 167.512 67.8789 cv
168.259 67.8789 169.762 68.7661 169.115 71.1084 cv
168.473 73.438 166.188 74.8276 164.887 74.8276 cv
163.569 74.8276 162.663 74.0122 163.228 71.9619 cv
163.608 70.5752 164.834 68.8818 166.049 68.125 cv
cp
f
172.98 68.6597 mo
172.87 69.0625 172.498 70.1357 172.311 70.8164 cv
172.112 71.5239 171.575 73.437 172.318 73.437 cv
173.294 73.437 174.326 72.2305 174.645 71.0605 cv
174.761 70.6279 174.803 70.3057 174.833 70.0298 cv
174.913 69.2886 174.808 68.8882 174.903 68.5464 cv
174.993 68.21 175.522 67.8096 176.111 67.8081 cv
176.531 67.8081 176.704 67.9775 176.738 68.1948 cv
176.75 68.6855 176.398 70.3057 176.296 70.7983 cv
176.205 71.3047 176.021 72.3701 175.961 72.8618 cv
175.949 73.0342 175.829 73.7261 175.798 73.8457 cv
175.678 74.2817 175.093 74.5566 174.906 74.5566 cv
174.688 74.5566 174.128 74.5156 174.078 74.1895 cv
174.05 74.0049 174.133 73.5874 174.199 73.1699 cv
173.02 74.3286 171.683 74.9009 170.892 74.9009 cv
170.32 74.9009 169.699 74.2832 170.316 71.8184 cv
170.48 71.1719 170.925 69.2617 171.043 68.8301 cv
171.162 68.4014 171.559 67.9224 172.301 67.9224 cv
172.965 67.9185 173.095 68.2432 172.98 68.6597 cv
cp
f
178.515 79.3926 mo
177.59 79.3926 176.188 79.0757 176.535 77.8247 cv
176.646 77.4087 176.999 77.0835 177.541 77.0815 cv
177.974 77.0815 178.15 77.4087 178.162 77.6382 cv
178.17 78.0083 178.305 78.4219 178.742 78.4219 cv
179.575 78.4204 180.545 76.8037 180.85 75.71 cv
181.007 75.1382 181.122 74.3667 181.186 73.4756 cv
180.874 73.9839 179.9 74.6621 178.951 74.6621 cv
177.928 74.666 176.895 74.0933 177.371 72.3535 cv
178.337 68.8403 181.019 67.5435 182.23 67.5425 cv
182.537 67.5425 183.174 67.6514 183.143 67.9263 cv
183.045 68.3896 182.529 69.0366 182.201 69.0366 cv
182.05 69.0366 181.981 69.0049 182 68.9458 cv
182 68.9458 181.996 68.8369 181.994 68.8535 cv
182.007 68.7905 181.811 68.7134 181.705 68.7134 cv
180.88 68.7134 179.683 70.1938 179.109 72.292 cv
178.841 73.2627 179.134 73.5513 179.738 73.5513 cv
180.156 73.5513 180.482 73.3203 180.691 73.0723 cv
180.853 72.8721 180.964 72.6426 181.078 72.4575 cv
181.337 72.0083 181.406 71.8271 181.614 71.0698 cv
181.698 70.7617 181.707 70.2246 181.836 69.7637 cv
181.942 69.3618 182.406 68.9136 183 68.9136 cv
183.366 68.9136 183.64 69.2192 183.596 69.4824 cv
183.538 69.7446 183.402 70.6982 183.136 71.6689 cv
182.876 72.626 183.027 73.7505 182.478 75.7559 cv
181.923 77.7593 180.115 79.3926 178.515 79.3926 cv
cp
f
188.853 71.0645 mo
189.172 69.833 189.162 68.9224 188.804 68.9224 cv
188.167 68.9224 186.743 70.2822 186.487 71.207 cv
186.33 71.7769 186.131 72.6094 186.093 73.0405 cv
186.065 73.4077 186.06 73.9341 185.97 74.2734 cv
185.87 74.6274 185.55 74.8433 185.251 74.8433 cv
184.552 74.8599 184.512 74.7188 184.464 74.5083 cv
184.431 74.0098 184.792 71.4531 184.915 70.7935 cv
185.177 69.4351 185.414 66.7671 185.79 65.4136 cv
186.078 64.3618 186.559 64.0254 187.362 64.0244 cv
187.845 64.0244 188.069 64.3193 187.975 64.6699 cv
187.875 65.0254 187.652 65.5498 187.352 66.6436 cv
187.147 67.4014 187.02 68.5415 186.804 69.4478 cv
187.127 68.8184 188.488 67.7681 189.852 67.7681 cv
190.796 67.7646 191.198 68.7827 190.529 71.2031 cv
190.405 71.6641 189.855 73.0957 189.662 73.7451 cv
189.542 74.1782 189.18 74.6411 188.455 74.6245 cv
187.98 74.6118 187.788 74.3003 187.89 73.9341 cv
188.046 73.3613 188.513 72.2856 188.853 71.0645 cv
cp
f
199.119 73.0918 mo
199.654 72.7383 200.465 72.5962 200.735 72.5215 cv
202.638 71.9658 204.422 70.6538 204.616 69.9604 cv
204.821 69.2036 204.219 69.2036 203.657 69.2065 cv
203.1 69.2065 201.668 69.3467 199.496 70.0435 cv
199.394 70.9653 199.137 72.8594 199.119 73.0918 cv
cp
199.564 68.8857 mo
200.231 68.6514 203.074 67.2778 203.333 66.3394 cv
203.404 66.0747 203.109 65.9697 202.599 65.9697 cv
202.118 65.9697 200.431 66.4185 199.93 66.7119 cv
199.78 67.3125 199.626 68.269 199.564 68.8857 cv
cp
197.917 66.7119 mo
197.959 66.4526 198.256 66.1431 198.583 66.0322 cv
200.367 65.4009 202.303 64.9536 203.684 64.9536 cv
204.442 64.9536 205.597 65.041 205.371 65.8618 cv
205.149 66.6602 203.746 67.8325 202.317 68.4502 cv
202.871 68.313 203.603 68.1738 204.607 68.1729 cv
206.159 68.1729 206.748 68.7417 206.516 69.5737 cv
205.77 72.2881 199.047 74.3691 198.767 74.4761 cv
198.509 74.5879 198.45 74.8188 198.103 74.8188 cv
197.809 74.8188 197.185 74.666 197.315 74.1885 cv
197.488 73.5708 197.691 71.5205 197.862 70.4595 cv
197.645 70.4595 197.346 70.2593 197.418 69.9966 cv
197.495 69.7188 197.943 69.3643 197.943 69.3643 cv
198.08 68.8882 198.072 67.7314 198.17 67.1304 cv
198.175 67.0674 197.858 66.9761 197.917 66.7119 cv
cp
f
209.006 70.2646 mo
209.331 70.1099 210.122 69.8203 210.395 69.6646 cv
210.463 69.4155 210.314 68.8931 209.8 68.8931 cv
209.598 68.8931 209.114 69.8794 209.006 70.2646 cv
cp
210.116 73.438 mo
209.744 73.6694 208.212 74.7188 207.832 74.7188 cv
206.806 74.7188 206.714 73.1948 206.992 72.1934 cv
207.062 71.9297 li
206.975 71.958 206.878 71.9775 206.737 71.9775 cv
206.6 71.9775 206.52 71.7153 206.565 71.5444 cv
206.682 71.1157 206.834 71.0039 207.342 70.8062 cv
207.901 68.771 209.117 67.5684 209.5 67.5684 cv
211.174 67.5664 212.06 68.6724 211.904 69.2422 cv
211.794 69.6455 211.72 69.9688 211.05 70.3428 cv
210.517 70.6318 209 71.3086 208.696 71.5112 cv
208.595 71.8848 li
208.378 72.6538 208.527 73.1929 208.743 73.1919 cv
208.958 73.1919 209.331 72.9771 209.844 72.5771 cv
210.147 72.3262 210.638 71.8818 211.113 71.5547 cv
211.417 71.3555 211.601 71.2476 211.803 71.2476 cv
212.176 71.2476 212.296 71.4175 212.217 71.7085 cv
212.067 72.2471 210.81 73.0059 210.116 73.438 cv
cp
f
213.237 69.4746 mo
212.957 69.4746 212.83 69.2139 212.878 69.0293 cv
212.957 68.7363 213.188 68.4126 213.543 68.4126 cv
213.747 68.4126 213.968 68.3369 214.138 68.3369 cv
214.382 67.4565 214.34 66.7617 214.522 66.1455 cv
214.62 65.8037 214.977 65.4507 215.49 65.4507 cv
216.061 65.4507 216.264 65.7886 216.183 66.084 cv
216.104 66.374 215.929 67.4536 215.742 68.1333 cv
215.953 68.1021 216.093 67.9941 216.342 67.9941 cv
216.664 67.9941 216.844 68.2559 216.761 68.5952 cv
216.707 68.8716 216.46 69.0728 216.293 69.1206 cv
216.042 69.1963 215.74 69.2271 215.575 69.2588 cv
215.5 69.5366 215.131 71.2134 215.044 71.6919 cv
214.954 72.1851 214.528 74.0176 214.445 74.313 cv
214.372 74.5913 213.955 74.9741 213.551 74.9795 cv
213.054 74.9795 212.71 74.7598 212.759 74.4375 cv
212.812 74.1138 213.188 72.5254 213.351 71.9233 cv
213.517 71.3223 213.857 69.7534 213.947 69.4312 cv
213.725 69.4443 213.47 69.4746 213.237 69.4746 cv
cp
f
217.467 69.4712 mo
217.186 69.4712 217.058 69.209 217.112 69.0254 cv
217.191 68.7324 217.419 68.4077 217.774 68.4077 cv
217.978 68.4077 218.201 68.3325 218.367 68.3306 cv
218.611 67.4526 218.569 66.7588 218.75 66.1431 cv
218.846 65.8027 219.205 65.4468 219.722 65.4468 cv
220.292 65.4468 220.494 65.7886 220.414 66.0801 cv
220.331 66.374 220.161 67.4526 219.971 68.1279 cv
220.185 68.1001 220.319 67.9893 220.573 67.9893 cv
220.898 67.9893 221.072 68.2539 220.991 68.5913 cv
220.932 68.8701 220.689 69.0679 220.522 69.1152 cv
220.27 69.1934 219.969 69.2231 219.803 69.2544 cv
219.731 69.5313 219.356 71.2109 219.273 71.6885 cv
219.183 72.1841 218.758 74.0151 218.676 74.3091 cv
218.598 74.5889 218.183 74.9731 217.782 74.9731 cv
217.284 74.9731 216.944 74.7559 216.987 74.4365 cv
217.043 74.1128 217.419 72.5229 217.584 71.9209 cv
217.748 71.3184 218.087 69.7495 218.18 69.4248 cv
217.953 69.4404 217.696 69.4712 217.467 69.4712 cv
cp
f
223.247 70.2554 mo
223.573 70.0986 224.36 69.8076 224.638 69.6543 cv
224.705 69.4058 224.553 68.8818 224.043 68.8818 cv
223.839 68.8818 223.355 69.8691 223.247 70.2554 cv
cp
224.357 73.4297 mo
223.983 73.6621 222.457 74.707 222.071 74.707 cv
221.047 74.7085 220.957 73.1816 221.231 72.1787 cv
221.302 71.918 li
221.217 71.9526 221.12 71.9658 220.979 71.9658 cv
220.837 71.9658 220.756 71.7065 220.802 71.5342 cv
220.923 71.103 221.075 70.9941 221.582 70.7959 cv
222.141 68.7593 223.355 67.5581 223.743 67.5562 cv
225.413 67.5562 226.301 68.6621 226.145 69.2324 cv
226.037 69.6353 225.964 69.9575 225.285 70.3286 cv
224.758 70.6201 223.24 71.3018 222.934 71.502 cv
222.833 71.8706 li
222.62 72.6426 222.767 73.1816 222.985 73.1816 cv
223.202 73.1816 223.573 72.9658 224.083 72.564 cv
224.382 72.3159 224.879 71.8706 225.356 71.5444 cv
225.659 71.3472 225.842 71.2349 226.044 71.2349 cv
226.411 71.2349 226.538 71.4072 226.458 71.6987 cv
226.312 72.2354 225.049 72.9966 224.357 73.4297 cv
cp
f
231.93 70.2788 mo
231.65 70.2788 231.216 70.2158 231.258 69.9072 cv
231.324 69.4453 231.272 69.2285 230.964 69.2285 cv
230.713 69.2295 230.322 69.4932 229.326 70.4521 cv
229.247 70.8643 229.114 71.7295 229.002 72.7134 cv
228.915 73.4692 228.986 74.0098 228.889 74.3516 cv
228.797 74.688 228.142 74.8716 227.926 74.8716 cv
227.51 74.874 227.183 74.689 227.155 74.4722 cv
227.135 73.9819 227.378 72.3613 227.483 71.8652 cv
227.573 71.3608 227.728 69.7251 227.883 69.1577 cv
228.079 68.4614 228.369 68.0762 229.064 68.0894 cv
229.589 68.0894 229.757 68.3833 229.705 68.5859 cv
229.626 68.8652 229.532 69.1411 229.469 69.3706 cv
230.477 68.3047 231.229 67.938 232.015 67.938 cv
232.789 67.9351 233.048 68.4126 232.733 69.5522 cv
232.642 69.8906 232.211 70.2788 231.93 70.2788 cv
cp
f
241.209 64.8164 mo
241.845 64.8154 242.03 65.2773 241.934 65.6162 cv
241.834 65.9697 241.207 67.5435 240.905 68.6377 cv
240.086 71.6128 240.179 73.7534 240.104 74.0151 cv
239.98 74.4761 239.242 74.6802 239.038 74.6802 cv
238.466 74.6826 238.186 74.2935 238.251 73.9536 cv
238.337 73.4629 238.503 72.1235 238.765 70.7681 cv
239.033 69.4092 239.679 66.7886 239.907 65.9429 cv
240.145 65.0771 240.809 64.8164 241.209 64.8164 cv
cp
f
247.636 67.7554 mo
248.688 67.7515 248.781 68.834 248.668 69.6343 cv
248.585 70.1567 248.336 71.2505 248.167 71.8965 cv
248.002 72.5464 247.883 73.332 247.764 73.7617 cv
247.65 74.1958 247.075 74.5811 246.564 74.5811 cv
246.1 74.5811 245.73 74.3525 245.845 73.9341 cv
245.954 73.5337 246.316 72.4395 246.487 71.8247 cv
246.642 71.2505 247.381 68.8945 246.719 68.8955 cv
246.3 68.8955 244.809 69.6367 244.264 71.6255 cv
244.105 72.1943 244.015 73.6621 243.831 74.3193 cv
243.743 74.6606 243.305 74.832 242.994 74.832 cv
242.525 74.832 242.287 74.5996 242.233 74.3857 cv
242.168 73.7827 242.417 72.8276 242.557 71.8735 cv
242.668 71.1187 242.874 69.6377 243.004 69.1592 cv
243.156 68.6055 243.493 68.1738 244.236 68.1738 cv
244.746 68.1738 244.983 68.3896 244.846 69.1733 cv
245.793 68.2192 246.8 67.7568 247.636 67.7554 cv
cp
f
249.967 69.4321 mo
249.727 69.3398 249.702 69.1411 249.736 69.0322 cv
249.806 68.771 250.003 68.4478 250.22 68.4478 cv
250.467 68.4478 250.65 68.4014 250.826 68.3833 cv
250.854 68.1216 250.913 67.8428 250.999 67.5361 cv
251.73 64.854 253.767 64.0654 254.605 64.063 cv
255.206 64.063 256.036 64.249 255.867 64.8652 cv
255.735 65.3408 255.572 65.5908 255.206 65.5933 cv
254.924 65.5933 254.658 65.5444 254.722 65.3149 cv
254.761 65.1758 254.445 65.1436 254.289 65.1436 cv
253.495 65.1436 252.895 66.3765 252.73 66.979 cv
252.614 67.395 252.568 67.7969 252.486 68.1973 cv
252.905 68.1973 253.632 67.8125 254.079 67.8096 cv
254.282 67.8096 254.348 68.0254 254.289 68.2432 cv
254.203 68.5503 254.042 68.749 253.827 68.8433 cv
253.624 68.9033 252.771 69.1372 252.37 69.1372 cv
252.37 69.1372 252.13 71.1416 252.033 71.772 cv
251.94 72.3262 251.784 74.1294 251.692 74.4678 cv
251.597 74.8237 251.071 75.1602 250.775 75.1602 cv
250.355 75.1602 249.855 74.9482 249.905 74.6567 cv
249.937 74.4854 250.021 73.6069 250.162 72.7744 cv
250.278 72.0044 250.574 70.479 250.674 69.4453 cv
250.486 69.4463 250.193 69.4463 249.967 69.4321 cv
cp
f
258.692 70.2593 mo
258.412 70.2593 257.982 70.1992 258.019 69.8896 cv
258.084 69.4248 258.037 69.209 257.72 69.209 cv
257.475 69.209 257.079 69.4746 256.086 70.4302 cv
256.005 70.8423 255.875 71.7075 255.762 72.6938 cv
255.673 73.4502 255.744 73.9883 255.65 74.3286 cv
255.559 74.6699 254.905 74.8535 254.689 74.8535 cv
254.266 74.8535 253.946 74.6699 253.913 74.4512 cv
253.894 73.96 254.138 72.3408 254.245 71.8486 cv
254.335 71.3403 254.492 69.7046 254.648 69.1357 cv
254.835 68.4424 255.13 68.0571 255.822 68.0698 cv
256.348 68.0679 256.52 68.3638 256.462 68.563 cv
256.385 68.8433 256.291 69.1206 256.229 69.3511 cv
257.237 68.2856 257.989 67.9131 258.78 67.9131 cv
259.551 67.9131 259.806 68.3911 259.495 69.5313 cv
259.4 69.873 258.969 70.2593 258.692 70.2593 cv
cp
f
261.068 72.3213 mo
260.701 72.6924 260.594 72.9058 260.524 73.168 cv
260.462 73.3965 260.583 73.522 260.814 73.522 cv
261.51 73.522 262.112 72.9058 262.294 72.812 cv
262.55 72.6899 262.792 72.5796 262.751 72.6118 cv
262.889 72.1196 263.073 71.4561 263.184 70.8706 cv
262.672 71.1489 261.647 71.7334 261.068 72.3213 cv
cp
260.882 71.3032 mo
261.725 70.7163 262.679 70.1309 262.918 69.9771 cv
263.073 69.8857 263.226 69.8252 263.336 69.8086 cv
263.399 69.313 263.313 68.7759 262.835 68.7759 cv
262.401 68.7759 261.688 69.1152 261.372 69.3618 cv
261.309 69.4092 261.044 69.6558 260.889 69.6558 cv
260.627 69.6572 260.261 69.3936 260.366 69.0049 cv
260.426 68.7905 260.579 68.6387 260.746 68.5288 cv
261.281 68.207 262.936 67.604 263.497 67.604 cv
263.972 67.604 264.861 67.7119 264.861 69.9136 cv
264.854 70.8208 264.516 72.2251 264.434 72.519 cv
264.353 72.8247 264.05 73.7368 263.669 74.3535 cv
263.551 74.5527 263.047 74.6455 262.872 74.6455 cv
262.612 74.6455 262.125 74.5527 262.261 74.061 cv
262.437 73.585 li
261.605 74.3076 260.419 74.6621 259.679 74.6621 cv
258.936 74.666 258.56 74.4043 258.701 73.8325 cv
258.96 72.8325 259.868 71.9961 260.882 71.3032 cv
cp
f
267.616 74.7646 mo
266.498 74.7646 265.567 74.4272 265.802 73.5635 cv
266.079 72.5796 266.712 72.084 267.207 72.084 cv
267.686 72.084 267.872 72.4395 267.808 72.6538 cv
267.73 72.9492 267.585 73.1172 267.506 73.147 cv
267.414 73.1948 267.26 73.3008 267.207 73.4858 cv
267.141 73.7173 267.66 73.7617 267.826 73.7617 cv
268.804 73.7617 269.364 73.1304 269.467 72.7622 cv
269.775 71.6182 268.696 71.4507 267.92 71.4507 cv
266.996 71.4507 266.592 71.4995 266.406 71.4995 cv
266.079 71.4995 265.742 71.1489 265.907 70.5459 cv
266.145 69.6802 268.428 67.5835 269.641 67.5684 cv
270.712 67.5684 270.641 68.8301 270.565 69.1089 cv
270.512 69.2939 270.18 69.7251 269.713 69.7251 cv
269.261 69.7251 269.125 69.6021 269.119 69.4038 cv
269.113 69.3105 269.048 69.0498 268.88 69.0498 cv
268.721 69.0498 268.571 69.0913 268.502 69.1255 cv
268.204 69.2461 267.731 69.6646 267.636 70.0176 cv
267.592 70.1743 267.672 70.2222 268.103 70.2222 cv
268.244 70.2222 268.669 70.2056 269.071 70.2056 cv
269.364 70.2056 271.552 70.5864 271.063 72.3584 cv
270.667 73.7915 268.696 74.7646 267.616 74.7646 cv
cp
f
272.414 69.4321 mo
272.131 69.4321 272.004 69.168 272.053 68.9834 cv
272.136 68.689 272.363 68.3682 272.722 68.3667 cv
272.92 68.3667 273.145 68.29 273.315 68.29 cv
273.555 67.4141 273.512 66.7183 273.701 66.103 cv
273.792 65.7603 274.157 65.4082 274.667 65.4082 cv
275.237 65.4082 275.439 65.7446 275.36 66.0386 cv
275.28 66.333 275.109 67.4087 274.92 68.0894 cv
275.125 68.0571 275.266 67.9507 275.516 67.9507 cv
275.84 67.9507 276.015 68.21 275.938 68.5464 cv
275.877 68.8291 275.633 69.0293 275.465 69.0757 cv
275.214 69.1484 274.915 69.1821 274.75 69.2139 cv
274.669 69.4912 274.302 71.1694 274.217 71.6499 cv
274.126 72.1392 273.701 73.9756 273.617 74.2705 cv
273.544 74.5454 273.128 74.9316 272.724 74.9331 cv
272.231 74.9331 271.887 74.7158 271.931 74.3926 cv
271.988 74.0679 272.363 72.481 272.525 71.8818 cv
272.692 71.2788 273.033 69.7061 273.125 69.3853 cv
272.901 69.3975 272.644 69.4321 272.414 69.4321 cv
cp
f
280.787 70.2397 mo
280.506 70.2397 280.075 70.1797 280.115 69.873 cv
280.18 69.4092 280.133 69.1934 279.822 69.1934 cv
279.576 69.1934 279.174 69.457 278.183 70.4131 cv
278.099 70.8291 277.975 71.6919 277.852 72.6772 cv
277.774 73.4316 277.839 73.9736 277.743 74.3101 cv
277.651 74.6479 277 74.8364 276.779 74.8364 cv
276.362 74.8364 276.042 74.6533 276.007 74.4365 cv
275.989 73.9414 276.232 72.3242 276.333 71.835 cv
276.432 71.3198 276.587 69.6895 276.745 69.1206 cv
276.934 68.4258 277.224 68.042 277.921 68.0547 cv
278.445 68.0547 278.611 68.3491 278.557 68.5435 cv
278.479 68.8237 278.386 69.1025 278.325 69.3345 cv
279.333 68.269 280.085 67.9009 280.874 67.9009 cv
281.646 67.8955 281.907 68.376 281.592 69.5171 cv
281.5 69.8545 281.066 70.2397 280.787 70.2397 cv
cp
f
284.761 68.5757 mo
284.65 68.9741 284.275 70.0527 284.088 70.7329 cv
283.893 71.4395 283.349 73.354 284.096 73.354 cv
285.075 73.3496 286.102 72.1494 286.423 70.9771 cv
286.542 70.5459 286.583 70.2222 286.613 69.9458 cv
286.693 69.2036 286.586 68.8047 286.681 68.4614 cv
286.772 68.125 287.304 67.7231 287.89 67.7231 cv
288.311 67.7231 288.477 67.8926 288.514 68.1123 cv
288.531 68.6016 288.18 70.2222 288.074 70.7129 cv
287.986 71.2207 287.796 72.2866 287.738 72.7773 cv
287.724 72.9492 287.612 73.6401 287.576 73.7646 cv
287.456 74.1958 286.873 74.4731 286.686 74.4731 cv
286.47 74.4731 285.907 74.4272 285.857 74.1035 cv
285.83 73.9185 285.914 73.5039 285.981 73.0869 cv
284.796 74.2437 283.462 74.8145 282.672 74.8174 cv
282.102 74.8174 281.479 74.2012 282.097 71.7334 cv
282.26 71.0874 282.708 69.1782 282.827 68.7466 cv
282.945 68.313 283.337 67.834 284.079 67.834 cv
284.75 67.834 284.872 68.1592 284.761 68.5757 cv
cp
f
290.662 72.4063 mo
290.504 72.9771 290.532 73.332 291.057 73.3281 cv
291.601 73.3281 292.199 72.9761 292.494 72.835 cv
292.781 72.6948 293.374 72.0659 293.808 72.0659 cv
294.24 72.0659 294.451 72.3252 294.382 72.5732 cv
294.127 73.499 291.522 74.4678 290.372 74.4707 cv
288.796 74.4722 288.698 73.4692 288.926 72.6538 cv
289.761 69.6021 293.03 67.7803 293.605 67.7803 cv
294.01 67.7803 294.279 67.9351 294.145 68.4126 cv
294.048 68.7661 293.83 69.168 293.39 69.2422 cv
292.106 69.48 290.963 71.3086 290.662 72.4063 cv
cp
f
295.58 69.4155 mo
295.296 69.4155 295.171 69.1484 295.216 68.9678 cv
295.296 68.6724 295.53 68.3501 295.886 68.3501 cv
296.087 68.3501 296.308 68.2729 296.482 68.2715 cv
296.723 67.3921 296.679 66.6978 296.861 66.084 cv
296.958 65.7437 297.317 65.3892 297.829 65.3892 cv
298.402 65.3892 298.6 65.7271 298.521 66.0195 cv
298.443 66.3135 298.27 67.3911 298.082 68.0679 cv
298.292 68.042 298.433 67.9351 298.677 67.9351 cv
299.002 67.9351 299.179 68.1924 299.098 68.5308 cv
299.045 68.8081 298.801 69.0088 298.632 69.0601 cv
298.377 69.1333 298.078 69.1665 297.914 69.1948 cv
297.833 69.4712 297.464 71.1519 297.38 71.6284 cv
297.293 72.1235 296.868 73.959 296.786 74.2485 cv
296.709 74.5273 296.292 74.9121 295.892 74.9141 cv
295.395 74.9141 295.053 74.6953 295.094 74.3774 cv
295.153 74.0522 295.53 72.4639 295.691 71.8618 cv
295.858 71.2598 296.198 69.6904 296.286 69.3687 cv
296.063 69.3809 295.809 69.4121 295.58 69.4155 cv
cp
f
302.006 68.563 mo
301.895 68.9614 301.524 70.0435 301.333 70.7163 cv
301.143 71.4277 300.6 73.3359 301.34 73.3359 cv
302.315 73.3359 303.344 72.1328 303.671 70.9653 cv
303.789 70.5303 303.831 70.2119 303.857 69.9307 cv
303.945 69.1909 303.832 68.7905 303.927 68.4502 cv
304.019 68.1123 304.55 67.7119 305.135 67.7119 cv
305.556 67.7119 305.727 67.8799 305.759 68.0947 cv
305.781 68.5889 305.427 70.2065 305.326 70.7007 cv
305.226 71.208 305.041 72.2754 304.988 72.7642 cv
304.97 72.9312 304.858 73.627 304.825 73.7515 cv
304.704 74.1846 304.123 74.4595 303.932 74.4595 cv
303.714 74.4604 303.154 74.4146 303.102 74.0908 cv
303.076 73.9058 303.158 73.4897 303.227 73.0723 cv
302.045 74.2319 300.709 74.8022 299.918 74.8022 cv
299.343 74.8071 298.723 74.1885 299.342 71.7207 cv
299.5 71.0742 299.954 69.1611 300.07 68.7324 cv
300.188 68.2983 300.585 67.8208 301.328 67.8208 cv
301.995 67.8208 302.123 68.1445 302.006 68.563 cv
cp
f
311.294 70.2183 mo
311.014 70.2222 310.584 70.1553 310.625 69.8481 cv
310.689 69.3853 310.639 69.1704 310.33 69.1704 cv
310.082 69.1704 309.684 69.4321 308.691 70.3892 cv
308.609 70.8062 308.484 71.668 308.361 72.6538 cv
308.283 73.4077 308.348 73.9497 308.252 74.2881 cv
308.161 74.6274 307.507 74.8145 307.29 74.8145 cv
306.872 74.8145 306.551 74.6274 306.518 74.4116 cv
306.5 73.9185 306.744 72.3008 306.848 71.8081 cv
306.937 71.2993 307.094 69.6675 307.251 69.0977 cv
307.444 68.4043 307.738 68.0122 308.427 68.0317 cv
308.956 68.0317 309.12 68.3242 309.067 68.5234 cv
308.991 68.8047 308.899 69.0781 308.836 69.3105 cv
309.839 68.2476 310.595 67.876 311.382 67.876 cv
312.158 67.8735 312.409 68.3535 312.102 69.4932 cv
312.007 69.833 311.573 70.2183 311.294 70.2183 cv
cp
f
314.62 70.1875 mo
314.939 70.0298 315.733 69.7383 316.01 69.5854 cv
316.076 69.3345 315.925 68.812 315.415 68.8135 cv
315.214 68.8135 314.723 69.7993 314.62 70.1875 cv
cp
315.731 73.3589 mo
315.356 73.5903 313.829 74.6377 313.442 74.6377 cv
312.421 74.6377 312.326 73.1152 312.6 72.1133 cv
312.672 71.8506 li
312.59 71.8818 312.495 71.8965 312.35 71.8965 cv
312.211 71.8965 312.127 71.6357 312.178 71.4634 cv
312.292 71.0337 312.45 70.9258 312.952 70.7256 cv
313.512 68.689 314.723 67.4873 315.117 67.4873 cv
316.788 67.4873 317.676 68.5952 317.516 69.1665 cv
317.409 69.5659 317.334 69.8906 316.66 70.2603 cv
316.134 70.5508 314.608 71.2329 314.306 71.4341 cv
314.207 71.8037 li
313.991 72.5732 314.142 73.1123 314.357 73.1123 cv
314.574 73.1123 314.944 72.895 315.454 72.4946 cv
315.756 72.2461 316.251 71.8018 316.73 71.4766 cv
317.029 71.2778 317.213 71.1675 317.417 71.1675 cv
317.79 71.1675 317.915 71.3379 317.833 71.6284 cv
317.686 72.1694 316.422 72.9263 315.731 73.3589 cv
cp
f
84.5459 50.1992 mo
85.1812 50.1982 85.3643 50.6616 85.2729 50.9985 cv
85.1748 51.3535 84.54 52.9268 84.2407 54.0205 cv
83.4219 56.9946 83.5151 59.1401 83.4414 59.4009 cv
83.3169 59.8638 82.5757 60.063 82.373 60.063 cv
81.8037 60.063 81.5215 59.6782 81.583 59.3374 cv
81.6714 58.8447 81.8423 57.5054 82.1069 56.1494 cv
82.3696 54.791 83.0117 52.1704 83.2471 51.3242 cv
83.4839 50.46 84.1426 50.1992 84.5459 50.1992 cv
cp
0 1 1 0.2 cmyk
f
94.1909 52.9819 mo
94.9658 52.9819 95.1328 54.0601 94.9751 54.8604 cv
94.8706 55.415 94.6396 56.4785 94.4756 57.1255 cv
94.3159 57.7725 94.2041 58.5581 94.0884 58.9907 cv
93.9678 59.4214 93.5972 59.8701 92.8691 59.8701 cv
92.1416 59.8701 92.1299 59.4702 92.2446 59.0522 cv
92.4976 58.127 93.0278 56.4165 93.2295 55.6963 cv
93.4019 55.063 93.6162 54.168 93.124 54.168 cv
92.6255 54.168 92.2744 54.3853 91.5552 54.9556 cv
91.5269 55.0161 91.21 56.6821 91.0557 57.2793 cv
90.895 57.9292 90.7222 58.7324 90.603 59.1631 cv
90.4834 59.5918 90.1782 60.0259 89.46 60.0415 cv
88.8101 60.0454 88.6689 59.8257 88.7842 59.4111 cv
88.8457 59.1821 89.731 56.2974 89.8716 55.6372 cv
90.0015 55.0337 89.9951 54.3267 89.5933 54.3267 cv
89.1743 54.3267 87.9487 55.2993 87.665 56.3306 cv
87.2822 57.7158 87.4395 58.8872 87.2266 59.6572 cv
87.1343 59.9951 86.46 60.1982 86.2461 60.1982 cv
85.8394 60.1982 85.5264 60.0454 85.4927 59.8286 cv
85.4751 59.3325 85.7388 57.7495 85.8428 57.2539 cv
86.1479 55.6987 86.1196 54.7896 86.2749 54.2188 cv
86.4058 53.7559 87.0962 53.4341 87.3281 53.4341 cv
87.8848 53.4341 88.2124 53.5391 88.0288 54.605 cv
88.6304 53.877 89.6567 53.1401 90.4482 53.1401 cv
91.0039 53.1362 91.4937 53.4453 91.5298 54.0474 cv
92.1826 53.4131 93.4019 52.9819 94.1909 52.9819 cv
cp
f
97.7881 56.9688 mo
97.5845 57.707 97.4219 58.8643 97.3364 59.1733 cv
97.665 59.1733 99.6284 57.769 99.936 56.6465 cv
100.258 55.4893 99.6543 54.1338 99.2188 54.1338 cv
98.769 54.1338 98.376 54.7202 98.2964 55.0132 cv
98.1104 55.6899 97.9941 56.2163 97.7881 56.9688 cv
cp
96.2246 55.1675 mo
96.2671 55.0142 96.5879 54.7334 96.7354 54.5508 cv
96.9282 53.6738 li
97.0415 53.1484 97.5313 52.7935 98.1475 52.7935 cv
98.5034 52.7935 98.8423 53.0239 98.769 53.2861 cv
98.9707 53.0693 99.2319 52.9614 99.48 52.9614 cv
100.412 52.9575 102.252 54.8257 101.774 56.563 cv
101.294 58.3076 97.2061 60.3276 97.1304 60.3755 cv
97.0068 60.9297 96.606 62.856 96.481 63.3052 cv
96.3647 63.7368 95.9043 64.0435 95.4878 64.0435 cv
94.9751 64.0435 94.7173 63.7524 94.9277 62.9814 cv
95.0625 62.4873 95.3682 61.6079 95.5664 60.8853 cv
95.9268 59.5752 96.2466 56.8315 96.5527 55.7222 cv
96.271 55.7222 96.1528 55.4292 96.2246 55.1675 cv
cp
f
107.372 55.6387 mo
107.093 55.6387 106.661 55.5786 106.696 55.2686 cv
106.765 54.8042 106.716 54.5908 106.406 54.5908 cv
106.157 54.5908 105.762 54.854 104.769 55.8091 cv
104.688 56.2256 104.559 57.0869 104.441 58.0742 cv
104.358 58.8281 104.425 59.3657 104.332 59.7075 cv
104.239 60.0479 103.584 60.2314 103.365 60.2324 cv
102.953 60.2314 102.629 60.0479 102.593 59.8296 cv
102.574 59.3374 102.819 57.7183 102.923 57.2241 cv
103.019 56.7183 103.171 55.0835 103.329 54.5166 cv
103.52 53.8213 103.812 53.438 104.506 53.4517 cv
105.03 53.4517 105.199 53.7446 105.144 53.9448 cv
105.064 54.2207 104.976 54.5 104.913 54.7295 cv
105.917 53.6665 106.669 53.2969 107.46 53.2969 cv
108.232 53.2939 108.492 53.7705 108.177 54.9102 cv
108.085 55.252 107.649 55.6387 107.372 55.6387 cv
cp
f
112.493 56.7412 mo
112.836 55.4946 112.623 54.2944 112.189 54.2944 cv
111.74 54.2944 110.583 55.6821 110.171 57.1743 cv
109.829 58.4233 110.081 58.9771 110.561 58.9771 cv
111.117 58.9771 112.143 58.0059 112.493 56.7412 cv
cp
111.204 53.4287 mo
111.413 53.2925 111.453 53.0293 111.854 53.0293 cv
112.24 53.0293 112.309 53.1826 112.666 53.1826 cv
113.407 53.1826 114.914 54.0747 114.272 56.4165 cv
113.63 58.7407 111.342 60.1328 110.041 60.1338 cv
108.721 60.1362 107.817 59.3198 108.381 57.2676 cv
108.764 55.8799 109.991 54.1865 111.204 53.4287 cv
cp
f
120.647 55.3647 mo
119.702 56.5527 117.983 59.1426 117.74 59.5742 cv
117.586 59.8501 117.271 60.1479 116.93 60.1479 cv
116.605 60.1479 116.339 59.7603 116.296 59.2979 cv
116.249 58.6816 115.429 55.0752 115.708 54.0601 cv
115.807 53.7036 116.148 53.3042 116.83 53.3013 cv
117.234 53.3013 117.665 53.4287 117.463 54.8296 cv
117.385 55.397 117.519 57.2153 117.683 57.8008 cv
118.211 56.957 119.753 54.502 119.954 54.1025 cv
120.123 53.7778 120.419 53.2695 120.883 53.2695 cv
121.447 53.2524 121.64 53.5586 121.533 53.9922 cv
121.457 54.2695 121.102 54.7783 120.647 55.3647 cv
cp
f
121.813 60.2021 mo
121.315 60.2021 121.009 59.9551 121.163 59.4175 cv
121.305 58.8765 121.902 56.0444 122.353 54.4058 cv
122.491 53.8989 123.042 53.5288 123.631 53.5288 cv
124.126 53.5288 124.275 53.7896 124.174 54.1465 cv
124.078 54.4814 123.71 55.4409 123.499 56.1943 cv
123.298 56.9355 123.029 58.8164 122.909 59.2598 cv
122.734 59.8896 122.185 60.2021 121.813 60.2021 cv
cp
123.596 52.5273 mo
123.056 52.5273 122.811 52.3408 122.926 51.9253 cv
123.024 51.5693 123.576 51.1855 124.013 51.1831 cv
124.635 51.1855 124.928 51.3984 124.819 51.8008 cv
124.681 52.2964 124.326 52.5273 123.596 52.5273 cv
cp
f
130.237 53.1079 mo
131.289 53.105 131.379 54.1865 131.27 54.9878 cv
131.188 55.5103 130.933 56.6055 130.773 57.251 cv
130.608 57.8984 130.485 58.6865 130.366 59.1157 cv
130.246 59.5454 129.677 59.9336 129.166 59.9336 cv
128.701 59.9346 128.329 59.7036 128.444 59.2847 cv
128.554 58.8872 128.917 57.793 129.088 57.1753 cv
129.248 56.6055 129.984 54.2466 129.318 54.2466 cv
128.9 54.2466 127.411 54.9888 126.865 56.9736 cv
126.709 57.5488 126.616 59.0127 126.434 59.6729 cv
126.342 60.0132 125.906 60.1836 125.596 60.1836 cv
125.131 60.1836 124.884 59.9512 124.837 59.7373 cv
124.768 59.1348 125.017 58.1812 125.156 57.2241 cv
125.27 56.4717 125.476 54.9922 125.604 54.5146 cv
125.759 53.958 126.094 53.5264 126.841 53.5264 cv
127.348 53.5264 127.583 53.7422 127.444 54.5269 cv
128.389 53.5688 129.398 53.1079 130.237 53.1079 cv
cp
f
133.202 64.6973 mo
132.273 64.6973 130.872 64.3721 131.217 63.1226 cv
131.332 62.707 131.681 62.3843 132.227 62.3843 cv
132.659 62.3843 132.833 62.707 132.849 62.9365 cv
132.854 63.3105 132.988 63.7236 133.422 63.7236 cv
134.257 63.7202 135.231 62.103 135.535 61.0107 cv
135.687 60.438 135.807 59.6655 135.868 58.7729 cv
135.558 59.2827 134.581 59.9614 133.635 59.9634 cv
132.614 59.9634 131.575 59.3945 132.055 57.6494 cv
133.021 54.1377 135.704 52.8403 136.911 52.8403 cv
137.223 52.8403 137.853 52.9502 137.827 53.2261 cv
137.731 53.687 137.212 54.335 136.886 54.335 cv
136.73 54.335 136.661 54.3047 136.682 54.2427 cv
136.682 54.2427 136.679 54.1348 136.674 54.1543 cv
136.691 54.0889 136.494 54.0103 136.385 54.0103 cv
135.564 54.0142 134.371 55.4946 133.792 57.5874 cv
133.529 58.5581 133.818 58.8525 134.42 58.8511 cv
134.838 58.8511 135.165 58.6201 135.372 58.373 cv
135.536 58.1704 135.644 57.9395 135.761 57.7598 cv
136.021 57.3101 136.089 57.1255 136.294 56.3716 cv
136.379 56.061 136.388 55.5244 136.52 55.0605 cv
136.625 54.6587 137.09 54.2124 137.682 54.2104 cv
138.052 54.2104 138.323 54.52 138.281 54.7808 cv
138.224 55.0439 138.088 55.999 137.818 56.9697 cv
137.556 57.9229 137.712 59.0479 137.161 61.0532 cv
136.61 63.0591 134.797 64.6973 133.202 64.6973 cv
cp
f
145.225 59.6147 mo
143.708 59.6167 143.342 59.2598 143.608 58.2871 cv
144.915 53.542 149.265 50.3936 151.202 50.3936 cv
151.854 50.3936 151.968 50.5938 151.876 50.9185 cv
151.708 51.5352 150.658 51.9692 150.139 52.1665 cv
146.474 53.6035 145.518 56.98 145.312 57.7173 cv
145.117 58.4429 145.481 58.4595 146.211 58.457 cv
146.97 58.457 149.532 57.6382 150.46 57.314 cv
150.818 57.1885 151.266 56.8672 151.62 56.8672 cv
152.025 56.8516 152.233 57.1138 152.128 57.4951 cv
151.979 58.0371 151.571 58.2837 151.222 58.4863 cv
150.417 58.8691 146.745 59.6128 145.225 59.6147 cv
cp
f
156.853 56.707 mo
157.196 55.4624 156.985 54.2583 156.551 54.2583 cv
156.1 54.2583 154.949 55.645 154.536 57.1431 cv
154.193 58.3901 154.44 58.9448 154.924 58.9448 cv
155.477 58.9448 156.505 57.9702 156.853 56.707 cv
cp
155.564 53.3979 mo
155.773 53.2568 155.815 52.9971 156.215 52.9946 cv
156.605 52.9946 156.671 53.1484 157.028 53.1484 cv
157.771 53.1484 159.274 54.0391 158.633 56.3862 cv
157.99 58.7114 155.704 60.1016 154.405 60.1016 cv
153.084 60.103 152.18 59.2837 152.741 57.2383 cv
153.125 55.8477 154.351 54.1543 155.564 53.3979 cv
cp
f
168.291 52.9243 mo
169.064 52.9243 169.232 54.0029 169.071 54.8022 cv
168.965 55.3584 168.737 56.4229 168.575 57.0728 cv
168.412 57.7148 168.303 58.502 168.186 58.9346 cv
168.067 59.3647 167.693 59.813 166.965 59.814 cv
166.237 59.814 166.226 59.4121 166.34 58.999 cv
166.592 58.0718 167.128 56.3613 167.325 55.6387 cv
167.499 55.0054 167.715 54.1118 167.219 54.1118 cv
166.723 54.1118 166.369 54.3276 165.656 54.8989 cv
165.622 54.9565 165.303 56.625 165.155 57.2241 cv
164.994 57.8716 164.817 58.6724 164.698 59.105 cv
164.577 59.5356 164.272 59.9697 163.561 59.9834 cv
162.909 59.9834 162.765 59.7705 162.879 59.3555 cv
162.944 59.1245 163.827 56.2432 163.964 55.5796 cv
164.098 54.98 164.088 54.2676 163.691 54.2676 cv
163.271 54.2676 162.045 55.2417 161.757 56.2729 cv
161.377 57.6592 161.539 58.833 161.326 59.6035 cv
161.228 59.9409 160.56 60.1431 160.34 60.1431 cv
159.938 60.1431 159.624 59.9888 159.591 59.7715 cv
159.572 59.2798 159.837 57.6914 159.943 57.1973 cv
160.247 55.6411 160.217 54.7334 160.373 54.1636 cv
160.503 53.6997 161.196 53.376 161.427 53.376 cv
161.986 53.376 162.31 53.4839 162.125 54.5469 cv
162.728 53.8252 163.754 53.082 164.542 53.082 cv
165.103 53.0811 165.588 53.3892 165.626 53.9897 cv
166.278 53.3569 167.499 52.9243 168.291 52.9243 cv
cp
f
178.579 52.916 mo
179.351 52.916 179.521 53.9946 179.363 54.7949 cv
179.253 55.3496 179.026 56.4141 178.863 57.064 cv
178.7 57.707 178.591 58.4937 178.474 58.9297 cv
178.355 59.3608 177.985 59.8047 177.251 59.8066 cv
176.529 59.8066 176.514 59.4058 176.63 58.9888 cv
176.88 58.064 177.416 56.3564 177.617 55.6294 cv
177.789 54.999 178.004 54.1025 177.507 54.1025 cv
177.01 54.1025 176.659 54.3223 175.945 54.8911 cv
175.909 54.9526 175.591 56.6167 175.444 57.2178 cv
175.283 57.8662 175.105 58.667 174.987 59.0986 cv
174.872 59.5303 174.563 59.9614 173.845 59.978 cv
173.196 59.978 173.052 59.7651 173.167 59.3457 cv
173.233 59.1133 174.12 56.2329 174.253 55.5703 cv
174.388 54.9683 174.382 54.2612 173.981 54.2612 cv
173.559 54.2612 172.332 55.2354 172.046 56.2661 cv
171.665 57.6494 171.828 58.8218 171.614 59.5918 cv
171.522 59.9336 170.846 60.1338 170.627 60.1338 cv
170.225 60.1362 169.912 59.978 169.879 59.7651 cv
169.858 59.271 170.124 57.6841 170.23 57.1909 cv
170.536 55.6372 170.505 54.7241 170.663 54.1567 cv
170.788 53.6934 171.483 53.3726 171.715 53.3726 cv
172.271 53.3726 172.598 53.4766 172.416 54.5396 cv
173.02 53.814 174.041 53.0718 174.831 53.0718 cv
175.388 53.0718 175.877 53.3838 175.914 53.9819 cv
176.567 53.3501 177.789 52.916 178.579 52.916 cv
cp
f
183.075 53.9146 mo
182.964 54.3174 182.592 55.396 182.405 56.0708 cv
182.208 56.7798 181.667 58.6919 182.414 58.6919 cv
183.387 58.6919 184.414 57.4858 184.739 56.3164 cv
184.858 55.8862 184.897 55.561 184.93 55.2866 cv
185.007 54.5469 184.901 54.1465 185 53.8066 cv
185.087 53.4683 185.617 53.0654 186.203 53.0654 cv
186.626 53.0654 186.795 53.2334 186.83 53.4517 cv
186.845 53.9424 186.497 55.5601 186.393 56.0562 cv
186.296 56.563 186.115 57.626 186.053 58.1191 cv
186.04 58.2871 185.925 58.9824 185.893 59.105 cv
185.772 59.5356 185.185 59.8164 185 59.8164 cv
184.783 59.8164 184.224 59.7676 184.17 59.4443 cv
184.149 59.2598 184.229 58.8447 184.295 58.4282 cv
183.113 59.5854 181.777 60.1567 180.986 60.1597 cv
180.415 60.1597 179.794 59.541 180.406 57.0767 cv
180.573 56.4307 181.02 54.5166 181.139 54.0859 cv
181.256 53.6533 181.651 53.1772 182.396 53.1758 cv
183.061 53.1758 183.191 53.4971 183.075 53.9146 cv
cp
f
192.996 53.0601 mo
194.046 53.0591 194.136 54.1377 194.024 54.9375 cv
193.942 55.4639 193.686 56.5576 193.527 57.2021 cv
193.364 57.8521 193.243 58.6367 193.124 59.0718 cv
193.002 59.502 192.434 59.8857 191.92 59.8857 cv
191.455 59.8877 191.086 59.6563 191.2 59.2441 cv
191.309 58.8408 191.672 57.7432 191.846 57.1265 cv
191.999 56.5576 192.739 54.2021 192.075 54.2021 cv
191.657 54.2041 190.167 54.9414 189.62 56.9292 cv
189.461 57.5015 189.37 58.9639 189.191 59.6265 cv
189.093 59.9658 188.664 60.1362 188.35 60.1362 cv
187.884 60.1362 187.639 59.9023 187.591 59.6919 cv
187.525 59.0884 187.771 58.1333 187.911 57.1807 cv
188.026 56.4243 188.236 54.9443 188.361 54.4658 cv
188.513 53.9116 188.853 53.4785 189.591 53.4785 cv
190.103 53.4785 190.339 53.6934 190.2 54.479 cv
191.146 53.5264 192.155 53.0601 192.996 53.0601 cv
cp
f
195.275 60.1479 mo
194.777 60.1479 194.473 59.8989 194.625 59.3608 cv
194.77 58.8203 195.366 55.9878 195.815 54.3506 cv
195.956 53.8433 196.503 53.4712 197.093 53.4712 cv
197.587 53.4712 197.735 53.7329 197.634 54.0889 cv
197.543 54.4292 197.169 55.3833 196.965 56.1406 cv
196.758 56.8804 196.491 58.7603 196.366 59.2056 cv
196.195 59.8389 195.644 60.1479 195.275 60.1479 cv
cp
197.06 52.4727 mo
196.514 52.4727 196.273 52.2886 196.389 51.8687 cv
196.489 51.5166 197.041 51.1318 197.475 51.1318 cv
198.092 51.1318 198.388 51.3452 198.28 51.749 cv
198.145 52.2383 197.786 52.4727 197.06 52.4727 cv
cp
f
198.617 54.7524 mo
198.339 54.7524 198.209 54.4893 198.259 54.3047 cv
198.339 54.0103 198.567 53.688 198.924 53.687 cv
199.126 53.687 199.348 53.6099 199.518 53.6099 cv
199.761 52.729 199.716 52.0366 199.902 51.4194 cv
199.998 51.083 200.356 50.7256 200.869 50.7256 cv
201.441 50.7222 201.642 51.0664 201.562 51.3589 cv
201.48 51.6494 201.309 52.729 201.123 53.4111 cv
201.333 53.376 201.472 53.2695 201.716 53.2695 cv
202.046 53.2695 202.222 53.5288 202.145 53.8701 cv
202.081 54.1465 201.838 54.3452 201.672 54.394 cv
201.417 54.4712 201.118 54.502 200.952 54.5342 cv
200.877 54.8105 200.51 56.4922 200.425 56.9688 cv
200.333 57.4629 199.908 59.2969 199.826 59.5918 cv
199.751 59.8667 199.333 60.252 198.93 60.252 cv
198.436 60.252 198.092 60.0386 198.133 59.7114 cv
198.19 59.3906 198.567 57.8008 198.732 57.1982 cv
198.897 56.6016 199.235 55.0264 199.326 54.7026 cv
199.108 54.7202 198.849 54.7524 198.617 54.7524 cv
cp
f
202.557 60.1431 mo
202.062 60.1431 201.757 59.895 201.905 59.3584 cv
202.053 58.8164 202.647 55.9824 203.095 54.3452 cv
203.237 53.8398 203.788 53.4683 204.376 53.4683 cv
204.87 53.4683 205.017 53.7256 204.92 54.0835 cv
204.826 54.4224 204.458 55.3794 204.245 56.1362 cv
204.043 56.8721 203.773 58.75 203.651 59.1987 cv
203.475 59.8296 202.924 60.1431 202.557 60.1431 cv
cp
204.341 52.4673 mo
203.798 52.4673 203.556 52.2837 203.67 51.8662 cv
203.766 51.5117 204.323 51.124 204.756 51.124 cv
205.376 51.124 205.672 51.3413 205.563 51.7417 cv
205.429 52.2349 205.069 52.4673 204.341 52.4673 cv
cp
f
207.758 55.5308 mo
208.081 55.373 208.874 55.0815 209.149 54.9297 cv
209.215 54.6816 209.068 54.1567 208.552 54.1567 cv
208.352 54.1567 207.862 55.144 207.758 55.5308 cv
cp
208.868 58.7031 mo
208.493 58.9346 206.967 59.9824 206.58 59.9834 cv
205.556 59.9834 205.466 58.4604 205.74 57.4575 cv
205.814 57.1938 li
205.727 57.2241 205.631 57.2407 205.489 57.2407 cv
205.35 57.2407 205.266 56.98 205.316 56.8081 cv
205.436 56.3809 205.586 56.2729 206.093 56.0698 cv
206.653 54.0361 207.866 52.833 208.254 52.833 cv
209.928 52.833 210.813 53.9375 210.657 54.5112 cv
210.547 54.9102 210.474 55.2354 209.798 55.605 cv
209.271 55.8975 207.747 56.5786 207.448 56.7773 cv
207.344 57.147 li
207.13 57.9175 207.28 58.457 207.494 58.457 cv
207.711 58.457 208.082 58.2412 208.595 57.8408 cv
208.895 57.5952 209.389 57.146 209.868 56.8223 cv
210.167 56.6182 210.352 56.5171 210.554 56.5171 cv
210.927 56.5171 211.051 56.6841 210.971 56.9736 cv
210.822 57.5117 209.56 58.2725 208.868 58.7031 cv
cp
f
213.447 60.0693 mo
212.334 60.0723 211.404 59.7329 211.644 58.8691 cv
211.911 57.8813 212.544 57.3901 213.04 57.3901 cv
213.521 57.3901 213.702 57.7432 213.641 57.9609 cv
213.561 58.2515 213.422 58.4199 213.338 58.4541 cv
213.247 58.5005 213.094 58.6079 213.04 58.7881 cv
212.978 59.0229 213.496 59.0718 213.662 59.0718 cv
214.637 59.0718 215.201 58.4365 215.301 58.0679 cv
215.621 56.9253 214.532 56.7568 213.758 56.7568 cv
212.824 56.7607 212.426 56.8027 212.242 56.8027 cv
211.918 56.8027 211.579 56.4517 211.743 55.8516 cv
211.981 54.9878 214.263 52.8892 215.475 52.8726 cv
216.542 52.8726 216.477 54.1348 216.401 54.416 cv
216.349 54.6011 216.018 55.0327 215.549 55.0327 cv
215.101 55.0327 214.963 54.9067 214.955 54.7075 cv
214.948 54.6177 214.883 54.3516 214.711 54.3516 cv
214.557 54.3516 214.408 54.3994 214.334 54.4316 cv
214.041 54.5562 213.567 54.9692 213.47 55.3252 cv
213.426 55.478 213.508 55.5269 213.938 55.5269 cv
214.081 55.5244 214.504 55.5103 214.907 55.5103 cv
215.201 55.5088 217.383 55.8931 216.902 57.6621 cv
216.505 59.0986 214.532 60.0693 213.447 60.0693 cv
cp
f
142.824 67.395 mo
142.437 67.395 142.37 66.9053 142.427 66.7051 cv
142.474 66.52 142.768 66.0259 143.14 66.0259 cv
143.653 66.0259 145.991 65.5151 146.407 65.4688 cv
146.822 65.4238 149.465 64.8179 150.087 64.8179 cv
150.426 64.8164 150.586 65.1875 150.503 65.4946 cv
150.417 65.8027 150.007 66.1733 149.572 66.1733 cv
149.14 66.1733 147.685 66.3457 146.985 66.5151 cv
146.74 67.3472 146.531 68.6724 146.394 69.29 cv
146.241 69.9053 145.839 71.8184 145.735 72.4194 cv
145.639 72.9893 145.75 73.7129 145.639 74.1138 cv
145.522 74.5288 145.012 74.7158 144.558 74.7134 cv
144.112 74.7158 143.868 74.3628 143.892 73.7617 cv
143.904 73.438 144.172 71.7886 144.465 70.7256 cv
144.813 69.4609 144.954 68.4448 145.337 66.8862 cv
144.575 66.9941 143.35 67.395 142.824 67.395 cv
cp
f
153.528 71.0088 mo
153.847 69.7808 153.838 68.8701 153.479 68.8701 cv
152.845 68.8701 151.417 70.2271 151.163 71.1489 cv
151.006 71.7207 150.808 72.5527 150.768 72.9863 cv
150.743 73.354 150.737 73.876 150.645 74.2192 cv
150.546 74.5757 150.226 74.7896 149.928 74.7896 cv
149.229 74.8071 149.187 74.666 149.142 74.4502 cv
149.106 73.959 149.468 71.3979 149.589 70.7383 cv
149.852 69.3799 150.091 66.7163 150.466 65.3555 cv
150.75 64.3081 151.234 63.9727 152.038 63.9727 cv
152.518 63.9692 152.75 64.2622 152.652 64.6172 cv
152.556 64.9702 152.331 65.4946 152.03 66.5898 cv
151.823 67.3433 151.695 68.4849 151.476 69.3936 cv
151.804 68.7632 153.163 67.7148 154.528 67.7148 cv
155.471 67.7119 155.873 68.729 155.206 71.1489 cv
155.079 71.6089 154.531 73.0444 154.336 73.6914 cv
154.219 74.124 153.859 74.5864 153.135 74.5723 cv
152.662 74.5542 152.466 74.2446 152.565 73.876 cv
152.723 73.3091 153.192 72.2285 153.528 71.0088 cv
cp
f
161.155 70.252 mo
160.878 70.252 160.445 70.1885 160.485 69.8818 cv
160.547 69.4194 160.498 69.2036 160.189 69.2036 cv
159.943 69.2036 159.544 69.4658 158.554 70.4233 cv
158.468 70.8354 158.34 71.7002 158.225 72.686 cv
158.14 73.4424 158.211 73.9819 158.115 74.3193 cv
158.022 74.6597 157.367 74.8433 157.149 74.8433 cv
156.731 74.8433 156.413 74.6621 156.379 74.4448 cv
156.359 73.9536 156.599 72.3345 156.704 71.8384 cv
156.798 71.3306 156.957 69.6978 157.108 69.1294 cv
157.3 68.4346 157.592 68.0483 158.285 68.0635 cv
158.815 68.0635 158.982 68.3564 158.925 68.5557 cv
158.854 68.834 158.762 69.1113 158.693 69.3413 cv
159.7 68.2793 160.453 67.9072 161.244 67.9058 cv
162.016 67.9058 162.273 68.3833 161.958 69.5264 cv
161.867 69.8638 161.437 70.252 161.155 70.252 cv
cp
f
166.272 71.3555 mo
166.619 70.1089 166.408 68.9033 165.97 68.9087 cv
165.523 68.9087 164.364 70.2939 163.954 71.7886 cv
163.608 73.0366 163.86 73.5913 164.338 73.5913 cv
164.9 73.5913 165.922 72.6191 166.272 71.3555 cv
cp
164.985 68.042 mo
165.191 67.9048 165.235 67.6411 165.637 67.6411 cv
166.027 67.6411 166.091 67.7969 166.447 67.7969 cv
167.191 67.7969 168.698 68.689 168.052 71.0322 cv
167.411 73.3589 165.125 74.7471 163.824 74.7471 cv
162.509 74.7471 161.597 73.9341 162.164 71.8848 cv
162.543 70.4971 163.77 68.8008 164.985 68.042 cv
cp
f
171.917 68.5776 mo
171.808 68.9766 171.435 70.0601 171.25 70.7358 cv
171.054 71.4448 170.512 73.354 171.252 73.354 cv
172.23 73.354 173.258 72.1494 173.581 70.9785 cv
173.7 70.5479 173.741 70.2246 173.769 69.9458 cv
173.853 69.2065 173.742 68.8071 173.836 68.4697 cv
173.931 68.1279 174.46 67.7285 175.047 67.7261 cv
175.467 67.7261 175.635 67.8955 175.667 68.1123 cv
175.688 68.6055 175.34 70.2246 175.232 70.7163 cv
175.139 71.2246 174.957 72.2896 174.899 72.7852 cv
174.881 72.9521 174.77 73.6455 174.733 73.771 cv
174.617 74.2012 174.028 74.4746 173.841 74.4746 cv
173.627 74.4761 173.063 74.4336 173.015 74.1084 cv
172.987 73.9238 173.072 73.5078 173.138 73.0918 cv
171.954 74.2485 170.622 74.8198 169.829 74.8198 cv
169.255 74.8198 168.636 74.2036 169.252 71.7358 cv
169.412 71.0918 169.86 69.1807 169.981 68.748 cv
170.096 68.3149 170.495 67.8394 171.241 67.8394 cv
171.903 67.8354 172.03 68.1611 171.917 68.5776 cv
cp
f
177.453 79.3145 mo
176.527 79.3145 175.126 78.9927 175.467 77.7437 cv
175.583 77.3276 175.933 77.0015 176.476 77.0015 cv
176.914 77.0015 177.083 77.3267 177.098 77.5571 cv
177.107 77.9272 177.24 78.3447 177.676 78.3447 cv
178.513 78.3408 179.481 76.7227 179.785 75.6304 cv
179.942 75.0601 180.063 74.2881 180.121 73.3921 cv
179.808 73.9033 178.833 74.5811 177.887 74.5811 cv
176.866 74.584 175.828 74.0122 176.308 72.2754 cv
177.275 68.7559 179.954 67.4629 181.162 67.4604 cv
181.474 67.4604 182.108 67.5684 182.081 67.8438 cv
181.985 68.3066 181.464 68.9561 181.142 68.9561 cv
180.986 68.9561 180.916 68.9243 180.932 68.8652 cv
180.932 68.8652 180.932 68.7544 180.928 68.771 cv
180.943 68.7095 180.749 68.6348 180.64 68.6348 cv
179.818 68.6348 178.622 70.1152 178.046 72.21 cv
177.777 73.1816 178.069 73.4731 178.673 73.4731 cv
179.089 73.4731 179.421 73.2407 179.627 72.9946 cv
179.79 72.7925 179.9 72.564 180.012 72.377 cv
180.273 71.9297 180.34 71.7446 180.548 70.9902 cv
180.633 70.6855 180.641 70.144 180.77 69.6802 cv
180.877 69.2822 181.344 68.834 181.932 68.834 cv
182.308 68.834 182.58 69.1411 182.536 69.3999 cv
182.478 69.6646 182.335 70.6177 182.073 71.5908 cv
181.806 72.5464 181.964 73.6694 181.416 75.6729 cv
180.863 77.6772 179.049 79.3125 177.453 79.3145 cv
cp
f
187.782 70.9839 mo
188.107 69.7534 188.094 68.8433 187.74 68.8433 cv
187.104 68.8433 185.677 70.2012 185.424 71.126 cv
185.267 71.6963 185.071 72.5254 185.028 72.9604 cv
185.002 73.3281 185 73.853 184.903 74.1924 cv
184.805 74.5454 184.485 74.7637 184.192 74.7637 cv
183.485 74.7778 183.451 74.6377 183.401 74.4243 cv
183.366 73.9287 183.727 71.374 183.85 70.71 cv
184.113 69.354 184.351 66.686 184.722 65.3325 cv
185.012 64.2837 185.492 63.9434 186.296 63.9424 cv
186.779 63.9424 187.007 64.2363 186.91 64.5913 cv
186.811 64.9448 186.592 65.4688 186.289 66.5625 cv
186.084 67.3203 185.956 68.4604 185.735 69.3696 cv
186.065 68.7402 187.421 67.686 188.788 67.6851 cv
189.731 67.6851 190.133 68.7021 189.465 71.123 cv
189.338 71.5859 188.788 73.0146 188.597 73.6646 cv
188.477 74.0933 188.119 74.5566 187.396 74.5425 cv
186.918 74.5288 186.725 74.2217 186.826 73.8521 cv
186.982 73.2822 187.448 72.2017 187.782 70.9839 cv
cp
f
198.057 73.0112 mo
198.588 72.6538 199.398 72.519 199.668 72.4395 cv
201.571 71.8848 203.36 70.5737 203.547 69.8794 cv
203.759 69.1226 203.153 69.1226 202.596 69.1255 cv
202.035 69.1255 200.605 69.2642 198.43 69.9604 cv
198.333 70.8872 198.073 72.7798 198.057 73.0112 cv
cp
198.502 68.8047 mo
199.17 68.5757 202.008 67.1997 202.271 66.2573 cv
202.341 65.9966 202.046 65.8887 201.533 65.8887 cv
201.055 65.8887 199.366 66.3384 198.866 66.6309 cv
198.712 67.2344 198.561 68.1855 198.502 68.8047 cv
cp
196.849 66.6309 mo
196.894 66.3716 197.194 66.062 197.521 65.9541 cv
199.303 65.3198 201.239 64.8691 202.621 64.8691 cv
203.376 64.8691 204.529 64.9639 204.303 65.7778 cv
204.085 66.5791 202.679 67.7515 201.257 68.3691 cv
201.8 68.2319 202.539 68.0933 203.546 68.0894 cv
205.09 68.0894 205.682 68.6606 205.453 69.4932 cv
204.707 72.2046 197.986 74.29 197.706 74.3989 cv
197.444 74.5083 197.382 74.7368 197.039 74.7368 cv
196.745 74.7407 196.123 74.584 196.251 74.1084 cv
196.423 73.4897 196.627 71.4395 196.796 70.3765 cv
196.583 70.3765 196.28 70.1782 196.354 69.9136 cv
196.43 69.6377 196.883 69.2847 196.883 69.2847 cv
197.012 68.8071 197.006 67.6514 197.109 67.0493 cv
197.109 66.9863 196.794 66.8926 196.849 66.6309 cv
cp
f
207.946 70.1821 mo
208.264 70.0298 209.058 69.7383 209.332 69.584 cv
209.403 69.3345 209.25 68.812 208.738 68.812 cv
208.538 68.812 208.049 69.7983 207.946 70.1821 cv
cp
209.052 73.356 mo
208.684 73.5903 207.153 74.6377 206.763 74.6377 cv
205.74 74.6377 205.649 73.1152 205.924 72.1133 cv
205.999 71.8486 li
205.912 71.8818 205.814 71.8965 205.679 71.895 cv
205.538 71.895 205.455 71.6357 205.5 71.4595 cv
205.622 71.0337 205.773 70.9229 206.274 70.7256 cv
206.834 68.689 208.049 67.4873 208.436 67.4873 cv
210.113 67.4858 210.998 68.5928 210.844 69.1665 cv
210.73 69.5659 210.657 69.8896 209.984 70.2593 cv
209.454 70.5508 207.933 71.23 207.63 71.4331 cv
207.528 71.8018 li
207.318 72.5732 207.466 73.1108 207.684 73.1108 cv
207.895 73.1108 208.266 72.895 208.782 72.4946 cv
209.083 72.2461 209.575 71.8018 210.049 71.4766 cv
210.352 71.2778 210.536 71.1675 210.737 71.1675 cv
211.112 71.1675 211.236 71.3379 211.157 71.6284 cv
211.007 72.1694 209.746 72.9263 209.052 73.356 cv
cp
f
212.176 69.3936 mo
211.893 69.3936 211.764 69.1333 211.813 68.9482 cv
211.894 68.6567 212.128 68.3325 212.481 68.3325 cv
212.681 68.3306 212.903 68.2549 213.076 68.2549 cv
213.318 67.3726 213.273 66.6812 213.462 66.0654 cv
213.557 65.7241 213.915 65.3721 214.424 65.3721 cv
214.999 65.3721 215.201 65.7104 215.121 66.002 cv
215.04 66.2944 214.869 67.3726 214.679 68.0532 cv
214.892 68.0215 215.025 67.9131 215.276 67.9131 cv
215.6 67.9131 215.778 68.1777 215.701 68.5156 cv
215.64 68.7905 215.398 68.9878 215.231 69.0396 cv
214.977 69.1152 214.671 69.1465 214.506 69.1782 cv
214.432 69.4546 214.064 71.1353 213.979 71.6128 cv
213.89 72.1069 213.462 73.9395 213.383 74.2319 cv
213.307 74.5083 212.891 74.8945 212.49 74.8945 cv
211.993 74.8945 211.647 74.6826 211.692 74.3564 cv
211.745 74.0308 212.122 72.4443 212.288 71.8423 cv
212.453 71.2427 212.79 69.6699 212.881 69.3477 cv
212.662 69.3643 212.405 69.3936 212.176 69.3936 cv
cp
f
216.403 69.3916 mo
216.122 69.3916 215.995 69.1318 216.044 68.9458 cv
216.127 68.6504 216.356 68.3281 216.708 68.3281 cv
216.915 68.3281 217.137 68.2539 217.302 68.2515 cv
217.544 67.3716 217.505 66.6782 217.691 66.0591 cv
217.787 65.7207 218.145 65.3696 218.657 65.3657 cv
219.232 65.3657 219.427 65.7075 219.35 65.998 cv
219.269 66.2905 219.099 67.3691 218.909 68.0483 cv
219.121 68.019 219.259 67.9111 219.507 67.9111 cv
219.829 67.9111 220.006 68.1729 219.927 68.5103 cv
219.868 68.7905 219.629 68.9878 219.46 69.0366 cv
219.205 69.1123 218.904 69.1445 218.741 69.1733 cv
218.666 69.4517 218.294 71.1313 218.206 71.6089 cv
218.121 72.103 217.695 73.9365 217.612 74.231 cv
217.533 74.5083 217.121 74.8911 216.719 74.8945 cv
216.222 74.8945 215.878 74.6772 215.917 74.3555 cv
215.98 74.0308 216.356 72.4424 216.518 71.8403 cv
216.686 71.2378 217.023 69.6675 217.112 69.3447 cv
216.891 69.3618 216.638 69.3916 216.403 69.3916 cv
cp
f
222.184 70.1743 mo
222.507 70.0176 223.298 69.7251 223.574 69.5723 cv
223.641 69.3247 223.494 68.8008 222.976 68.8008 cv
222.775 68.8008 222.287 69.7856 222.184 70.1743 cv
cp
223.293 73.3457 mo
222.918 73.5781 221.391 74.6265 221.003 74.6265 cv
219.982 74.6274 219.891 73.1006 220.165 72.1006 cv
220.239 71.8374 li
220.152 71.8706 220.054 71.8862 219.914 71.8862 cv
219.778 71.8862 219.689 71.6216 219.738 71.4531 cv
219.857 71.022 220.01 70.9165 220.514 70.7129 cv
221.075 68.6812 222.287 67.4771 222.678 67.4771 cv
224.351 67.4771 225.239 68.5825 225.083 69.1528 cv
224.97 69.5542 224.9 69.8794 224.221 70.249 cv
223.693 70.5396 222.172 71.2197 221.874 71.4214 cv
221.767 71.7896 li
221.556 72.5605 221.705 73.0996 221.918 73.0996 cv
222.137 73.0996 222.509 72.8823 223.019 72.481 cv
223.318 72.2354 223.814 71.7886 224.292 71.4634 cv
224.595 71.2622 224.776 71.1543 224.979 71.1543 cv
225.352 71.1543 225.476 71.3223 225.393 71.6182 cv
225.246 72.1582 223.984 72.9116 223.293 73.3457 cv
cp
f
230.866 70.1992 mo
230.59 70.1992 230.158 70.1338 230.193 69.8276 cv
230.258 69.3657 230.21 69.1484 229.903 69.1484 cv
229.65 69.1484 229.254 69.4121 228.263 70.3672 cv
228.178 70.7847 228.051 71.6499 227.937 72.6323 cv
227.851 73.3901 227.919 73.9287 227.829 74.2666 cv
227.731 74.6099 227.079 74.7915 226.862 74.7915 cv
226.443 74.793 226.122 74.6099 226.091 74.3926 cv
226.071 73.9009 226.312 72.2803 226.417 71.7871 cv
226.514 71.2788 226.667 69.6455 226.822 69.0767 cv
227.015 68.3833 227.308 67.9971 228 68.0098 cv
228.528 68.0098 228.695 68.3027 228.635 68.5054 cv
228.564 68.7788 228.47 69.0625 228.405 69.29 cv
229.412 68.2256 230.165 67.856 230.954 67.856 cv
231.726 67.853 231.986 68.3325 231.67 69.4712 cv
231.575 69.811 231.147 70.1992 230.866 70.1992 cv
cp
f
240.145 64.7354 mo
240.785 64.7354 240.961 65.1968 240.871 65.5356 cv
240.777 65.8887 240.14 67.4629 239.837 68.5557 cv
239.018 71.5317 239.114 73.6748 239.04 73.9365 cv
238.911 74.3979 238.175 74.5996 237.978 74.5996 cv
237.402 74.5996 237.12 74.2144 237.181 73.876 cv
237.271 73.3809 237.439 72.043 237.708 70.687 cv
237.969 69.3281 238.614 66.709 238.847 65.8618 cv
239.083 64.9961 239.742 64.7354 240.145 64.7354 cv
cp
f
246.572 67.6733 mo
247.625 67.6704 247.716 68.749 247.601 69.5522 cv
247.52 70.0757 247.268 71.1694 247.106 71.8184 cv
246.943 72.4653 246.82 73.251 246.703 73.6812 cv
246.582 74.1167 246.013 74.5029 245.503 74.5029 cv
245.036 74.5029 244.668 74.2705 244.778 73.853 cv
244.89 73.4526 245.253 72.3584 245.425 71.7427 cv
245.58 71.1719 246.32 68.8135 245.655 68.8164 cv
245.238 68.8164 243.747 69.5542 243.198 71.5435 cv
243.043 72.1147 242.954 73.5781 242.766 74.2383 cv
242.672 74.5811 242.24 74.7534 241.926 74.7534 cv
241.469 74.7534 241.221 74.5195 241.173 74.3027 cv
241.106 73.7017 241.351 72.7476 241.489 71.7896 cv
241.601 71.0347 241.81 69.5596 241.945 69.0781 cv
242.095 68.5234 242.432 68.0933 243.173 68.0933 cv
243.682 68.0894 243.919 68.3047 243.779 69.0913 cv
244.727 68.1382 245.738 67.6748 246.572 67.6733 cv
cp
f
248.897 69.3511 mo
248.665 69.2588 248.642 69.0625 248.668 68.9521 cv
248.741 68.689 248.938 68.3638 249.154 68.3638 cv
249.405 68.3638 249.589 68.3149 249.767 68.3027 cv
249.79 68.042 249.848 67.7637 249.931 67.4536 cv
250.674 64.772 252.702 63.9858 253.534 63.9844 cv
254.141 63.9844 254.974 64.168 254.802 64.7842 cv
254.675 65.2607 254.51 65.5098 254.141 65.5112 cv
253.861 65.5112 253.598 65.4653 253.659 65.2324 cv
253.693 65.0947 253.375 65.0645 253.223 65.0645 cv
252.435 65.0645 251.833 66.2979 251.666 66.8989 cv
251.551 67.3164 251.504 67.7158 251.426 68.1167 cv
251.842 68.1167 252.568 67.7314 253.017 67.7314 cv
253.22 67.7314 253.284 67.9468 253.223 68.1611 cv
253.136 68.4697 252.977 68.6709 252.764 68.7632 cv
252.565 68.8247 251.709 69.0601 251.309 69.0601 cv
251.309 69.0601 251.063 71.0576 250.97 71.6919 cv
250.88 72.2461 250.721 74.0493 250.625 74.3887 cv
250.53 74.7432 250.003 75.0845 249.71 75.0845 cv
249.292 75.0845 248.793 74.8701 248.842 74.5757 cv
248.871 74.4067 248.961 73.5259 249.096 72.6938 cv
249.213 71.9233 249.511 70.3994 249.606 69.3657 cv
249.421 69.3687 249.128 69.3687 248.897 69.3511 cv
cp
f
257.623 70.1782 mo
257.347 70.1782 256.918 70.1182 256.952 69.8086 cv
257.019 69.3467 256.969 69.1318 256.66 69.1318 cv
256.411 69.1318 256.014 69.3916 255.025 70.3496 cv
254.94 70.7627 254.813 71.6284 254.698 72.6118 cv
254.615 73.3691 254.683 73.9072 254.586 74.2446 cv
254.492 74.5879 253.839 74.77 253.623 74.7725 cv
253.206 74.7725 252.886 74.5879 252.852 74.3745 cv
252.832 73.876 253.075 72.2627 253.18 71.7666 cv
253.271 71.2583 253.429 69.6226 253.584 69.0552 cv
253.774 68.3618 254.064 67.9751 254.761 67.9893 cv
255.288 67.9893 255.456 68.2837 255.397 68.4834 cv
255.323 68.7612 255.232 69.0405 255.167 69.271 cv
256.172 68.2061 256.927 67.834 257.716 67.834 cv
258.489 67.8325 258.745 68.313 258.426 69.4517 cv
258.339 69.7935 257.903 70.1782 257.623 70.1782 cv
cp
f
260.004 72.2354 mo
259.639 72.6094 259.53 72.8247 259.458 73.0869 cv
259.395 73.3193 259.521 73.4424 259.75 73.4424 cv
260.45 73.4424 261.047 72.8247 261.231 72.7319 cv
261.48 72.6094 261.732 72.5024 261.688 72.5308 cv
261.827 72.0386 262.007 71.3765 262.123 70.7886 cv
261.613 71.0684 260.583 71.6523 260.004 72.2354 cv
cp
259.817 71.2227 mo
260.659 70.6382 261.613 70.0498 261.856 69.896 cv
262.007 69.8047 262.163 69.7402 262.272 69.7251 cv
262.334 69.231 262.249 68.6929 261.769 68.6929 cv
261.333 68.6929 260.622 69.0366 260.304 69.2822 cv
260.248 69.3281 259.975 69.5752 259.823 69.5752 cv
259.56 69.5752 259.199 69.313 259.303 68.9253 cv
259.363 68.7124 259.513 68.5581 259.684 68.4487 cv
260.219 68.125 261.873 67.5229 262.429 67.5229 cv
262.911 67.5229 263.797 67.6284 263.792 69.833 cv
263.792 70.7446 263.452 72.1445 263.37 72.4395 cv
263.286 72.7476 262.99 73.6582 262.604 74.2715 cv
262.486 74.4722 261.986 74.5645 261.811 74.5645 cv
261.547 74.5645 261.059 74.4722 261.195 73.9819 cv
261.378 73.5039 li
260.544 74.229 259.355 74.5811 258.617 74.584 cv
257.869 74.584 257.494 74.3223 257.634 73.7505 cv
257.893 72.7515 258.804 71.918 259.817 71.2227 cv
cp
f
266.55 74.6836 mo
265.434 74.688 264.505 74.3516 264.744 73.4858 cv
265.014 72.4995 265.645 72.0044 266.142 72.0044 cv
266.619 72.0044 266.802 72.3584 266.745 72.5757 cv
266.664 72.8628 266.522 73.0366 266.437 73.0674 cv
266.348 73.1152 266.195 73.2212 266.142 73.4048 cv
266.079 73.6353 266.592 73.6812 266.763 73.6812 cv
267.742 73.6812 268.3 73.0493 268.405 72.6812 cv
268.717 71.5396 267.636 71.3726 266.86 71.3726 cv
265.928 71.374 265.528 71.4214 265.342 71.4214 cv
265.016 71.4214 264.681 71.0645 264.843 70.4619 cv
265.081 69.5991 267.359 67.5024 268.574 67.4873 cv
269.644 67.4873 269.576 68.749 269.498 69.0278 cv
269.45 69.209 269.113 69.6455 268.649 69.6455 cv
268.199 69.6455 268.063 69.5225 268.056 69.3208 cv
268.05 69.2285 267.984 68.9678 267.81 68.9678 cv
267.66 68.9678 267.506 69.0103 267.437 69.0444 cv
267.139 69.168 266.665 69.5854 266.572 69.9395 cv
266.528 70.0952 266.606 70.1411 267.043 70.1411 cv
267.18 70.1411 267.6 70.123 268.005 70.123 cv
268.3 70.123 270.485 70.5073 269.998 72.2773 cv
269.603 73.7129 267.636 74.6836 266.55 74.6836 cv
cp
f
271.347 69.3511 mo
271.071 69.3511 270.94 69.0884 270.993 68.9033 cv
271.071 68.6108 271.299 68.2856 271.657 68.2856 cv
271.856 68.2856 272.082 68.209 272.248 68.209 cv
272.491 67.3291 272.45 66.6372 272.634 66.0195 cv
272.73 65.6807 273.09 65.3276 273.601 65.3276 cv
274.171 65.3276 274.375 65.6626 274.293 65.9575 cv
274.211 66.252 274.042 67.3291 273.853 68.0073 cv
274.065 67.9751 274.205 67.8672 274.453 67.8672 cv
274.773 67.8672 274.956 68.1279 274.875 68.4697 cv
274.816 68.7466 274.574 68.9482 274.405 68.9917 cv
274.15 69.0679 273.85 69.1025 273.686 69.1333 cv
273.607 69.4121 273.238 71.0874 273.157 71.5693 cv
273.066 72.062 272.641 73.8945 272.557 74.1885 cv
272.481 74.4634 272.063 74.8506 271.662 74.8535 cv
271.167 74.8535 270.825 74.6348 270.863 74.3101 cv
270.925 73.9883 271.299 72.3999 271.464 71.8018 cv
271.63 71.1992 271.967 69.625 272.058 69.3042 cv
271.835 69.3169 271.579 69.3511 271.347 69.3511 cv
cp
f
279.724 70.1587 mo
279.447 70.1587 279.01 70.0986 279.052 69.791 cv
279.116 69.3281 279.067 69.1123 278.752 69.1123 cv
278.51 69.1123 278.106 69.376 277.121 70.332 cv
277.035 70.7485 276.905 71.6089 276.79 72.5962 cv
276.709 73.354 276.778 73.8931 276.685 74.2319 cv
276.591 74.5684 275.933 74.7544 275.713 74.7544 cv
275.299 74.7544 274.975 74.5723 274.946 74.3555 cv
274.924 73.8584 275.169 72.2407 275.273 71.749 cv
275.368 71.2427 275.521 69.6074 275.679 69.0396 cv
275.868 68.3462 276.162 67.9609 276.853 67.9736 cv
277.378 67.9736 277.546 68.2661 277.492 68.4644 cv
277.418 68.7427 277.325 69.0215 277.259 69.2544 cv
278.263 68.1895 279.021 67.8184 279.812 67.8184 cv
280.584 67.8159 280.841 68.292 280.527 69.4351 cv
280.433 69.7754 280.003 70.1587 279.724 70.1587 cv
cp
f
283.699 68.4946 mo
283.585 68.8945 283.212 69.9727 283.026 70.6494 cv
282.829 71.3608 282.295 73.2729 283.034 73.2729 cv
284.006 73.269 285.034 72.0659 285.357 70.8965 cv
285.477 70.4619 285.516 70.1411 285.547 69.8638 cv
285.628 69.1226 285.523 68.7236 285.614 68.3833 cv
285.709 68.0444 286.236 67.6426 286.829 67.6411 cv
287.246 67.6411 287.418 67.8125 287.451 68.0293 cv
287.468 68.5195 287.117 70.1411 287.012 70.6318 cv
286.916 71.1416 286.734 72.2046 286.677 72.6948 cv
286.661 72.8628 286.549 73.5591 286.514 73.6851 cv
286.396 74.1167 285.805 74.3926 285.621 74.3926 cv
285.403 74.3926 284.845 74.3516 284.795 74.0225 cv
284.768 73.8389 284.848 73.4253 284.917 73.0059 cv
283.734 74.1655 282.4 74.7354 281.611 74.7354 cv
281.036 74.7354 280.414 74.123 281.03 71.6523 cv
281.195 71.0054 281.644 69.0977 281.762 68.6621 cv
281.877 68.2319 282.273 67.7554 283.017 67.7554 cv
283.682 67.7554 283.812 68.0762 283.699 68.4946 cv
cp
f
289.597 72.3252 mo
289.444 72.895 289.471 73.251 289.994 73.251 cv
290.536 73.251 291.131 72.8931 291.433 72.7539 cv
291.721 72.6167 292.311 71.9849 292.746 71.9849 cv
293.177 71.9814 293.386 72.2432 293.32 72.4912 cv
293.062 73.418 290.456 74.3887 289.312 74.3926 cv
287.727 74.3926 287.634 73.3901 287.858 72.5732 cv
288.698 69.5225 291.97 67.7017 292.54 67.7017 cv
292.944 67.7017 293.216 67.853 293.083 68.3325 cv
292.983 68.6855 292.765 69.0884 292.328 69.1665 cv
291.042 69.3975 289.897 71.23 289.597 72.3252 cv
cp
f
294.512 69.3345 mo
294.232 69.3345 294.107 69.0728 294.153 68.8882 cv
294.232 68.5913 294.461 68.269 294.818 68.269 cv
295.021 68.269 295.242 68.1924 295.414 68.1904 cv
295.658 67.311 295.613 66.6196 295.799 66.002 cv
295.894 65.6626 296.254 65.3096 296.766 65.3096 cv
297.334 65.3096 297.536 65.646 297.458 65.9409 cv
297.376 66.2305 297.208 67.311 297.017 67.9893 cv
297.225 67.9585 297.369 67.8491 297.614 67.8491 cv
297.938 67.8491 298.117 68.1123 298.038 68.4502 cv
297.976 68.73 297.738 68.9263 297.566 68.9766 cv
297.31 69.0522 297.014 69.0845 296.848 69.1143 cv
296.774 69.3916 296.405 71.0698 296.315 71.5474 cv
296.231 72.0439 295.802 73.876 295.722 74.1704 cv
295.649 74.4478 295.23 74.834 294.827 74.834 cv
294.33 74.8354 293.988 74.6182 294.03 74.2935 cv
294.091 73.9712 294.461 72.3833 294.627 71.7798 cv
294.793 71.1812 295.135 69.6084 295.22 69.2876 cv
295.001 69.3013 294.748 69.3335 294.512 69.3345 cv
cp
f
300.942 68.481 mo
300.833 68.8818 300.461 69.9604 300.272 70.6382 cv
300.075 71.3472 299.537 73.2573 300.28 73.2573 cv
301.255 73.2573 302.285 72.0542 302.605 70.8872 cv
302.725 70.4521 302.764 70.1284 302.796 69.8511 cv
302.876 69.1113 302.772 68.7095 302.861 68.3691 cv
302.953 68.0317 303.486 67.6284 304.071 67.6284 cv
304.489 67.6284 304.665 67.7993 304.699 68.0122 cv
304.713 68.5078 304.365 70.1284 304.259 70.6201 cv
304.168 71.1284 303.982 72.1904 303.921 72.6836 cv
303.908 72.8545 303.791 73.5459 303.76 73.6724 cv
303.638 74.1011 303.054 74.3794 302.868 74.3794 cv
302.651 74.3794 302.086 74.3359 302.04 74.0098 cv
302.013 73.8237 302.097 73.4077 302.164 72.9946 cv
300.983 74.1489 299.642 74.7241 298.854 74.7241 cv
298.28 74.7241 297.662 74.1084 298.276 71.6396 cv
298.437 70.9922 298.887 69.0845 299.006 68.6504 cv
299.126 68.2217 299.522 67.7417 300.259 67.7417 cv
300.928 67.7388 301.056 68.0635 300.942 68.481 cv
cp
f
310.232 70.1357 mo
309.956 70.1357 309.521 70.0747 309.559 69.7676 cv
309.623 69.3066 309.576 69.0884 309.262 69.0884 cv
309.02 69.0884 308.62 69.3511 307.627 70.3081 cv
307.543 70.7256 307.418 71.5894 307.297 72.5757 cv
307.217 73.3281 307.288 73.8677 307.193 74.2061 cv
307.094 74.5454 306.442 74.7344 306.225 74.7344 cv
305.807 74.7344 305.486 74.5454 305.453 74.332 cv
305.437 73.8389 305.675 72.2202 305.783 71.728 cv
305.872 71.2197 306.033 69.5854 306.188 69.0166 cv
306.375 68.3242 306.673 67.938 307.366 67.9507 cv
307.889 67.9507 308.059 68.2432 308 68.4448 cv
307.923 68.7212 307.833 68.9961 307.771 69.2285 cv
308.776 68.1636 309.526 67.7969 310.318 67.7969 cv
311.091 67.7949 311.345 68.2715 311.035 69.4121 cv
310.944 69.7505 310.512 70.1357 310.232 70.1357 cv
cp
f
313.555 70.1064 mo
313.875 69.9497 314.671 69.6572 314.945 69.5034 cv
315.01 69.2554 314.861 68.7324 314.353 68.7324 cv
314.146 68.7324 313.663 69.7188 313.555 70.1064 cv
cp
314.665 73.2759 mo
314.29 73.5078 312.767 74.5566 312.378 74.5566 cv
311.355 74.5566 311.263 73.0342 311.54 72.0313 cv
311.61 71.7681 li
311.522 71.8018 311.426 71.8154 311.285 71.8154 cv
311.149 71.8154 311.069 71.5527 311.113 71.3853 cv
311.231 70.9517 311.385 70.8423 311.887 70.6436 cv
312.449 68.6108 313.663 67.4077 314.052 67.4077 cv
315.723 67.4063 316.612 68.5156 316.455 69.0845 cv
316.343 69.4863 316.269 69.811 315.595 70.1797 cv
315.066 70.4712 313.545 71.1489 313.245 71.3521 cv
313.145 71.7207 li
312.932 72.4912 313.077 73.0342 313.291 73.0342 cv
313.506 73.0342 313.88 72.8145 314.392 72.4111 cv
314.69 72.1675 315.187 71.7207 315.664 71.396 cv
315.967 71.1968 316.15 71.0874 316.353 71.0874 cv
316.73 71.0874 316.847 71.2568 316.768 71.5474 cv
316.615 72.0894 315.356 72.8452 314.665 73.2759 cv
cp
f
79.8208 0.383301 mo
90.2515 0.383301 li
90.2515 3.34033 li
89.2939 3.34033 li
88.7603 3.34033 88.4009 3.39404 88.208 3.50098 cv
88.0151 3.60889 87.8804 3.76025 87.7983 3.96191 cv
87.7188 4.15918 87.6792 4.59229 87.6792 5.25439 cv
87.6792 8.97705 li
95.46 8.97705 li
95.46 4.97998 li
95.46 4.48828 95.4277 4.15918 95.3657 3.98584 cv
95.2852 3.74072 95.1479 3.57129 94.9502 3.479 cv
94.7598 3.38672 94.3311 3.34033 93.6675 3.34033 cv
92.856 3.34033 li
92.856 0.383301 li
103.316 0.383301 li
103.316 3.34033 li
102.443 3.34033 li
101.851 3.34033 101.455 3.3877 101.265 3.48535 cv
101.069 3.58301 100.931 3.7251 100.854 3.91553 cv
100.775 4.10547 100.74 4.55225 100.74 5.25439 cv
100.74 16.834 li
100.74 17.5503 100.788 18.0137 100.884 18.2192 cv
100.983 18.4307 101.128 18.5771 101.334 18.666 cv
101.529 18.7505 101.989 18.7959 102.701 18.7959 cv
103.316 18.7959 li
103.316 21.7524 li
92.856 21.7524 li
92.856 18.7959 li
93.5435 18.7959 li
94.1851 18.7959 94.6201 18.7456 94.8506 18.6426 cv
95.0825 18.5386 95.2368 18.3882 95.3276 18.1963 cv
95.4102 18.0034 95.46 17.5503 95.46 16.834 cv
95.46 12.3164 li
87.6792 12.3164 li
87.6792 16.834 li
87.6792 17.5503 87.7085 17.9927 87.7676 18.168 cv
87.8716 18.4233 88.0254 18.5903 88.2432 18.6714 cv
88.4536 18.7524 88.8813 18.7959 89.5317 18.7959 cv
90.2515 18.7959 li
90.2515 21.7524 li
79.8208 21.7524 li
79.8208 18.7959 li
80.5273 18.7959 li
81.1255 18.7959 81.543 18.7456 81.7764 18.6426 cv
82.0068 18.5386 82.1768 18.3965 82.2583 18.2114 cv
82.3452 18.0288 82.3906 17.6274 82.3906 17.0005 cv
82.3906 5.39209 li
82.3906 4.6665 82.3452 4.19531 82.2583 3.97852 cv
82.1768 3.76025 82.0356 3.59717 81.853 3.49268 cv
81.668 3.39404 81.3115 3.34033 80.7754 3.34033 cv
79.8208 3.34033 li
79.8208 0.383301 li
cp
1 0.73 0 0.02 cmyk
f
111.122 13.8525 mo
114.519 13.8525 li
112.865 9.15527 li
111.122 13.8525 li
cp
111.638 4.64063 mo
115.48 4.64063 li
120.615 17.8506 li
120.891 18.5542 121.136 18.9883 121.354 19.1514 cv
121.572 19.313 121.972 19.3911 122.553 19.3838 cv
122.553 21.7524 li
114.457 21.7524 li
114.457 19.3838 li
114.951 19.3711 li
115.4 19.3711 115.713 19.313 115.892 19.1938 cv
116.075 19.0742 116.163 18.9277 116.163 18.7598 cv
116.163 18.6104 116.083 18.3091 115.929 17.8506 cv
115.418 16.293 li
110.217 16.293 li
109.577 18.0215 li
109.445 18.3882 109.379 18.6313 109.379 18.748 cv
109.379 18.8779 109.422 18.9932 109.52 19.1025 cv
109.612 19.2104 109.77 19.2861 109.98 19.3335 cv
110.121 19.3672 110.506 19.3838 111.133 19.3838 cv
111.133 21.7524 li
104.511 21.7524 li
104.511 19.3838 li
104.937 19.3838 105.248 19.3477 105.442 19.2734 cv
105.639 19.2002 105.796 19.0884 105.926 18.9395 cv
106.052 18.7959 106.194 18.5195 106.347 18.1216 cv
111.638 4.64063 li
cp
f
123.546 4.64063 mo
131.289 4.64063 li
134.26 15.0601 li
137.339 4.64063 li
145.214 4.64063 li
145.214 7.00977 li
144.371 7.00977 li
143.915 7.00977 143.594 7.10645 143.417 7.29736 cv
143.241 7.48926 143.156 7.85254 143.156 8.38232 cv
143.156 18.0972 li
143.156 18.5195 143.18 18.7881 143.23 18.8936 cv
143.303 19.0576 143.408 19.1719 143.537 19.2363 cv
143.715 19.3335 143.953 19.3838 144.249 19.3838 cv
145.214 19.3838 li
145.214 21.7524 li
136.986 21.7524 li
136.986 19.3838 li
137.625 19.3838 li
138.092 19.3838 138.409 19.3477 138.57 19.2734 cv
138.733 19.2002 138.851 19.0869 138.929 18.937 cv
139.007 18.7856 139.048 18.5044 139.048 18.0972 cv
139.048 7.57227 li
134.876 21.7524 li
132.51 21.7524 li
128.474 8.02783 li
128.474 18.4272 li
128.474 18.666 128.517 18.8481 128.606 18.979 cv
128.69 19.1104 128.81 19.2104 128.969 19.2798 cv
129.13 19.3506 129.389 19.3838 129.739 19.3838 cv
130.56 19.3838 li
130.56 21.7524 li
123.546 21.7524 li
123.546 19.3838 li
124.237 19.3838 li
124.669 19.3838 124.968 19.3442 125.131 19.2666 cv
125.292 19.1899 125.408 19.0693 125.488 18.8979 cv
125.567 18.73 125.604 18.4233 125.604 17.9727 cv
125.604 8.38232 li
125.604 7.94189 125.574 7.65576 125.519 7.52588 cv
125.447 7.34375 125.334 7.21387 125.185 7.13037 cv
125.038 7.0498 124.802 7.00977 124.479 7.00977 cv
123.546 7.00977 li
123.546 4.64063 li
cp
f
147.153 4.64063 mo
154.897 4.64063 li
157.869 15.0601 li
160.946 4.64063 li
168.828 4.64063 li
168.828 7.00977 li
167.98 7.00977 li
167.519 7.00977 167.202 7.10645 167.028 7.29736 cv
166.85 7.48926 166.766 7.85254 166.766 8.38232 cv
166.766 18.0972 li
166.766 18.5195 166.787 18.7881 166.839 18.8936 cv
166.915 19.0576 167.014 19.1719 167.146 19.2363 cv
167.324 19.3335 167.563 19.3838 167.856 19.3838 cv
168.828 19.3838 li
168.828 21.7524 li
160.599 21.7524 li
160.599 19.3838 li
161.234 19.3838 li
161.7 19.3838 162.015 19.3477 162.179 19.2734 cv
162.34 19.2002 162.459 19.0869 162.539 18.937 cv
162.619 18.7856 162.656 18.5044 162.656 18.0972 cv
162.656 7.57227 li
158.487 21.7524 li
156.12 21.7524 li
152.087 8.02783 li
152.087 18.4272 li
152.087 18.666 152.124 18.8481 152.211 18.979 cv
152.298 19.1104 152.42 19.2104 152.579 19.2798 cv
152.738 19.3506 152.995 19.3838 153.35 19.3838 cv
154.168 19.3838 li
154.168 21.7524 li
147.153 21.7524 li
147.153 19.3838 li
147.846 19.3838 li
148.278 19.3838 148.576 19.3442 148.738 19.2666 cv
148.899 19.1899 149.021 19.0693 149.098 18.8979 cv
149.17 18.73 149.216 18.4233 149.216 17.9727 cv
149.216 8.38232 li
149.216 7.94189 149.187 7.65576 149.125 7.52588 cv
149.054 7.34375 148.943 7.21387 148.794 7.13037 cv
148.645 7.0498 148.412 7.00977 148.091 7.00977 cv
147.153 7.00977 li
147.153 4.64063 li
cp
f
176.429 13.8525 mo
179.827 13.8525 li
178.169 9.15527 li
176.429 13.8525 li
cp
176.947 4.64063 mo
180.79 4.64063 li
185.921 17.8506 li
186.199 18.5542 186.446 18.9883 186.663 19.1514 cv
186.876 19.313 187.279 19.3911 187.859 19.3838 cv
187.859 21.7524 li
179.763 21.7524 li
179.763 19.3838 li
180.256 19.3711 li
180.708 19.3711 181.023 19.313 181.197 19.1938 cv
181.383 19.0742 181.472 18.9277 181.472 18.7598 cv
181.472 18.6104 181.394 18.3091 181.236 17.8506 cv
180.725 16.293 li
175.526 16.293 li
174.884 18.0215 li
174.755 18.3882 174.688 18.6313 174.688 18.748 cv
174.688 18.8779 174.733 18.9932 174.827 19.1025 cv
174.92 19.2104 175.075 19.2861 175.292 19.3335 cv
175.428 19.3672 175.812 19.3838 176.443 19.3838 cv
176.443 21.7524 li
169.82 21.7524 li
169.82 19.3838 li
170.244 19.3838 170.555 19.3477 170.75 19.2734 cv
170.947 19.2002 171.108 19.0884 171.232 18.9395 cv
171.36 18.7959 171.501 18.5195 171.66 18.1216 cv
176.947 4.64063 li
cp
f
188.804 4.64063 mo
197.154 4.64063 li
197.154 7.00977 li
196.606 7.00977 li
196.074 7.00977 195.746 7.03809 195.623 7.0957 cv
195.428 7.18701 195.285 7.31152 195.197 7.47461 cv
195.114 7.64063 195.07 7.9458 195.07 8.39795 cv
195.07 12.9507 li
200.404 8.00244 li
200.642 7.78174 200.787 7.63281 200.833 7.55566 cv
200.882 7.47461 200.905 7.40918 200.905 7.35254 cv
200.905 7.23828 200.858 7.15381 200.766 7.0957 cv
200.672 7.03809 200.433 7.00977 200.052 7.00977 cv
199.366 7.00977 li
199.366 4.64063 li
207.102 4.64063 li
207.102 7.00977 li
206.845 7.00977 li
206.485 7.00977 206.237 7.02832 206.096 7.06494 cv
205.958 7.1001 205.788 7.18066 205.585 7.30518 cv
205.385 7.4248 205.128 7.62744 204.808 7.90332 cv
200.672 11.4829 li
205.606 18.1445 li
206.034 18.7183 206.342 19.0576 206.538 19.1616 cv
206.799 19.3091 207.175 19.3838 207.666 19.3838 cv
207.998 19.3838 li
207.998 21.7524 li
199.366 21.7524 li
199.366 19.3838 li
199.708 19.3838 li
200.335 19.3838 200.716 19.3555 200.853 19.2964 cv
200.988 19.2383 201.055 19.1689 201.055 19.0767 cv
201.055 18.979 200.929 18.748 200.676 18.3799 cv
197.664 14.0884 li
195.07 16.333 li
195.07 18.0522 li
195.07 18.4761 195.114 18.769 195.193 18.9321 cv
195.274 19.0947 195.389 19.2104 195.542 19.2798 cv
195.694 19.3506 195.999 19.3838 196.458 19.3838 cv
197.154 19.3838 li
197.154 21.7524 li
188.804 21.7524 li
188.804 19.3838 li
189.434 19.3838 li
189.915 19.3838 190.243 19.3442 190.41 19.2666 cv
190.573 19.1899 190.691 19.064 190.764 18.8936 cv
190.829 18.7559 190.864 18.4204 190.864 17.8877 cv
190.864 8.54395 li
190.864 8.03418 190.829 7.69824 190.751 7.52588 cv
190.679 7.35254 190.558 7.22461 190.397 7.13818 cv
190.231 7.05127 189.935 7.00977 189.506 7.00977 cv
188.804 7.00977 li
188.804 4.64063 li
cp
f
208.928 4.64063 mo
223.215 4.64063 li
225.167 10.0503 li
222.948 10.8477 li
222.572 9.96436 222.129 9.25293 221.626 8.7124 cv
221.125 8.17432 220.571 7.81738 219.958 7.6416 cv
219.351 7.46533 218.644 7.37842 217.833 7.37842 cv
215.219 7.37842 li
215.219 11.6465 li
216.082 11.6465 li
216.729 11.6465 217.159 11.5962 217.382 11.5054 cv
217.609 11.4092 217.773 11.2627 217.871 11.0625 cv
217.969 10.8618 218.019 10.4634 218.019 9.86768 cv
218.019 9.21582 li
220.201 9.21582 li
220.201 16.4639 li
218.019 16.4639 li
218.019 15.7246 li
218.019 15.2222 217.958 14.8599 217.836 14.6304 cv
217.719 14.3989 217.563 14.2427 217.354 14.1592 cv
217.151 14.0771 216.7 14.0356 215.996 14.0356 cv
215.219 14.0356 li
215.219 17.9697 li
215.219 18.3882 215.243 18.6455 215.284 18.7339 cv
215.326 18.8252 215.405 18.8936 215.522 18.9395 cv
215.641 18.9912 215.896 19.0151 216.287 19.0151 cv
217.723 19.0151 li
218.795 19.0151 219.698 18.8638 220.435 18.5542 cv
221.172 18.2461 221.828 17.7476 222.405 17.0649 cv
222.983 16.3774 223.425 15.5615 223.739 14.6167 cv
225.975 15.3882 li
223.729 21.7524 li
208.928 21.7524 li
208.928 19.3838 li
209.359 19.3838 li
209.932 19.3838 210.32 19.3442 210.513 19.2612 cv
210.709 19.1792 210.849 19.0371 210.928 18.8325 cv
210.971 18.71 210.993 18.3633 210.993 17.7891 cv
210.993 8.47021 li
210.993 7.96143 210.953 7.63037 210.883 7.47461 cv
210.813 7.31934 210.709 7.20264 210.56 7.12402 cv
210.411 7.0459 210.127 7.00977 209.69 7.00977 cv
208.928 7.00977 li
208.928 4.64063 li
cp
f
233.275 7.44873 mo
233.275 11.8774 li
235.813 11.8774 li
236.813 11.8774 237.555 11.7876 238.051 11.6011 cv
238.544 11.4194 238.917 11.1533 239.168 10.8105 cv
239.417 10.4678 239.543 10.0503 239.543 9.56006 cv
239.543 9.10889 239.425 8.72363 239.19 8.40186 cv
238.957 8.07813 238.625 7.84033 238.195 7.68555 cv
237.77 7.52979 237.068 7.44873 236.096 7.44873 cv
233.275 7.44873 li
cp
226.958 4.64063 mo
237.513 4.64063 li
238.194 4.64063 238.932 4.7041 239.742 4.82861 cv
240.548 4.94922 241.274 5.22021 241.922 5.63623 cv
242.575 6.05176 243.08 6.58105 243.442 7.21631 cv
243.802 7.85449 243.981 8.5752 243.981 9.37451 cv
243.981 10.6753 243.516 11.7285 242.587 12.5337 cv
241.66 13.3413 240.564 13.8652 239.295 14.1089 cv
242.818 18.2051 li
242.965 18.3882 li
243.19 18.6685 243.4 18.875 243.59 19.0088 cv
243.777 19.145 243.963 19.2383 244.153 19.2964 cv
244.342 19.3555 244.601 19.3838 244.94 19.3838 cv
245.674 19.3838 li
245.674 21.7524 li
240.189 21.7524 li
234.698 14.3789 li
233.275 14.3789 li
233.275 17.7891 li
233.275 18.3799 233.308 18.7524 233.374 18.9102 cv
233.439 19.0713 233.541 19.1899 233.683 19.2666 cv
233.826 19.3442 234.118 19.3838 234.55 19.3838 cv
235.335 19.3838 li
235.335 21.7524 li
226.958 21.7524 li
226.958 19.3838 li
227.721 19.3838 li
228.125 19.3838 228.412 19.3413 228.578 19.2578 cv
228.752 19.1689 228.876 19.041 228.957 18.8687 cv
229 18.769 229.019 18.4629 229.019 17.9492 cv
229.019 8.3208 li
229.019 7.9458 228.987 7.67725 228.926 7.51855 cv
228.866 7.35645 228.762 7.25244 228.623 7.20508 cv
228.425 7.11523 228.202 7.06885 227.942 7.06885 cv
227.603 7.08301 li
226.958 7.08301 li
226.958 4.64063 li
cp
f
251.726 0.383301 mo
269.567 0.383301 li
272.003 7.14063 li
269.229 8.13184 li
268.766 7.03174 268.208 6.146 267.583 5.47021 cv
266.956 4.79639 266.263 4.34814 265.499 4.12988 cv
264.738 3.91016 263.856 3.80127 262.845 3.80127 cv
259.583 3.80127 li
259.583 9.13135 li
260.659 9.13135 li
261.465 9.13135 262.003 9.07227 262.284 8.95508 cv
262.563 8.83691 262.771 8.65186 262.892 8.40186 cv
263.014 8.15137 263.074 7.65332 263.074 6.90967 cv
263.074 6.09814 li
265.801 6.09814 li
265.801 15.1479 li
263.074 15.1479 li
263.074 14.2231 li
263.074 13.5981 263 13.1426 262.852 12.8574 cv
262.704 12.5708 262.505 12.3716 262.246 12.269 cv
261.988 12.1689 261.427 12.1152 260.548 12.1152 cv
259.583 12.1152 li
259.583 17.0303 li
259.583 17.5527 259.61 17.8711 259.659 17.9829 cv
259.711 18.0972 259.811 18.1816 259.955 18.2407 cv
260.101 18.3052 260.426 18.335 260.917 18.335 cv
262.707 18.335 li
264.044 18.335 265.175 18.1445 266.093 17.7583 cv
267.018 17.3716 267.833 16.7529 268.555 15.8965 cv
269.273 15.04 269.83 14.022 270.215 12.8428 cv
273.013 13.8062 li
270.204 21.7524 li
251.726 21.7524 li
251.726 18.7959 li
252.263 18.7959 li
252.977 18.7959 253.458 18.7456 253.703 18.6426 cv
253.946 18.5386 254.122 18.3613 254.223 18.1089 cv
254.268 17.9531 254.301 17.5195 254.301 16.8042 cv
254.301 5.16211 li
254.301 4.53174 254.252 4.1167 254.166 3.92236 cv
254.077 3.72705 253.946 3.58301 253.767 3.48535 cv
253.578 3.3877 253.217 3.34033 252.676 3.34033 cv
251.726 3.34033 li
251.726 0.383301 li
cp
f
278.913 13.8525 mo
282.309 13.8525 li
280.656 9.15527 li
278.913 13.8525 li
cp
279.425 4.64063 mo
283.268 4.64063 li
288.403 17.8506 li
288.678 18.5542 288.93 18.9883 289.144 19.1514 cv
289.361 19.313 289.761 19.3911 290.341 19.3838 cv
290.341 21.7524 li
282.246 21.7524 li
282.246 19.3838 li
282.738 19.3711 li
283.187 19.3711 283.503 19.313 283.682 19.1938 cv
283.863 19.0742 283.953 18.9277 283.953 18.7598 cv
283.953 18.6104 283.874 18.3091 283.717 17.8506 cv
283.208 16.293 li
278.007 16.293 li
277.365 18.0215 li
277.235 18.3882 277.17 18.6313 277.17 18.748 cv
277.17 18.8779 277.218 18.9932 277.313 19.1025 cv
277.403 19.2104 277.556 19.2861 277.772 19.3335 cv
277.911 19.3672 278.294 19.3838 278.925 19.3838 cv
278.925 21.7524 li
272.298 21.7524 li
272.298 19.3838 li
272.727 19.3838 273.035 19.3477 273.231 19.2734 cv
273.429 19.2002 273.589 19.0884 273.714 18.9395 cv
273.844 18.7959 273.982 18.5195 274.139 18.1216 cv
279.425 4.64063 li
cp
f
304.21 4.64063 mo
305.682 10.3813 li
303.391 11.0322 li
302.631 9.66113 301.77 8.6582 300.811 8.02393 cv
299.842 7.38965 298.822 7.06885 297.735 7.06885 cv
297.029 7.06885 296.478 7.21387 296.075 7.49756 cv
295.671 7.78711 295.471 8.10596 295.471 8.45801 cv
295.471 8.86035 295.651 9.23242 296.018 9.57373 cv
296.377 9.91846 297.044 10.2275 298.005 10.4956 cv
301.293 11.4517 li
303.119 11.9761 304.415 12.6714 305.192 13.5391 cv
305.961 14.416 306.345 15.4326 306.345 16.5952 cv
306.345 18.0767 305.757 19.3311 304.578 20.3521 cv
303.261 21.4795 301.626 22.0454 299.675 22.0454 cv
298.767 22.0454 297.934 21.9272 297.173 21.6948 cv
296.415 21.4639 295.616 21.0718 294.792 20.5239 cv
294.255 21.7524 li
292.426 21.7524 li
291.209 15.1172 li
293.51 14.5635 li
294.045 15.9146 294.886 17.0405 296.025 17.9448 cv
297.167 18.8457 298.421 19.2964 299.784 19.2964 cv
300.398 19.2964 300.908 19.2217 301.311 19.064 cv
301.717 18.9102 302.021 18.6914 302.227 18.4155 cv
302.429 18.1367 302.533 17.8506 302.533 17.5566 cv
302.533 17.0659 302.295 16.645 301.822 16.293 cv
301.34 15.9414 300.497 15.5947 299.292 15.252 cv
296.437 14.4199 li
296 14.2969 295.414 14.0654 294.675 13.7261 cv
293.937 13.3862 293.369 13.0327 292.971 12.666 cv
292.574 12.2974 292.246 11.8252 291.984 11.248 cv
291.724 10.6733 291.595 10.0645 291.595 9.42773 cv
291.595 8.51709 291.843 7.68115 292.345 6.91748 cv
292.849 6.15234 293.604 5.5332 294.614 5.05908 cv
295.625 4.58447 296.742 4.34717 297.97 4.34717 cv
299.452 4.34717 300.784 4.73193 301.98 5.50244 cv
302.461 4.64063 li
304.21 4.64063 li
cp
f
309.094 4.06592 mo
310.714 4.06592 li
310.884 4.64063 li
320.526 4.64063 li
320.735 4.06592 li
322.363 4.06592 li
324.486 10.062 li
322.207 10.8589 li
321.699 9.86133 321.333 9.21045 321.114 8.91016 cv
320.68 8.31445 320.181 7.84424 319.615 7.49756 cv
319.192 7.23828 318.77 7.10742 318.353 7.10742 cv
318.157 7.10742 318.024 7.15479 317.949 7.24854 cv
317.875 7.34375 317.834 7.55566 317.834 7.89063 cv
317.834 17.729 li
317.834 18.3091 317.858 18.6714 317.896 18.8198 cv
317.941 18.9678 318.011 19.082 318.107 19.1689 cv
318.209 19.2578 318.343 19.313 318.516 19.3413 cv
318.686 19.3711 319.15 19.3838 319.9 19.3838 cv
319.9 21.7524 li
311.546 21.7524 li
311.546 19.3838 li
312.054 19.3838 li
312.613 19.3838 312.97 19.3506 313.126 19.2798 cv
313.28 19.2104 313.403 19.0869 313.483 18.9102 cv
313.565 18.7368 313.608 18.3706 313.608 17.813 cv
313.608 7.7583 li
313.608 7.47168 313.573 7.29102 313.508 7.21631 cv
313.443 7.14355 313.307 7.10742 313.091 7.10742 cv
312.666 7.10742 312.191 7.26514 311.668 7.58496 cv
311.145 7.90332 310.681 8.35303 310.27 8.93604 cv
310.11 9.16455 309.761 9.8042 309.231 10.8589 cv
306.986 10.062 li
309.094 4.06592 li
cp
f
104.349 28.1226 mo
112.264 28.1226 li
112.264 29.0918 li
111.531 29.0918 li
110.967 29.0918 110.569 29.1333 110.333 29.2207 cv
110.099 29.3076 109.927 29.4272 109.821 29.5889 cv
109.713 29.7544 109.661 30.0449 109.661 30.4644 cv
109.661 41.687 li
109.661 42.2041 109.684 42.5122 109.734 42.6099 cv
109.79 42.7485 109.919 42.8477 110.113 42.9102 cv
110.248 42.9565 110.643 42.9785 111.298 42.9785 cv
112.393 42.9785 li
113.655 42.9785 114.748 42.8345 115.671 42.5469 cv
116.6 42.2578 117.396 41.8384 118.073 41.2915 cv
118.746 40.7393 119.394 39.9189 120.019 38.8262 cv
121.317 39.1738 li
119.038 44.2139 li
104.349 44.2139 li
104.349 43.2432 li
104.992 43.2432 li
105.616 43.2432 106.036 43.2026 106.251 43.1182 cv
106.464 43.0337 106.63 42.8936 106.746 42.6973 cv
106.865 42.5029 106.921 42.1646 106.921 41.687 cv
106.921 30.7407 li
106.921 30.1831 106.867 29.8081 106.762 29.6196 cv
106.655 29.4272 106.499 29.2944 106.296 29.2144 cv
106.09 29.1313 105.657 29.0918 104.992 29.0918 cv
104.349 29.0918 li
104.349 28.1226 li
cp
f
134.637 28.1226 mo
142.451 28.1226 li
142.451 29.0918 li
141.851 29.0918 li
141.288 29.0918 140.876 29.1533 140.623 29.2808 cv
140.372 29.4014 140.184 29.5747 140.067 29.8047 cv
139.947 30.0332 139.889 30.4775 139.889 31.1309 cv
139.889 41.5029 li
139.889 42.0269 139.955 42.3994 140.08 42.6172 cv
140.207 42.8345 140.384 42.9927 140.615 43.0967 cv
140.845 43.1953 141.253 43.2432 141.851 43.2432 cv
142.451 43.2432 li
142.451 44.2139 li
134.637 44.2139 li
134.637 43.2432 li
135.282 43.2432 li
135.858 43.2432 136.263 43.1914 136.505 43.0864 cv
136.742 42.9858 136.915 42.8345 137.025 42.6382 cv
137.13 42.4429 137.186 42.0654 137.186 41.5029 cv
137.186 30.8906 li
137.186 30.2949 137.13 29.8955 137.025 29.689 cv
136.915 29.4849 136.742 29.332 136.505 29.2373 cv
136.263 29.1396 135.858 29.0918 135.282 29.0918 cv
134.637 29.0918 li
134.637 28.1226 li
cp
f
157.542 28.1226 mo
163.985 28.1226 li
170.016 40.8662 li
175.9 28.1226 li
182.123 28.1226 li
182.123 29.0918 li
181.596 29.0918 li
180.958 29.0918 180.534 29.1333 180.315 29.2192 cv
180.095 29.3076 179.921 29.4551 179.795 29.6646 cv
179.667 29.8789 179.604 30.2319 179.604 30.7173 cv
179.604 41.3311 li
179.604 41.9985 179.655 42.4326 179.761 42.6338 cv
179.86 42.832 180.028 42.9858 180.269 43.0864 cv
180.507 43.1914 180.947 43.2432 181.596 43.2432 cv
182.123 43.2432 li
182.123 44.2139 li
174.322 44.2139 li
174.322 43.2432 li
174.875 43.2432 li
175.377 43.2432 175.74 43.2148 175.966 43.1519 cv
176.198 43.0928 176.387 42.9897 176.541 42.8477 cv
176.692 42.7036 176.776 42.5557 176.792 42.4033 cv
176.845 42.0889 176.868 41.8394 176.868 41.665 cv
176.868 29.8228 li
170.203 44.2139 li
168.741 44.2139 li
162.033 30.0269 li
162.033 41.4233 li
162.033 42.0024 162.092 42.395 162.222 42.5996 cv
162.347 42.8091 162.545 42.9639 162.813 43.0737 cv
163.083 43.189 163.562 43.2432 164.254 43.2432 cv
164.725 43.2432 li
164.725 44.2139 li
157.542 44.2139 li
157.542 43.2432 li
157.948 43.2432 li
158.641 43.2432 159.135 43.186 159.433 43.0708 cv
159.73 42.9565 159.944 42.7949 160.073 42.5815 cv
160.197 42.3711 160.264 41.9551 160.264 41.3311 cv
160.264 30.8213 li
160.264 30.2349 160.207 29.8467 160.101 29.6543 cv
159.991 29.4644 159.814 29.3242 159.564 29.231 cv
159.319 29.1396 158.876 29.0918 158.242 29.0918 cv
157.542 29.0918 li
157.542 28.1226 li
cp
f
197.384 28.1226 mo
205.197 28.1226 li
205.197 29.0918 li
204.6 29.0918 li
204.033 29.0918 203.622 29.1533 203.371 29.2808 cv
203.115 29.4014 202.931 29.5747 202.813 29.8047 cv
202.697 30.0332 202.637 30.4775 202.637 31.1309 cv
202.637 41.5029 li
202.637 42.0269 202.698 42.3994 202.828 42.6172 cv
202.954 42.8345 203.131 42.9927 203.361 43.0967 cv
203.592 43.1953 204.001 43.2432 204.6 43.2432 cv
205.197 43.2432 li
205.197 44.2139 li
197.384 44.2139 li
197.384 43.2432 li
198.032 43.2432 li
198.604 43.2432 199.007 43.1914 199.251 43.0864 cv
199.489 42.9858 199.666 42.8345 199.767 42.6382 cv
199.875 42.4429 199.928 42.0654 199.928 41.5029 cv
199.928 30.8906 li
199.928 30.2949 199.875 29.8955 199.767 29.689 cv
199.666 29.4849 199.489 29.332 199.251 29.2373 cv
199.007 29.1396 198.604 29.0918 198.032 29.0918 cv
197.384 29.0918 li
197.384 28.1226 li
cp
f
220.71 27.5796 mo
221.735 27.5796 li
221.879 28.1226 li
234.406 28.1226 li
234.52 27.5796 li
235.59 27.5796 li
237.742 32.311 li
236.422 32.6772 li
235.792 31.417 235.04 30.5298 234.17 30.02 cv
233.302 29.5093 232.191 29.2539 230.833 29.2539 cv
230.271 29.2539 229.934 29.269 229.824 29.3076 cv
229.717 29.3408 229.643 29.4014 229.6 29.4849 cv
229.555 29.5684 229.534 29.8394 229.534 30.291 cv
229.534 41.4565 li
229.534 41.9897 229.565 42.3452 229.643 42.5288 cv
229.717 42.7148 229.823 42.855 229.957 42.9565 cv
230.091 43.0566 230.281 43.1289 230.524 43.1724 cv
230.759 43.2119 231.295 43.2349 232.122 43.2432 cv
232.122 44.2139 li
224.251 44.2139 li
224.251 43.2432 li
225.118 43.2349 225.652 43.2148 225.846 43.1758 cv
226.186 43.0991 226.431 42.9512 226.577 42.7334 cv
226.723 42.5176 226.798 42.1167 226.798 41.5386 cv
226.798 30.1411 li
226.798 29.7876 226.776 29.5737 226.73 29.4937 cv
226.684 29.417 226.605 29.3618 226.478 29.3179 cv
226.363 29.2734 226.11 29.2539 225.725 29.2539 cv
224.666 29.2539 223.816 29.3628 223.175 29.5747 cv
222.535 29.7915 221.93 30.1577 221.369 30.6709 cv
220.801 31.1846 220.317 31.8574 219.922 32.6772 cv
218.603 32.311 li
220.71 27.5796 li
cp
f
251.395 28.1226 mo
267.985 28.1226 li
269.903 32.3535 li
268.614 32.7344 li
268.294 32.0454 267.94 31.5005 267.56 31.1055 cv
267.184 30.71 266.723 30.3735 266.192 30.0938 cv
265.657 29.8228 265.122 29.6338 264.583 29.5415 cv
264.037 29.4487 263.057 29.4043 261.642 29.4043 cv
256.694 29.4043 li
256.694 35.2964 li
259.157 35.2964 li
260.067 35.2964 260.753 35.1753 261.217 34.9355 cv
261.682 34.6924 262.003 34.3911 262.176 34.0278 cv
262.315 33.7603 262.387 33.2881 262.387 32.6226 cv
262.387 32.3535 li
263.818 32.3535 li
263.818 39.4136 li
262.387 39.4136 li
262.387 38.8042 li
262.387 38.2676 262.332 37.877 262.23 37.6396 cv
262.126 37.4048 261.938 37.1763 261.664 36.9639 cv
261.391 36.751 261.095 36.6084 260.778 36.5288 cv
260.462 36.4541 259.919 36.4155 259.157 36.4155 cv
256.694 36.4155 li
256.694 41.6431 li
256.694 42.1914 256.719 42.5239 256.788 42.6382 cv
256.85 42.7563 256.958 42.8462 257.099 42.8975 cv
257.25 42.9536 257.646 42.9785 258.305 42.9785 cv
261.367 42.9785 li
263.074 42.9785 264.41 42.8193 265.373 42.4927 cv
266.334 42.1729 267.184 41.6777 267.913 41.0103 cv
268.491 40.4873 269.042 39.7529 269.568 38.8042 cv
270.9 39.1738 li
268.614 44.2139 li
251.395 44.2139 li
251.395 43.2432 li
251.979 43.2432 li
252.664 43.2432 253.088 43.2119 253.251 43.1416 cv
253.507 43.0415 253.699 42.8833 253.84 42.6616 cv
253.934 42.5073 253.984 42.1748 253.984 41.665 cv
253.984 30.5786 li
253.984 30.0757 253.923 29.7407 253.794 29.5684 cv
253.669 29.3989 253.449 29.2651 253.134 29.1704 cv
252.971 29.1191 252.39 29.0918 251.395 29.0918 cv
251.395 28.1226 li
cp
f
290.772 42.9785 mo
295.197 42.9785 li
295.636 42.9785 296.367 42.917 297.381 42.7959 cv
298.407 42.6699 299.135 42.5239 299.574 42.3452 cv
300.22 42.0859 300.845 41.6597 301.45 41.0776 cv
302.058 40.5005 302.521 39.8071 302.848 38.9888 cv
303.174 38.1792 303.34 37.2505 303.34 36.2026 cv
303.34 35.1665 303.174 34.2627 302.848 33.5024 cv
302.521 32.7388 302.027 32.0542 301.37 31.4482 cv
300.708 30.8369 299.978 30.3735 299.175 30.0562 cv
298.372 29.7354 297.464 29.5337 296.465 29.4487 cv
295.93 29.4106 295.034 29.3887 293.774 29.3887 cv
290.772 29.3887 li
290.772 42.9785 li
cp
285.461 29.0918 mo
285.461 28.1226 li
292.747 28.1226 li
296.082 28.1226 298.41 28.2896 299.726 28.6196 cv
301.669 29.1021 303.247 30.0063 304.453 31.3301 cv
305.787 32.7915 306.458 34.4722 306.458 36.3721 cv
306.458 37.6626 306.131 38.8657 305.471 39.9741 cv
304.809 41.0859 303.947 41.9795 302.87 42.6548 cv
301.984 43.2246 300.915 43.627 299.667 43.8604 cv
298.42 44.0942 297.161 44.2139 295.894 44.2139 cv
285.461 44.2139 li
285.461 43.2432 li
286.312 43.2432 li
286.587 43.2568 li
286.948 43.2568 287.244 43.1992 287.469 43.0835 cv
287.7 42.9678 287.865 42.814 287.96 42.6226 cv
288.035 42.4775 288.063 42.1362 288.063 41.606 cv
288.063 30.8462 li
288.063 30.2349 288.017 29.8394 287.919 29.6597 cv
287.78 29.4219 287.562 29.2578 287.261 29.1602 cv
287.084 29.1138 286.483 29.0918 285.461 29.0918 cv
cp
f
323.666 25.3735 mo
79.7051 25.3735 li
79.7051 24.3257 li
323.666 24.3257 li
323.666 25.3735 li
cp
f
74.1172 37.5576 mo
74.1172 58.0254 57.5273 74.6182 37.0596 74.6182 cv
16.5923 74.6182 0 58.0254 0 37.5576 cv
0 17.0903 16.5923 0.496582 37.0596 0.496582 cv
57.5273 0.496582 74.1172 17.0903 74.1172 37.5576 cv
cp
0 1 1 0.2 cmyk
f
4.83622 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
7.0376 52.5352 mo
7.0376 52.5352 3.56299 56.6167 9.125 56.7041 cv
14.6802 56.7891 65.9009 56.7041 65.9009 56.7041 cv
65.9009 56.7041 69.1147 56.0942 67.2085 52.7114 cv
65.2959 49.3242 39.168 4 39.168 4 cv
39.168 4 37.4272 0.440918 35.0845 4 cv
32.7368 7.55957 7.0376 52.5352 7.0376 52.5352 cv
cp
0 0 0 0 cmyk
@
27.1899 39.5898 mo
31.9351 39.5898 li
31.9351 37.1089 li
31.9351 37.0562 31.9351 37.0103 31.9321 36.9668 cv
31.8535 36.9639 31.7549 36.9604 31.6382 36.9604 cv
30.8335 36.9604 li
30.1001 36.9604 li
29.3633 36.9604 li
28.999 36.9604 li
28.2617 36.9604 li
27.3184 36.9604 li
27.2744 36.9604 27.2344 36.9604 27.1978 36.9639 cv
27.1953 37.0718 27.1899 37.2109 27.1899 37.3828 cv
27.1899 39.5898 li
27.1899 39.5898 li
cp
29.3633 49.2788 mo
30.1001 49.2788 li
30.8335 49.2788 li
31.5112 49.2788 li
31.686 49.2788 31.8198 49.2754 31.9263 49.271 cv
31.9277 49.1519 31.9351 49.0005 31.9351 48.8145 cv
31.9351 45.8228 li
27.1899 45.8228 li
27.1899 48.8145 li
27.1899 49.0005 27.1953 49.1519 27.1978 49.271 cv
27.2974 49.2788 27.416 49.2788 27.5566 49.2788 cv
28.2617 49.2788 li
28.999 49.2788 li
29.3633 49.2788 li
29.3633 49.2788 li
cp
54.7603 55.1387 mo
54.2427 55.1387 li
53.7266 55.1387 li
38.6514 55.1387 li
35.9253 55.1387 li
30.8335 55.1387 li
30.1001 55.1387 li
29.7339 55.1387 li
28.999 55.1387 li
28.2617 55.1387 li
17.9653 55.1387 li
17.2275 55.1387 li
16.4951 55.1387 li
16.4951 54.4004 li
16.4951 53.6689 li
16.4951 50.7466 li
16.4951 50.0132 li
16.4951 49.2788 li
17.2275 49.2788 li
17.9653 49.2788 li
18.6641 49.2788 li
18.8154 49.2788 18.936 49.2754 19.0313 49.271 cv
19.0356 49.189 19.0356 49.0938 19.0356 48.9771 cv
19.0356 37.5215 li
19.0356 37.2827 19.0313 37.0986 19.0244 36.9604 cv
18.9912 36.9604 18.9502 36.9604 18.9087 36.9604 cv
17.9653 36.9604 li
17.2275 36.9604 li
16.4951 36.9604 li
16.4951 36.2271 li
16.4951 35.4927 li
16.4951 32.5703 li
16.4951 31.8408 li
16.4951 31.104 li
17.2275 31.104 li
17.9653 31.104 li
28.2617 31.104 li
28.999 31.104 li
29.7339 31.104 li
30.1001 31.104 li
30.8335 31.104 li
35.9253 31.104 li
38.6304 31.104 li
53.0786 31.104 li
53.5928 31.104 li
54.1113 31.104 li
54.2822 31.5933 li
54.458 32.0796 li
56.437 37.6294 li
56.6846 38.3101 li
56.9238 38.9902 li
56.2485 39.2456 li
55.5742 39.4985 li
54.2427 39.9971 li
53.5488 40.2554 li
52.8589 40.5156 li
52.6006 39.8223 li
52.3535 39.1226 li
52.0679 38.3608 51.77 37.769 51.4663 37.3726 cv
51.1763 36.9858 50.8223 36.6543 50.4185 36.3887 cv
50.021 36.1279 49.625 35.9497 49.2466 35.8706 cv
48.9941 35.8125 48.3008 35.7222 46.5195 35.7222 cv
42.8721 35.7222 li
42.8721 40.5078 li
43.9517 40.5078 li
44.8262 40.5078 45.1685 40.3477 45.2744 40.2769 cv
45.564 40.0864 45.6572 39.9106 45.7036 39.7988 cv
45.7163 39.7554 45.8184 39.4717 45.8184 38.4688 cv
45.8184 38.1235 li
45.8184 37.3892 li
45.8184 36.6543 li
46.5547 36.6543 li
47.2881 36.6543 li
48.7705 36.6543 li
49.5054 36.6543 li
50.2354 36.6543 li
50.2354 37.3892 li
50.2354 38.1235 li
50.2354 47.3789 li
50.2354 48.1104 li
50.2354 48.8447 li
49.5054 48.8447 li
48.7705 48.8447 li
47.2881 48.8447 li
46.5547 48.8447 li
45.8184 48.8447 li
45.8184 48.1104 li
45.8184 47.3789 li
45.8184 46.5771 li
45.8184 45.7656 45.7393 45.5352 45.7393 45.522 cv
45.7163 45.4604 45.6631 45.3535 45.5195 45.2153 cv
45.4072 45.1035 45.2949 45.0327 45.1914 45.0005 cv
45.165 44.9941 44.8887 44.9146 43.9517 44.9146 cv
42.8721 44.9146 li
42.8721 50.2969 li
42.8721 50.4009 42.8721 50.4961 42.877 50.5781 cv
42.9312 50.5781 43.001 50.5781 43.0684 50.5781 cv
46.2349 50.5781 li
47.791 50.5781 48.9941 50.4077 49.8013 50.0645 cv
50.5845 49.73 51.2861 49.207 51.8896 48.5122 cv
52.3926 47.9424 52.8784 47.0962 53.3618 45.9878 cv
53.6362 45.3652 li
53.9058 44.7378 li
54.5503 44.9673 li
55.1978 45.1919 li
56.5723 45.6733 li
57.271 45.9253 li
57.9697 46.1694 li
57.7168 46.8638 li
57.4692 47.5562 li
55.1089 54.1606 li
54.9326 54.6538 li
54.7603 55.1387 li
54.7603 55.1387 li
cp
f
38.7461 53.6753 mo
30.9673 53.6753 li
30.9673 50.7695 li
31.6484 50.7695 li
32.2764 50.7695 32.7036 50.7207 32.9297 50.6177 cv
33.1602 50.5166 33.314 50.3687 33.3999 50.1826 cv
33.4839 49.9941 33.5264 49.5459 33.5264 48.8423 cv
33.5264 44.4038 li
25.8833 44.4038 li
25.8833 48.8423 li
25.8833 49.5459 25.9116 49.9785 25.9707 50.1494 cv
26.0742 50.4009 26.2241 50.5654 26.437 50.6499 cv
26.6479 50.7285 27.0713 50.7695 27.7075 50.7695 cv
28.4106 50.7695 li
28.4106 53.6753 li
18.1641 53.6753 li
18.1641 50.7695 li
18.8574 50.7695 li
19.4438 50.7695 19.8545 50.7207 20.0864 50.6177 cv
20.3179 50.5166 20.4746 50.3779 20.562 50.1973 cv
20.6514 50.0156 20.6895 49.6201 20.6895 49.0107 cv
20.6895 37.605 li
20.6895 36.8931 20.6514 36.4287 20.562 36.209 cv
20.4746 35.9932 20.3433 35.8394 20.1602 35.7378 cv
19.98 35.6353 19.6235 35.5874 19.1025 35.5874 cv
18.1641 35.5874 li
18.1641 32.6836 li
28.4106 32.6836 li
28.4106 35.5874 li
27.4663 35.5874 li
26.9487 35.5874 26.5977 35.6377 26.4067 35.7441 cv
26.2183 35.8511 26.0806 36.0024 25.9995 36.1953 cv
25.9229 36.3887 25.8833 36.8154 25.8833 37.4673 cv
25.8833 41.1245 li
33.5264 41.1245 li
33.5264 37.1992 li
33.5264 36.7163 33.4937 36.3887 33.4365 36.2183 cv
33.3569 35.9775 33.2212 35.8125 33.0273 35.7222 cv
32.8384 35.6313 32.4185 35.5874 31.7666 35.5874 cv
30.9673 35.5874 li
30.9673 32.6836 li
38.7222 32.6836 li
38.7461 53.6753 li
cp
1 0.73 0 0.02 cmyk
f
36.041 32.6836 mo
53.105 32.6836 li
55.0728 38.2046 li
53.7495 38.7002 li
53.4189 37.7983 53.0557 37.0884 52.6636 36.5737 cv
52.2749 36.0542 51.8062 35.6172 51.2554 35.2578 cv
50.709 34.8931 50.1582 34.6558 49.5977 34.5337 cv
49.0396 34.4077 48.0313 34.3486 46.5796 34.3486 cv
41.4854 34.3486 li
41.4854 42.042 li
44.021 42.042 li
44.9565 42.042 45.6621 41.8843 46.1431 41.5698 cv
46.6201 41.249 46.9453 40.8555 47.1255 40.3833 cv
47.2695 40.0356 47.3403 39.4229 47.3403 38.5498 cv
47.3403 38.2046 li
48.814 38.2046 li
48.814 47.4131 li
47.3403 47.4131 li
47.3403 46.6187 li
47.3403 45.915 47.2881 45.4077 47.1812 45.0928 cv
47.0762 44.7847 46.8823 44.4951 46.6045 44.2158 cv
46.3193 43.9399 46.0156 43.7524 45.6865 43.6499 cv
45.3623 43.5493 44.8032 43.501 44.021 43.501 cv
41.4854 43.501 li
41.4854 50.3188 li
41.4854 51.0327 41.52 51.4644 41.5835 51.6226 cv
41.646 51.7739 41.7563 51.8882 41.9067 51.9561 cv
42.0581 52.0283 42.4702 52.0615 43.1421 52.0615 cv
46.2939 52.0615 li
48.0488 52.0615 49.4233 51.855 50.4111 51.4307 cv
51.4023 51.0083 52.2749 50.3623 53.0264 49.4956 cv
53.6182 48.8145 54.189 47.8584 54.7261 46.6187 cv
56.0952 47.0977 li
53.7495 53.6753 li
36.041 53.6753 li
36.041 52.4092 li
36.6387 52.4092 li
37.3433 52.4092 37.7808 52.3647 37.9448 52.2744 cv
38.2124 52.1436 38.4111 51.9341 38.5503 51.6465 cv
38.6514 51.4487 38.7007 51.0132 38.7007 50.3457 cv
38.7007 35.8906 li
38.7007 35.2295 38.6401 34.7876 38.5073 34.5698 cv
38.3755 34.3447 38.1504 34.1704 37.8281 34.0532 cv
37.6592 33.9814 37.0645 33.9458 36.041 33.9458 cv
36.041 32.6836 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 13.0.2%%For: (PALMER PRODUCTS) ()%%Title: (NEW HE LogoFINAL.eps)%%CreationDate: 4/9/09 10:27 AM%AI9_DataStream%Gb",KGs`6:oC2V\p^ZgZ5p4D-1E]:b6pVCR4tn5a6un\_fB84PB7Htn\p>]S,fB%"#oe*!C9">8]BenQao$OpfkXQeNO*HmYI0T4%UfL/$Uhn(GXTZJqr;<nd6.d'j8W1B(&CF98*rKV3:>57J)k3W4@J\>'h^nNe@ACHlDO/18-eGFWgRY`OmT6BMg+Al3P>^[o=K=</%VR!U-q-n5*ZgAeMX0o1aCtD>9Pa=9>Afo3nY<1)8RcEi>hJSQn]h5dFNPin^*?KFoJN/t1+,8T(0FU+5^eAY?rJNW[!)4>F@AaP/%@9BL_rQNH[]pFH&6$QQ@rrS4,@4J_l/XHI$r`f/B&=ul`h0,c%D)OT,6UO$mdQjPX4DUhJ@0I``[QS*s0Pm#Q!ALlMFPpRW+.edE%[4[Fd'k+q^h8PU(^"5S97lKp;7j]uBs&31u)SlBTR.u/aG54)ph+H?L7s;5RT>rQ8HL;Y"=Et;R1G?.ndpG?eE>=MNHE1*3L*RYN%OTr@i+7VQ0/hF0D>;6RO[GonHb40k@-_Hu#+qssSL-O9T:<M*V\(Nd>akX(c8P1c*mU>d<+:^=!$XX$"kgdQDlUJ8iF!a0R2;;tK%_V/29dVXoM&dh*U?LYQu#Y1`b=kEnODq96E!c'7B:d)JXeTXX#_DXt#G-KR*)b8.3P1p^[VgZUli0Uh8g-/2Fg.RiW@&<u9-In<n%\40*#YpEAFOV![aq>qFF+67[M>s55HemR@b35tDg]3:'0>?E>H^<)M5rRb2e?c4LS]A!c6ML!Z3cL")C$mWHTUCN=0HhERlW="i$%>(4TuikS8(Uq`$FF\C)Z@lUH#W$f?kW-&=BZYfX.H2'N.n9Ze.:ts!^[Z+(")kYhB4Y7GS27<!;`:?%gbOZ:go+9+:MFFB["Gd]o%L_Bo)T^X=<"T`)kDtk?XE]M(\jfi;KLJMqN`$lJlBsHlIfXb2'kJ\XQ+c_CdieMiUVq@0)g\0DbIRbq/'7NG&*#"BtT&GLp46#1S%n2lZ"B7ejsR.*3:Kd4J'8;ZJc.-$-Q4,t80+r&(NIF;q0s+lBh_XE:Z/0^&)#<A\BVHK]t_XH!;7S__Pn&-1<Nh#\Z0a@SD/0#a\%7nU.?1hq>+.u$8#$cg:<9X@'&EI@O%s2*12qVueZ*$P(tZ#G*cSQ:lKK]\Qr`u\@fOE6^0?8LT%Af\-ihKW@?jMX3%:4,pR7%)Yb%0_caLi948uEHKj%7SQZuI/"_e8A9(k1agcg^EX5KDJl$lRrsKuNd;i4Af52`@;/*S8Q&(p=>+nnC#4\.RW[n^jpa?6(#cD0mterr%'6S%ccflNk:7=c&9P[CE6PPFK+3AGsmF5`cT!^H(/=rb1p.;humN_PFer^BGVFR]2ZQ-(LEl9bjXeXQW?C>0gQfq=?dkp,Mr(0r:%<<"M-SjYg-TB";Ud80Tt2t+<\M13l;+mACY-iNXbqV1bTDdWIdAEZVWPQ#."oQTqkrlr^No)so!d_A,"rf2HU5=>GqH]Dlshe?B\%DuPZD_Y>Z0kIALDOb&pa>*FMM)'NS8c=Pp*[TIWgX(VZ;d<.3q+fqC]>c3qolNaPn,!@0\-ku8"Y"o7%ddt/f.o9S=i9*6F^5A)R%P_tD1/`FH<ORZVsn>sFM&@NutjD&:S;1RPPK#umPr'!%m,[L8iGPYP>%UlBg!W>aMYmp>r2]UK\IUYCs5/?#p/;DO$I"'@GA;Y7/%qo6'()t4gne+2S`E5Xc,8Wq3tr[m)L`3LKSFu2Zc^ff]hY]opQ3C+-_DI>Yf]I8<i!=Uut@)_Ua;1MXQ>WZ\3($4]\N2[p'*&[a+%Xap\9$0N7AM?8fAcAV%OAe8D#-53nLCl_n/E0!#eVDLJ=AK2pcOQT:40k5/a,7n5-\Vj]c.N+I"=E-2#!;3/['T"XD*G:<,_tAbp%n6j7ar!=Ue[=C8)%$D+]Q)J1#)@MPBP-TgP5YR\^Tk'>+7@5>f8dZjJkXhFpiN,T[OR%[l"2:;C5`X0SOrh\i$#KO/k6Bo'ETC%I%oq#?f,(J#81T4.gWE$=.no(RBUC@e\Z\G[njIGk%=.R'=r"_kWdKPQ)"_`E-"EJ$n:89Zn)"BoPOW'mg16OMZF5J,iFlcEMBNetN%BjC[siCOki@L-F;IS.0p[E0`*[?TJ,R^+JSDoA.2@,JmC90%$Q1G<B1o141#o7?Z^*RK"\Zc_lE/FprI?:_bPj;\3fN,4Pb-b[?!%6bSVn5uO^pQ.DS]_H;5gh_qZ%XuAXe'Kp+<p^1^4fF-/<hFY:lc<[E?Y!Ws+<o.<m+T9U\-j_0ZW9_l`qJ+!F7H@UJH-/[WU%s8E%(8^r8%F@.kj+d(bplsq]B#1=8H+bC0S]d+DZ^sO;JKrIY1`sDR1&;i=ArNHjGtX/k=sm,"(9)_b_\Rc=&<-lS,48=C)33V5G=\NW%\XJ7%F]9Jh+/Qf,Q5QtJ,V'`]A%:[,#?uI>WV'.i4Hauq9ZdEJO@/(0.4D__aTbU!9,au"5_eDJZ4#S(0]#aC/%Dm3Em?J^-28:e%Rdpjc`d,Smr&8mDI-tUnV??;FJ^KBaH\19]&jH9]Ahl[E[t73+L8,n6MAXL.A;CnUjnLH*-4b[0nNV9\&2r6AU+%[]?qI7L[.u]0%3/f$^_Li7`aTY6=GZ1E';1+E"M*=mub)&:'`;[L9Vg8iT#AM1^`aOL=8,'-XW"i3;&.-:W!np$uD?JNP>^d=,=j?_$n#3M]08*3P%e,KOr_54Yr@59Tp;2@H#<Y6lZ5OBjSMSfHjo]'r@_jD=VT9kN*($#!1>&4$t>&WL/MI&#T(SJO5ZAdilI$@..PK4-Q\LVMrOZb@4%WjH4VHTnm?b#\i#>%4uiWC0lmbG*KkM+pj!P^!FM"8*VbjrA&+#,>!JA)_u)^fOk@oPbeClS8@a"Z-i0;*e/5,7jWV-r/HZJ3PD0%g*@RCBe\M=4NWu4;\Y,;1YOs+2e,@d<6.TGBZ9p%odtS9fQ$RghC?ruamudO`ikn,][OO0S7d^J7G3lJ6<[g'IqTLp8"@tcnn]e!%Zn71/0RFM^O3-UCULgh-OoHRSOX=U4ZAR)M6R7dKa_-M5c>G8MGZa)EnJ5lbh'fVnS+TI;@NVtI1=hTXT'SO8o?G$AX/I3FTAiB'%Q!7up7X[-;SJ-lZ"34.8-%OY]!kHAAJ9!&@n!i>]=^m[dN6``?3E#Ji)5!k<Q8'q17f3B_9BnIQmD2qknKQ:78Tg/9DOFWANBI39%W(6^-]PA$GZl%-APRCC=5qrOYSZh$1Q5#59./K$oj[ZR/c`DLDJ'7U$@8iaEZQ$$uA6k9$iHbZm:WZiDVOZYRJDtX?HYAV`^G5_D%0]h(+B`r7[V(YfV7J6co*M]>VZmhc'29I>\F-XL^jN*&Kh_qZBS2P\#[Rpsl)5pdte3(qaE/m)OjUA9nA5;&MBIon9iTNRbJ<EKl%AKW4U@c!:`5`E/SJq>gW`WGaFA5'@k,_qc-6faCH0!7?`C6$VO'F1c$R.E)2PFU_i3OrUr8TD)\>[2SmadA*'3i%CkgOLPLaV.c7%ASD74,cLr50&WZUB007lPf)@.-^)uLMCm5qdU/[;.bY:d_BkT/>fWPccQ%41^dJMij\^Tp4AcAl*m'23UetGoOVRo?JAgMV/TLl3%V_am<r"$K6Mne4p-O]NPTYI!J6A-jOKM/B4K#tu*R.-".'@pBr!,N0b?%NF0aXETA[[2Fhmf_FLPGR.!k4(AMS)Y'5Hfar=+6OAO%J=f=r_#qjm`1bDa-RB=-iX0<u1^?o)/#r0<XLe*kjA5\?9TV7\l-a:`kWG)/Ob_ib39N9$*3G-H.WR@uHG'_IH[.V)T)9*JH&./p%Y3F*,p]P4FUdVA&O9qZFHJf/UO+'Wm//e*GOYtE!R@9=PCJA.U[p8SP4TMn9YRU\`3E_g_-q1Z&8/6IRcfJ$DTZ4'd$R=blnq*OF%^63ZTB($8[q)R[h[PHjIj&J=k[U@q51+64(P%EWT6%^u71K&r\n6lfUpE_0]2h>1e55HlX<uCi0?kn?RGD`>'d*b6`")8^R)%tQr%'3\&?1fD+U>5Vs9#K&$$Ih(-R/!=PS9^WQ>']e,m.(qon!*4a5fl;[M3Ch@T:dKoS,@!aa39gam6p]3LOG$14=jk[\0Bb3iod%HR%8FA:F_AU:'9?oP$\\*V6?f5Jb9BrI2nZi#*5Wgc4S9<=+>]2'F&j,fPQPM!E1gOfXfVq,r6rA(ma)X"SS?!XUNGDu-:)8O/'itd=%-c#1]k:Kb=A;jNAMK39&?N+i82^//KQGGR\Ofo5*/RY8l7oW*:QJV\8VYp#+'!(f\5T!l8idtWQYc452b`U+?qr^n4"?%GW]g72&%C9*kO^<ih:/h$[aCY!LG]#4E?qsA!tGt--Pn++S/f^6([Y?1^Or3?X]eHTp+cFoH<r8[`Z%j#SqS%[Brj0UhUOJt'4_UO%6H_/C2%_FCB.Qr5X71IWkq\l8P>&hI=g[MDB]4)3fqqH7S%jBGaS6=U1TIQQmr]A\!$LLo7<DPsf-?KXFne83\mJ,PEbRgL^?Ld)c*m)oTm%]`uaRjdm1'?r*26GN*oLm,:+C_b$_s/(JCbZZ`<j?7fO7_%k:=:\<ulSJ>q:Fr7WRJ+Cng@em'Rd]?G1ogg!2OSr(h>:nID_dAsP%=<C<j+.bCFp"6WCBVFr@X>O3:-8hUKW2/:9g9"5JELBS&N='?TeE:K`S+RPgkXlkeQWg(n[sMGGR"l!d\5m@/g*m?[,glO?r.7)t%2b=/$7,;?,N,d=UZ80]PasV44Q$UY+]P]Puoru:G;!OpJ`Ao0.JZj8^kB_3s\YXMbi/d'jb;TG"9KB*.eAom)We-TCF"=t5)JS*<%m?IN#!,n1'c`N#=%+9kTJf&a1+)H19E8Wp3j$\WP,9dT\H#Lu!H]XnfFp`[1VN1t6d[go_#4blbDu"#16BUb"gI025g(I/2liC3S%C^4VbRcBkI!?pXs;uKr%VXKFBNk)H0$qO9)$=UIJ14@VE?.j@<mM%%b1=@KXOrcRmF=X951=MP)8KNJjAO&lk>%nN3&[#tt&nn1k%@498PVaq]A:)]St$LF45EUb_,NQ_D!KP<K])Qm^TVBXrq+V44%"#FnDM(@#Okui]*bP;2^cnY]iVZni3!:o>%DCs15Wt&NF=2_!A%J052bY@cC?78uP,1mqR(//2@mgH8t(FA+sC1)*a/n8&=**`%))S;;\Go_Q.b_A*)mJ5nH1$r!9Rn6tH)!S^-a[_]HSbq0!l=TH9=%5gscg#I$*Q'<j'[7L-e@RMm+k`s^C])hD68gIs\pTd7je>WFRo!Y0Hc&2pOW7kfsoQ4ed%73HPS#!.df^jm;\NQb!">4_o*d3+sd%AU6t5r4igg&B)IqnLtqe[<FpH4iM6q#[a9/2KL0@p/QGc?GMih]:+9;\ulfQ9Ar3@@B7*nb>l=X1dV4sYJf#cd\atdKJ0.\!72$c%D.)`OgK-YtnV!?Jhhh\i;">ftJJ)0k5UX#*cES&i:kq<g4BsC55f[gY[pV@`fE0^uI#%M,4AFH!%E4#7(mZ?XfIT\0-O9tjjI2Nf%bH_7Ya&->&>nF7]"bo-4nS>[dY=LX5cZA6Kjb<N>D,tc%emuJnhM<`\iO_j$dKjN%,:H9m!a<H?%$8FQ0\CclXo\C&=9o=A@+4d#%7DO#>Q*f(d*<Q]Q0*IXIM<f]M4)Vj^(e>rmCp;qX&&Iqg63,YZ4;KZ01`_+`20d-g]ITX.=Nf'C0`b*NASZ[_`6iR4\A#iQ/^I<[%a(>,[i8P@M!1S^@s1g"e!?fUVI>NJeZ)R:g_pef7O/+me^`3KSXX5$H[%(8(FO)YBfQ7c-(RL7c9R.6R3ip!.D(kusE0p_]8t(9I%CTkY#4]dH,,9e7t!ENLu38>Kc6RrZ"#lr-$<!5=MJI_Q_0MU=eW4AhH'p'750J\pA.MC)9I%G0DnX=t9*A]<>[f]7jBTHZ6NZoU]%IAqLG\0=A/-6D>Mj0G()Ok/j`OJt\\C)ROHfId7NqlN!pJF1-^?++Ss&4@G3XIfU[D>QVX.3\b";m:S:L;UM:CQ.5'PeU;0!ZXFO%)^R.N!ZWes^4Lo-ArUla<rc?QI:TX@0>PQ[kjq&7gl2ZeZo!?LYZ^9XHP"e_5fp<R39-A5BFCNFZ>DI'/k1'/J0h-I(BUMM)ONhk%\gk?h`fLInC"j"tA'i^=:`*BJ%FRTD3_#_L@fi7`X3nLlG'4SP%9u?=%X_jsbP3&h;;?eGKaq<\2@rF2A=7#$mohbWNaa76RNOg7%,FM.6!"@l-nce!P_A.g#%0XY7Xpn%H,%kWg#$eCT/9IKH-sXsUL^mltRgE1:N^6ahIfNS1g973)mjKk,/d?YTPMh67c+iQp@%]ZB%N.mZPW/K(ngEe*+6Eod\fK5tP5VRsWHWE9e!;;*c@uPrTiMhsu&-73sB+JS]>8**5*-k!T7c)sC/EQp8PT<T-3%eB$<ZFA".3Q-E%-=D'*B_ass4]`;QADD\h:!KdJ_ISNP,U4-cBfe52"S=6OEsMY$PD/gS#M')u"\/f`9u.eB":g7J.FZiN4Hg5.le4HTLc-!p1R1:Q%Pgh*(a"dX\7S==9X,]HgoU%59B`Ku;Nd>4mcNG48:fG07/c^<h,<EY.&8A@iM?=qf:*K[G=3cARGF9k@!2'q.Z$1%r-d[NNgm+uV%8"d+d?s<dIXrm6N**0[b1>&ONBRP[:BY7_sj8+uC+KilL!Z_grct$/G:#F>$TY1CoSB1m:(aqffZ6f_X]?D7.-\>a\AN<R1W>k'2%)K9-%'[X_?CMIH]Eu[.)*DF,@0Yq*F9M\*%82FZPn/RJ(>n!r#76lT5!;)5;Xd5po!Mb_]:MgaG"KU_f2un"OEPX@h;O:d&9q/!k%JFFK[/N!P7eIL%uqn8c?Nm3kW\hO6nLXV?8N&&74DD*P6=`r'M[*^]EpE5H3[=$,"Trep2r-184"L.-3&-/H?\8Dj+mL>5Q*J"uA%Z#D;N4u0C3G@8Ma\@md=!GK"`9)G!r1@qBh2M3f8,iJ7Ooa$Y0(,[*N!SB2R;-3l#BY,<YJ2.UjWEk[GDOH#nYrRPd5Zp5QgJTnJ%&-g*i*dT[URfn<\Ub3:B*=@C(5H[EXF<RJXEa`\a?sB!!LXQ8,lO_[qeL^bo02H!*BEAM]NpC8\@lE'8"&%*sH.G#pfo564d8j6O%":@Y[Q5("JTID]'Xs&(PbWCr')F=Ii`j$Wu!CnM+.,/8<4E*JZ^_ThE=o`ZO`X0HnRch\Ra?UJ?!9agJiQaOu"HQHHa?gL?!#o`s%+R-0GY+_UN<]P\u/;_*[=Y-ulfV*P@_0oHimsIgU$"sPp0tuR$)M1+)F$TT\.U5*"&[U6qKW*"'2e=]E/.i$O'*F+-&84,;MDcb1%#dbH_1)<@nYW_AQaf>M;<?6'j4dSXrURu(XL-C4Cqd=QV4ialo5e-/V4P*sF?uaiD@33>i@#2BD7A5]rE@CuUnU1QTWnrJ0\L?NI%-D71Cc-21L6OLu],G;ur_]Zj/RC*dNeC>W_4JJR-AO,r;Jau\=N$92YN"XL6A/G,uCmPD5ctqV0qYM(:IN;'Q\#!h>!9AMjmO&Sd%ki#tkLk%gI0V6E&!=0a7L!+!k-.#WGbSV*T'ig=>M'kDmF27=F%urWhJJjf#7F_qhCoBH9JL9sq1Lb&"_I0)!Z3LAX7pAAW;[&:m%X,^@V"Mb-7**_)+BfH)e_dK[*Fa*tf;?dW^k$T%B#"R.V:I-?0*Lf&cPm@B,2\nF*juEG=*@S*``aVGh*==m)R3F-`5g/>bR,ZYV%`R<1S10$iB)6S"^!;$>!)HW3M";Zh&4!nu9!:0)7R)Ti#fi$ZVVKdV1<VB[_;#ntK3=:WMh'Lhs#&@Y5'kII#!F&>PF9>??rcoY-%9fED@fe4HY*bQ28jf5J*_9p:9*ttkpSt#f@,fP=X=+Nq7YN.t7UUDu"J]IEhN`u\L?lWa!i![?!W9!::6b$N(\Xif;+E[lRgX31K%E#Ilo*;I&1D'YKs5bQPC!'7:#\/;smd'ap68J]-$H@B*n("Ij#_1;pr&?)?+Bg4HUdg5dQ'V#!RrWel@MbS=nPln60E(QNLPK58n%j/=*#,Qg;?kg7Z<j?m<eBPKKm1BC95@He\1=#S+ZdX!YL0%U8?o9==u</5bIb\1tVF!GjV*U(Q+0Ie#460-lJPPk\">dego1:&3u%.LjON:64!/*HIC0i3XMT;)'3/=)nl!%h+N<RtFTAH]`irgsF-:6=NV&+h*,mid#V\%'Srp&R`R42of<LY>Su"/FTqHR)0%Ni^'#*%Mu]ek'JclNlrIMM@.;6BblX]^>irg_4(2<Yc8Ti5M!lbN!'sVX!5o&Q.(9pT-QsHoF7VXu..k^f>c'H">>-Um`f$o(;)!Z2$;kcR%Qig;g<cL[ijL"[dL\1qkD+7(s^u18u^&pteI$<Q5gA4fl>6(\*0UXO!V4dm$+2l]$`:UPX,1H`>;!@HM-G7hJ>bc.L-Ut'a!^0:g%*OY,85g/4d7\jDtejV]-mKcmSMPeA5FAq?VJu90qNo_dRLO=s`CNE&&%u`:+-uK)?UsD`dV_UEp>*]6,@PCXHJ'lF(SM8"4*]*:7%_>tcMP]e,L'+f_t`b7I$gD'!BSa@hE9K:D\',Wj:)[-LH:m""<SK4O5!47De\fU/sJpkXM!t%;L93CCOo%=:jbdauf!j3=n?0,8k%W!j#RTJhp\2`A-cMjOe.DMue[dBMscYX:La0l?F-KX9r2WlK3]l!faW$Gg]n._5%3(/\3_Ts?c\\b)r>1a2ok:V]gC(BAiT2rald%CXN?E%G0VO(r;Hm8B*1q-M^cqj:sRQ[E6J61,]iLTQ5aIKi+&u$Jsi2!Zi_W[`Yh%9GnhY8qMqo^>(s35Z*jOHs(5q79+o@O("Zu%;XS;"!`Q=:#Y[L;X)\uSb3K;F1E]+8@%`JIPkj:^&]#0$a/1RFGiK8o:e=;f`.eh?joa6kKcce)L$LdCrt#`48IO.iQp@I^(0EIu%*!#S*AP?)+g2U&*Mog(7WNor0%6m[(6t"gK@_*-?o(Erj2N2Pg8F7s<F,tNNI$Zc\YAB63g)Q58C/7]9)EQ:-$<;Vs06kORZWtLm%?#A4n7L?jQi4-Z[\_Idals?NW19.86P@Y5NZ?2argTSgdTF6^MOq&c&7-,'(6i[KZc,m/4O-0O;1L2aALhkYE@Of8&ba:\8F>sqA%U<:<TX`epjgeq&Q:qK2QB:>oo2S4]Pbop'FY1.oI@.IV<MJTX&OEt)HX#U4ld#n-9N)p'a-F5#AW'nG\%8\MFHEaD_(9?R@J_1[*%&HPf5f"cT!4t6tX9e>E,iYLZ!&d"!O+[#@m2KB?GWOPQ\!9i,VK1klH!^`5=+B0Wg2K'+7B.egaQ8VA`Sq/G@ZIqKi[\LX^PZ@l[%IG*lV<Z1u*=OBqQL<ZVK@^X,S*NnZuD%Ru5@Imsn@m,5Cjkj<[PBN&9huHE6//*'k\Eb9q0Z6mO]!8EKrY<AHJgb'qCMo@-L7Z17%Wo`.W$h@i59LkQY#^4k_9<5:l^es%8q]UMX(^+sRYWU`EZqZ0\PKu$_m0Gufc\aVG%WBfhj":Dhgc%36n[7Bc+FnEU[b3P`Y0UFp%;0?-Z">OJ\LfQ!bmqQ;:is(sT4F5B;:U)]-eJnZ7?1%A[?+gKImBI!Y#"97-mTA`Tj4P^[b0ukqA/qWM=O7@=*189l"h<S0Gs3_W%"&RMVOFZ3(5e9!$E-6D]@%F<:SR-JO%to<2At,@rEXaVi@PJfD6NEeHo:i;Q/r=8BQ1X)'/WU,`=LB8Y[FrH:WeEi`fiMoC'8WHE%pZmoU^`fK.:*H:2D*q"8JUeLSY#tf[MPg3RBn.kse'_[p(.dB&'7!BPr#W'O:FEeWjOdmWIIN9W32?t@XaD5^/*PcSW\/=W"E=U3%cRkCe"45W^p2"kD&V,nD:E`+m0!K*4[bnD.f/G^siZ37D$Ie[CFen^p(Q.3Fk/W&o=b.llWj_TDN%U`t3iQtM!0>p?70)Z4.%o9;%6O#*Er$&:M1.O=JJ_GH?'k-9\BBqO<NCkR]J2UEm3(a1UYi+Wn=tYlPn@fct+qsH_PMM9K\2,e<r2Se.aHiTZ&UKo_EBRs-E.GGF%f:KOMNa:mI^B>1#+BDt56S:Y94#efk,)SXLb@Nsb#'dLYLN.Q:6d:tbko'pUj4KX?\MRJ5DXWt(I6a8*62Z6XDjgk#L]@YkH4M5+%pe26q%QjgI@6_bE;'_5tD7%9;FA6qfZ4OF=^ok`/g'aDVXH(LsUZ,t<BP/3DblH?"Dn2;$S:,:8_!8S8oM%4aau=8tfSO9m$06[8%^/tP[,`VmWFd>rak=HgM:>K,?4FC"sqs4E%T*i:8[Q#u%e,.3!e\`Y*L)s<eZQ>_g&VR4N$Y6hKB0o[;>[INn[O*GS3f>W,Wlfsg%/a^1RqA).=;??o7Fl<EQ!&eQP1"Rt-Wc$-8T7ENk=nP`cNPK/eI2p,CJs)]nT8ECc0;,-CAdK6Mhe2't0\THf)c(4MU_l&pGVFgX%(]fu?4]r8X\.J5s\nVAt3tJu&68RX?HKW+golT`4&4P@WoE0fhQA?CLp$m!fDIFYl5*n;ZD37*FWXX*OJqp#96%b5O&V9.^K.I?B%d,D;?Cl'E>:*"njGbQNi+!77f/95<r3(fcC+9JcTY27`";--#Ho5)Pp,ZS!W-(m:Z-#jq]@)h8a?jR86Y+_.l#k2,k=ln$V1ih,%%)^8[kQnNRYaRa@V<.`X1-%bY\)?DEg]/a4IW#[CO\Z/1i"FLtQg8lK'3kAmCmRk8[f65Lh0nF#-f9N7:Lg*+-ZfX(s>of8T>BA_C%1!B2OKrQVa#+lVQTZR*2:>iE4E,^#jV*L>3#hREL&2l6Q<LP*S'<hpIbFrQ!>Yb_T\HDWWjc_d=NCX2Vbf<U(mnk2=O36]=8(L*>%.mgnUOVi>JNG:q)D,p`pC+UDh#pYLdF6c(uZ_6jk&b&m7.3g36XY@0jd3Uc0,GgAD0-aqgQ#.ui-W#-^8S)J."DFXgV,kPt_A.Z`%E2u&@KWS#V)*G;NG-'BX<>=f7O>/O\2`arMYb;i>,=mb"c'WJFBXf-dSgG$4o=pmYPB>a>$fB3k-e8UF)q+"f3>(cRALPObNWM_K%dVL9RYmonb,N2fu3`+7H/01.s!4U:b45]%_#\(Y!.k)C<cR[HR+]9.IT<S'Sl='VPo%4r2dG<J6c^Cn1gefFO?X7^6BhV]5I94Ya%G\AiS+pQO31a8tr<macM25toPARUmn$,168)`khAfNcU@hngG%8%tsr[);#4_mA>rJ.L!$Zo>$F:`Dk@0*f/T^<>-tA:i#5b_Ip$%<Oj7_PT01mjK*m'WA0#J,+pTYaA!*i+0JE[=H:EGVY9*`)#7ed9-eoVd8c*_?17l9a7=qM;816;7R<254"Q#T7@20\[L0!d_<W-%%!:NHuB.c8jTeE(<'2H]QW&7C1R3\M@GYUr@#Ulb:1d$&:Mp-jr=#ECq4M!p/F'Ah?=E!:-:M$D:_bFTT)$6B\Roc)m0]p1IM?&F7%?n,Hr="%^:$+RER`>3VeJLu#if8m"B*2nSG`EF`e<>7C&m"fYmf[;eVgjU>A\k)rm@?3ce9:f9ubgG#eKh=^\EisenKBfHLBPP.&%GO.;VM9UZ_l1gNa!&h%aF9A,hR.\>cPODE>i?-909MHXcEc0k3bc;gYDI#/MQ=k8)!t>_jUS`sT_H4d"Td2\S*F0I.>ci4_i>23n%fen0%R&N3QT[V+i\_oOh^>>BtHAFV'"s['Y[t1FZ%me%$Y4\`G6?ku8%s1Oc&r,\s$+N#$g)MM?Y'R^%JL6gS0!8?g2a03Qog+4K%YK:7X.PSGM.&/j5Z:\jf?$-PlJ=u:%P5*BY(2lp.#8XN7o"@a0'sVS'9b#pii7bFuBq_KjqOjg?%mfG,![7#R>`WMPd+a*9$DO27%YBnAgh22aXYOADA:-O^_BP2IA2GWL9&K2ZRLZ%.rV](.\H?bY(:sk2o3X>-QWg"3QToNO?:9j9?4:;o,_<Nd]>t2`VAsXm.pBQ*o%-8qa$_r1g._-5j^]b1>:aX4[n5c%B^Wf$pFmni#(^#u@4MtSX]#m3hOD2a>XaO-TP9R0't>-QLa/YA)O!LU(H#hmPY;.)D-2.2a]%<59b.\un*]NcYBc+PMUf!u3;iP8-J0@)c0dj5"`S?Xa\R%1`GCJn9mZ)>OIQF_1JD`He-ed1NR.HN:n!=)5f;huXR&k.jshEe+It%$oJ/T(q(c!)GG\U%>>.aP_?"L7(uD-"<ETFWP^ceUgUmdjjQD@/uYCmiFr#oe97]OKZ&Hq[s<a,7JjsF.*oloeDVmk\aCo107f70%@I]HBk#h;X+EfYBkZ'>3!2N%lOBOA"DM48Y<X!mV>"&*U"J+<";.)oMcM$nX!&*9q0a\/XP#c9:ocKa'%QLMS(;]-3b'^3p:ejGE%\KJgVFKXKP:0QRk*f'gmFqu@6V6M5jFA&T6@`6h5_#Z'B.0L_"kJMf7?Fp7G+U0e_G$&%siMdQ;"J.-TOa,m-I!),O:ejUc4T&;'%?H,8"_0Uo9'Tfe]&Z?MneOS\^Y01ou`jR)[(@X1/6&.`4kh5=tUZ2q-??]nIEJ6Hm%mVKTAUS'>O1=.WHo=0[UMludkXLJiQQfNE%eaXTkI1rl^?']-A<8Z)IL\SG93)Y[[!8rPXO6+I5mlHR)S/CTAs,'(biXr-4Vm2.X6<>]`fV;oV*1/e+Ds1ti+Aj[[7Vi[2$a=k+%9-*@5d01X[*tT48V&h`H^t)TTJ4fr]TT=L-^#b(e^g-TOHm[VXoF"BH9`)?56$itZ2UGIFBH'6*\+#'rKS7(Ji<k"g5,S.#SPubA%aM[9nF>I%4,/g5pr//-UXYp?fG,"G@iVdk@?-:%qGb_>'2P2eDOBueh3RNOnO7%Tj!]H@FI!2:MdNS`%SjWrL!<N!'Yb6?q9L/$S%X+:S2C.31,kdNKQF;,RKWYh2G;@ON>,5oHH63JiDI'=]Dl2n1+]:XZC]+F&o4hY3<H[K^!%[N+pfIgO>6D-M=DS%sZp%1*E"KE)R%'MKYN?e\NH_!kVR.]<$>.^?m!LD!+&H;/(WAahbEGBp]+A=-_t,&>rpbliJ]&Trll6%f;\0Opf#GM"pVe(aX5*Hd^cMd=?,4PhIG%P]]F/L50PDSgqt,=8'^@9/X3V:'8\f[0!$4FBBjoiG*BU3fn0s?G3.nKHsq0H4Q8sorHqGoEJZ.7)dVW&HSW)\cU'"L%#P4M\CZZ%pXH#?;OBAW0nN3JW9PnJPXuXH<G0%B;FT$tX#S04CBbgjdH@FTMUi[3l?ag$i!M&k.C_V)Eo#Alq7qr_[U"_TFBk;n%_A*Ene!MV%H@4;j:rbJM!8VCVS#ND3-',"og%'[:liSKjTimm\8Bs?j&h=(mhOW%f=KsXqEna7S$<VZa_)=D.rEc51UH15@;^#q@FTiQW`34-*%k=`=4U.F-^+s?*(a$<pI2`S=2k?iVn]Mn"kq1utS%-06X.QQOq.a4<<@n]'2.=nWcn7rD3`PV3Z]Re7Mp3a8F`OcU8aJI105"?l:%a'Hf<HE@u)4Ri0fY?Z]@K2#rPn6m^R'R1:V[ehJNVaHKOM9=M$[(!#U>RWgkU^*0CYNh_tM]ZDJ'j"KZ'"fm!_FXkK)JHa1/k56Y%aeL1&7pr/Y+(9.P>q,8KIDWeK-%S<gbOY9uQNjtR+^R<3>4hK%qmlj@J\H2V5mQ9pN*a=CMZl1D'2d7b:VR)bTK&sS^hhi%)kZo>%!dunb?`i7+"k/E;RROM'D`,`44=R"2FO,t^$^V`-CZGW'$[=EfY;8/bn!Lm@%6G!l\Vqo:5<Dp[_/[5ef)QR)Q+iRbrgfA^RKbo9%I'ZhSepu!"Wr=l`2RiO#GNWPD'&p+jC)K86Zdet3lG7d]iNIR0!KU93X`jB5f*sg"WTC\@9Y4RK^aPgVCR'(q^una5Fh?%\T&I0H%074Sro%\gO^R/1f"EKL.IZ,AF>)uL/%DfjS+sI)1qb-K7ELd%dT(B^7J9011_#)GmV0bCtIt]eK@lP""BBS+@K4)>V5)RSXEMh;J%0--Nla&9$u*s^g'nM)l^Mj7eERQYgBVpYjm:G3bRVEX)&"Cmf5bLZ'g:O9FQ;%CWA#dkO/'283+`\DW>mBG'?-."Kgqr=HU`X\]i%X7)=cV&s+IToA%2H,g"Yn(?$XPWE6X*IdI.!%)ZX"6b5^9TA1C\(WDEF#_RW3YDld>s6"ZocY]f*CEpf8$G2.fS)iU$phi%Lj>U\%XfjX;WE%_&+jqGKW5E5N>n4@-p#ubeP%5Ok0T;]a7D(Q`@Ct$+[`=FO_RqU/ODeXtaS3$%<JB>HJ.*dEp:Zn*:K-ScKP?`+bn?l[%9phGR_K=NFVUK\p@d;[jB!jEfR3j%f)R!UKPVS4OYfnl"=iN;AQt@5b/7Z8&):OI#]fB"8hBt0rEc+1oP[k3OO>UUe+(=R+]MrVE%r)YhHVC0&"s!G(ml1JpA[GETII&f#\::HAsIoK(^8Wp#0NdYE?HE5Q]FK20,G5*7U@c0:r2(ApFA*#&m@j6&_=ClBASp&!=#\ghL%.U>UWVH!Q+61s&tb:uGC45J?BBnbZ^hQZgI,13T&</2jlb0=+r^%V&FGd8*/E5-,o$CD1f#'LBoNr[b7="CZdJ$k`)Y`W=I0":WI%j%;G8>dMiBQEE$FW5Ti#f(ehZSR23#<"9G^V*neELHS@/rebF*^Sss%h'C3?BYM5j-(=]1NT^:j2])_b2lhr+:83F@pCuE"6Y0&:%P[BiQLu`kBp;E96PD1EjfP4I3^Rf=MVj]h!8j2%,?OY-W@Zuj4',^.CfEkZh-Wl'MfSn[M*Q;3i]3hQJbljobRO6DB@2]e\#BMXX%3Ir5Vgk6T1g=>V:4mXNBJcD;pS"@jp)V*R&VX0&'DDuC(KfF9T'S[kk_maCSIied!o-AgpcB70]^r."U`j7k&jX&BG*@I8Bj!;0I%Z^,H`iW$pdFNi%h:Y@aU1Hk`CCqEZGp(C%#j5!Q"3T[/e'!OR!au,d`M9hJ<eQOE<:@;*CCqIr8lb$A9SrJe,-7AB!'aAB0bts"-%%?kO]DS\33R2MG)1UJp^#:6;#qFpFkOV7/4IJ\(Q3]hK),B(nViZp!-Z0FD7G+2b09b;MDHMB2nB]'T\iZ>iUZWl5NZWl5b?pTMf%#DoQN_BZF8G'<Fmec['4R;,MV??R[IduEO=i]Z,6pmnPBH)]0sCPQ=M/18T*0=U`J].N(;)Qu<*b:RVU9B<.E<io=2lX?R#>A?lp%X/MA8eG)b5M9[Z2'`XN2oW-[>le$4"h\$&>N&QSODK:0K'Yj)f!Uirc"NfU;^YMbE5Db[UM=aKCjH!)E-WflZo02\A<Iu0R^\M.E%PG1LDaj.Mg<bo*2VaG2XYaXu6#9DR:8FZ0W6CP\n<k"J>e8!h?l_W=]d]`2)%r0rQ[?K8G6N$Euj7lKAi!7RR.)$;I"Ic^HG-dc*%LF(L\gdc(3V=B>fbGABf\!c09E=DH"O/3l>jDXBm8sN#V>Q'[l0G3H>^To`R&]R;YrP"N/Nu_7cq@+.=)[TQE>jg-h,E=:m#8G(h%Tl@`qW7I1%qO:7=:[.2><rCW*L`9a84N5>`'(A(B'nFslL`7jF-;f>N<So5h#*FH1aY.._047T'3Jc>nJB\Qjr8n/#+6?5l6&6d%%GB+3\9XV'nie%dKGb94f2`h:"3sb@((Zna>KJ7?56&6f[H")3F'H`!!_#)WG6)O5r6k\aP=NR2pK+J?6TD5AMjpsdPoIe)SSE!/7%8;W>A%B\>@^;)8@8ZpaZs82EeDn^L)$E!dr0lTLN:]DB_1>Bipq%eVCJ$Ume4WYt:9ki$_?ZJfrjnk["RE!H9NAaViJ'pTA+8*iC%bm`+G5i&5e.^T41$_V,*ksk&=Lf-2g:G_Ta[<\3p:G_T!1J]gu1i_Y,^<LZqDsecEO-Q/^lM=1AP%ogJ:MRuG;9q)[5HH%*e\AuT%I]`8.G`(s!\OO^^ItipullaD)[M\9O+3a'r4Kb9BG$&Ym]du;mYGs8i]P(])hc2CXiPXb3gt2uV;WbQ%UeDT=)_(PcLYq(R3]or-%s*<I9UCs/!)oFms0eR@GYggoF;4AEf+!4@XKeKtR4.=hQ0)kWWi\>Ghm/7]G5h#@SMb/b0DT/MsSL"&ffLa<u&og/+LUCc_r8ai"%o$)lF]p5'\[3sKYQ2(NopNj=,_sE.Ro9A\7r$rkerhi]4YtK$jCtBggq1phXf6K!'SN;V6DVkH[f8Ge=esKde*)2,ar>i)PRQQQN%2TiO5R$4Ms$$>.c-<-\gY'/.W@5gJoo\]7Sdo1G)Sh6>c\k9oVCrc,(fWgt+f?_]b/8%&1ZQ76BNobb)a&:VRgp=AHojmc7[S-G:%7l5Q)s(n$B[S-El,OO/:j_U:SpM`@e`O=GPjWphuFDpSIWi)c."E4(-=HuWBJ;MnCnZTLgo\-2SC`OjMJT`./"I@SPVA"ue&,D7s%k#YZc21LW,;6>.fhM(,CAUMbapd#AK:Z*EGou]-2OHha;kg-(0ZZ=J9?IS0<Yf9g+Bl_?fAG4U#g0rW9LH$YdY;Rl\Zf_+FC9n\!%f@s_F^"G"qL@2Lol:eNFe#^i:H!q>=$+"*iXP!/@U&][jmD&;.C;&4>p=W%-'k"sE/kk-s;1ph%,?^]bL3d?0NdOjH`B.`8DX)a?%Smq=4AV[-RXJ`\_dV4DH0P'QTEKJmJ:p<dV/c=-#ViW0N]\MKN[c8$^.sY0C\]$t>f/+50+Skd7"drN\@TL+.eLm`'G+gB#<4bt\%$sCH7eLkIAMcoFV<kFaL0)BjaS0[Qhe1PJ\;Z%ur=J(jbIKpC=.M82fg<2(Y5C/kEbcHsa]97Yl*M6WZT/>+Hoh'\mds%!k:2e5n%i+pm2I]5B8PWM=b1r4V68\L"R5a,h^nRoT&(AkBdI_Etuip)BnB8IYF`4N>.CLqD3Qd&heF$"g'oP=d\[f`s<as:HSL-!'aYEV%0%03+H*Vtgu[B!5S[<<2eI>\fr+E,#7)RV!@gs4h@Js5:9,ps8)d30U<O'<B@%e'h(E7;6IkQ"5V`i`/'k0F`(oEFJ_0#1[ro0$A_h%pAQ!TGcQGc8Qgi+[6$)H9/+PA-8#g41#;Z16C8lB\;?:i&ap$2csJ`I]BL0mH2h$L,WSYtd/Nq[li^fX%hkLNdWg7h'N$/aMVfsH%Ws$Wr!>D%WGdC#X"@]$`X:d4f"T1PoRT0D9a!o:`!L'buZV&#O?sm"Ap]l(@\!5s,`@MCcZ7P4H>q1%k[?o-QJqMn/C><&Jm6<^r%o"THjjA5A2`V"of]MEp>Rc#bINF%#D2!%5jX7^Jf5CX"p4oWt\-`'R?Ckpnp@AB>8QQ&3ij$RQ<&%gA0H!%a9?7%qEUM;C&.eOr\%PKgfNmnT;==/Qo"nSbi(2A<UCjpa"oMr+>o^snp`S+Qnf+L,hB0'V_&-t<H;HPO]<<#SKhnn2l-d0#i72kg/8MTJ`!IF>0IYY8EW%D!GC(O<bj:e5Z.Vr-F$!p$g*PD15Ya&LH@_;U5ml\)7ZlOtfYJ)5>3;*Y5jm4U#uB=U"chH0L=sPbt7*NoQN+9()KG##eLB2.i-/%hc%XfAPBQa@nL:EAi\<kB:@pU2p_:NB:@pUf>sB"#=5\dC!(IngN2ZDG%=>-mqY]rehhh0Z_V<$1sM2\=jf-"RVl-RZsldKg6@Ef%8PP`1>ECfj)8e9V:2cWHb#u?@^cKcHVCB]WDTU)fP?lV-<8kJ12t"`L8@'90PI)77)u%+fdu:ll4U&jh2SLnRp?o^\Dh+"!4QaS^%5r/-]?Lgm-&A-C]Q*-\-9')!('S2^T;RtN[[?dVsg$/K.oPs)JG%3""`.:XFLA\.i@n^_#0;6*UWnZs_Qa5_MgM#D4hu-oba\I_i%RdPtonRi8*W`gbj^r5R0pgY,2?Mh*/%M-aZ6kMp2p7F#--<u[dUZk/Fj+I/QT&e%59mpdJas_HU)q,r/"Kmm8Y$A:V59)aN*]Ve[%RL6d+4^JGmjeLq8p^K1=m'Gf'$P-,kVspJCV`Vc,<?K5Pi5JDQhSNX%Ag:"/1G6/(5YoHp-?k01>KgR!km51=&^*m:/@0k<(9k`&%3)oTm$6tj@Ea\Qd+5/l9^LdZ,s$FO\_8hQHgGY!b52uM9b8TDD+83^53:$8IYb&@$4h9_IQCK>`:Ca"GCH=ZF],688<sNe%2*$4/%>hjuNPhO[UGs+jlHMa*`]6Q-"<*tqVGph./>q`@P=FZXh&^4M5,Ui5Z]!;Hr4EG(4kfTd#ME:VKY/se$hr%>.@.o'l"&lT!\*"2H%\)MIHa1`m0MF+)moO1+n=&dK%[dq$HUg=+#j6qLoZk52pLALA=h_\m1+Q[MJ`/X:6fhbJGZe9r-SIl*'re[hhYlq)XD"!B^Ue0)6%>7nI%XrBR2(C*WsJujol^*`Qu!PbVHnV9W>G7/?ZXj!s+s*7WD)hKo_>;=5eW/9&@X?#<]*8QK2]Zq"%h7SVP9;8:M05eZtIjb""%fi^j-o,QB3OE[U2]3&q-9F5-*f!8L@8[+3g?+@4=j/_inQu<U<k5(0Xme&ZT7epGLXMQQNUpNZ1WS8mq>;KFYUU"Fe?F,m0W?Va*%V82uB8*s3LF.2#uk`[7?f0.8@Z%[gG`D.'e!Rd//VAO8Q4o!?'&*+%s9We#\c7#ip=L3'os44`nhpM8-5&k*sZY^W$KgnL\nd'hP%KH.aC2YM]THtgG)J[=<<[1RmBpTgW/a@D$#l6jj1g]FQpoB5,'OikJk]:X.-q4Ef'RkrL,0TEk>)/7^.*SZoN1bRpbK,a9._&q"^%QYum#R;u3;WK3[2<!=]kbcUYpl(s)D>:JG`K!]%!WVQVE:><4Hg6l.WJa]L2a7K@H)X/Apk<&X`VP!QEf=_<qd]W%""Ld^)n+t=K%Yi90U9($lb:?Uc#6/]A'RQQ)4Y[XC;q(K0[fkdNjmaVi:?!Z]`5DF;ASpNU:U_X_En)!d:FsU^c+'9A,*u$AE2\'5@3o.4iHDErC%rn'cDAt.%K+(h3t60hRT=s6n:5IN2._j@m?]+H4.+`eA)'oBicOXQinm+6RQI8><6"c-0TGnR![m9\s<[9IC1cGFa>Y?_0K+8m`Z%%s+RNXa3IaSAIC?dBBG&<3)K`'l0Z6W^;D"h.sf.cN.r=[5,3&+m7-Dm;fO4>?sq!M,P6p+.rT(G_`L4j,3V<`5>D(r.c1)aT'e?%Iu;GEN5\o[foccHVHu4."B?-GTVn=1'`WqH?o8,Fi4lW6S`T]LLChfG@.t4>f%cZtIF2a-Creh+GnpnO>AukQ?NR"N;h8]^#l4:r%%!$ZRMZ0+m*+H=<,(u\r^<$&K6<V%&d:'L`^)5ZS>O#22nJ:NS76%T0-%E,c[2&+MJ+N_NC3C-)EYHrsJe&/^%5!jp"A=]r*-mXq%>\YEOL7J_E$Jm):\mK2rY8Bp8fr4PCh''[l2uHn/4jY.nalir(AkCauf:B/8,Ac^HkiFTk24D+i3S(_$^'sQ.-;p%$3/s_Zq0'*0%@^.ff#.B'.kY\ojD1PZMrW#9`jEmT(q<Chb>8o(P0(a,pQ=*H;V=m>?@QCDF.e19sSTahofh,JO'0m7>q48$[I)cHBdg#gE%q`%E%Y/q)c`Cbd7=%o2Eg]'X6QZdb2dG*e/UU7V7;H3eX%=a%J)9Eh3iA(i!)F%bXY5WQ_dB^0a;>L+K\166?=(e9GMOG%r`S>4eYHZeL%(?>SjiH5$AnfpCmOQh.QREEE^]iEOYE_n1pk4jVtMo6!>WWe\)L18@t6OoDH1?2km_1&@!6L5nafKYL_n\9d=n^-JUY/S#ug`U]V%^Dn39_HZhnZ3Y+f0T.#*TR]QNA371qCS!C^mBAomr!q(1U`U8Aj>MtHmY5EmWV>u\M[djk=GS,:Ul[Kbk'lISdGE&5l6&3kKn#r)%&Gi;F;$U/e7QUEL4\\$XfC>+f0Hot?f?Ws8E_+E(Sk'uls/32[JZt:Y%due?T5R%U*B(M);R_>,1B/p.jjept3L4krIQ00PPqb7p%ZbN-N^Hd9>eenYf=66!7Y<6K?Ndm;ISb6t;!l.8"\,s5'Uso(iPg3%!fbdpS!OQ%:HkDBc`LZ(A0pcg%>US&+IUM*d>82Sp_JpE9%?ckZn+($#b?X!GY3"r(P0([,?`a?^G3Jl[T?.BlpoQ%.aD:X3'W_\fn>PjP-E/9rfP^f;FY'!>RM4r5t'h^$:^KiK&a.==NPH<OD%/a])-S7$8__eRPt<Qij/McWU2V]F*'3<'sVfPq^*,R;)%gA77(=p3jj1[Z:eombGCYq7?jpoZi!1eBm,>;Dm:VY_]1-%`KE=C[[G%dAM.\-DJiR^/<#46I2k:SM[qinEbh+h7\")D!W4@AE7d#$1RrBm*U!Zr3Yo3GQ6TsDOQ9*fI^)G)Z$@Z"TOREHPKP080V=oAD-b<%DHNn3lD]E?e#`4A\Or(-Cn#$/=#V89l*]U':cE3DmF6SHm"F1oP\oZ:k#SU0;Q:ajX^8-)G9"l[`h8GTeRY,^DQVUu;]T$3=$gb_%610JWF[qWIf;brP\VW',?`A3n#(1M^[qO`Fg-<GRo1.GN@Gs^6^e-3I<lQ)c9:]tQ?MP2!]?PL+7U2+ckm.#C;`s<D.a2q4)l?B7%@Tp`0P=pY)iceur8F;/&o@/>e?2^BH(<2YQ,l*?&jS(>sWO$cSf2<[/kTdgnla?e%2#1g/2Fqu\N*WL6`g;&Qh.e7dWW#\QdW8^K%NT$2Wh32HM>tN-K6qE_"c<aDuZZaD.iED9'&')(eAB1ENLMWGQ,@d.lQtG5Bm'?g8JU"%!Q"mdM;QWs2^\"P2(gU%?SPnLL=#p^f%qoom0SJ,L!W?&##X'Q*HVKTfu@86QJ!Ol_-rJ"@P;AkRaHDts?^jW-2ljdDh+"[CB%[C'PXYl[C@[aY_,&Ktb4-f&QRp*6QX$Vn_%Q!0h?SSGi>M]G8@LX,SC_s;MlLLKRQW=/;(1rAs0^*B7VjW$/?::"3*U#Cmh`Y"4bTu144d;!L4A:UAim?Fl:p#<&B^3gZL@R"3^%VX((tG-dcSGCMO*(KhUe/H1Wp8'TWBBm(',<XU"YCUKbhZN.OsD9oGAL_GFFX+bTLO\:e59s3k`?/lZoI.M!'8dg8PBQRJSU5\&j%a*>%n-q5[USo%jL=3Y+s@r5O8MQo?a839J*51aV$Va:p+hh2!sf3lO9<C=(l\63-,%_!TFkZ1K[@=,f?NF6p_gDe-&I_0l/XbGMh%1.]mpcO$I^\3H%"\A?]ejR%\D/nJM$#qkljF<c`4m7"FV9WDY5RBA'9Hb0d=4`^\0Kei'@V&T:PhKF"U".F5/j$^f(6P?$q\5:Rt%7kHAg24EGm="Q9Z:jePi6="B,YHq1fh(c'tQi&oL&<j<frNW]TPhQc:G'?Qn5SqI";joe4cbp9fAP&WdQPQG_,e9r6lV8k;5E?q?%iDA&Ga^Ddc)A\BY7]mQ-2$CfekIp^`UK"@<7^>E/)AN!aGk.^Mr_,<#=/rAaG+S7&DhgB,)(0T/FY]tT!DuS6))b.5(jD'UGK3MG%;7g#h/[[5EXMI2IQ4R!?A@Bu_J@Z7LC:eK>9RqsD)7GZ]fV-d$jc35Y*o>XRh.VVnTEa(Q(fhhB0HTuH3eVW`2BF^srJaut@^t.M%aF9qa4m\`4`G7BC#Nuf@;r?Vo3.ZsMa$,BWN?]C%cL)L/cG@Xi;?4N(0NFeP1^2[pWJjU;kBY]NF\4mFqNVsJN)ga+I7T'nB^J]o%%R-YOD8;mkQd[B;EC^n[G@\$DZG2jA<"";I'Z:D'L.fku1-mbCnAo"F+e,<;;=\`7]%-0eYUV*CM1A>]9NA^O,#q7c9![,'9[ue<%(3iB-9KKlX3HDafaG6>O=X0Y0rDIPV00S7'GoC[$mA,&f$Tq+J*ZjB7UCMt#m:pF<99mSRh,:!L\QBJ'",(*;8d"&P#i`)nIli$P%dR9Y;qN]:hJ_[\;iTPNaci(nM^-G#J/%$emYD1H=(Gqhe,,_am-/jtk&jlG!o;!fOW7,+2ZVo,=-`K7T'J$etAuhG9Ae&n:gV0/4%CpS`6kN8>5HOi:m4at$5E4tm]q76H3D^E$KhQ!3OSMfgt0A]i<GaPOtd[g9llXpCihV.,XXXCa+e$Y`B%sKte]s9%%XBg>4FI[]4%dE-m]T.M#V2qPg?+)O2JDKRj!0<E^7q9AT'4)IH5hT_WTHaU3UfEi(0eVts<Hoh5qlr$nHQ1rXta;=$k`.tI4rnHV;o3l2j;fD)G%1>@T?o;*hk]j<G^gjbgl<dXUbDE`Pb4?pB>fR4@%MDq_&I``YldVjka)TQ(Z]_V>spj$q_PHHS#Qfi_7KrrM^gq9/Yi`D5Kr9<CR%,$Wg']j!SCSp,8=ie,oC*FBoLbN@+Ec,WU%^*PhUE[UVClq8"@Hgj25?.lrU?1G\ccQ'+CCCh$F8sS8gI.1u]WE^j`Y820AcLLbk%be3m^.Jn/]ldBD5iTjr*lof[ck4u^^ol@TbJ\P3O$E#uKe?`kjQ:/?2s6Ek]bO\?72ZNF.8pff$0=,`pi&gME\@MV:gn(#0f&(l3%bV[HQlUr2/l`6cZBqm/rC?O*l[*.4dd`%ZS.@0SO4)\N\`5>Ea[>i=427Hb@oegqP(06a=Cea9JBa!mKju7A9O70b6/-g%ten+`R%GOLC028:\*IT-'PAt@`S/BL(ibent&G`V:OP'loYHES5H:J\84Mr'=(br:n._u+n#2nrOBr1J:IksHD:naO@28O]Atbo8$S[iP;A%dZ`[#p"SN9KboE6>:t:L@b,mA)asFkZ1R*K@G/df4kieThJPG^YC(]m7BWFu)!L?u?.B<*AY3`B5"?$K$QB>,'KQlhhT=o@j]$jM%Hg5ht]PloU;?#<JrcIhPpHkkOn:&qMH2[$uZi'?WbgC^HS(YP`hT[$C2QV?sI"$PUg/L6MhL0h+do/Y4gF&k*/g=bR/_tlq$hh<&%5<UPsjEq$^dc/]=Hg>TaKokl\I,W^_HBWL.4YL]]gZPc2[GA;fjU1g$[I(fi4^)172M3Z8;qXD)pq62\dD@*,\bYopNSZuV?Sf%.%F*A)-D&H?Jo>E_)DQY((mq.TOGC,[SEaU2'o?IaDY'gO`7psBOVlQ6%H0QCQ@<(6lCGC&$*IK9*(lod#_fgC[#kp:/2'XpuH89ZP%1<7^8.;b,I^(sRE?_m;JhaE<CT,,p@r*Fl8g&$rg/`og#qhFq+Uf,E:lL1S>]OD>YZ8HR\D+*.EmVI9l5!-?b0u1]^4E(o#jgQl)%6g3gcA$dquEOtkPH(!DQ]JBDngtc`$4UH_:Fm%l%N3$rAR]!]2Vs9t`>ktmJ/`,62(6*&l>^K9P9g2ZIn_.:&GlHY^GC&rhm$J5X%kB@taFcS'Gbi.1:q:4cM6BMPD5()L(Ncpn)Rr==q9>uM_lJ:7nj!CJi8P_jWYhXV?'d%[9mpOCe6(r\rr;h*b'r4kS_u/HQ_]:Fl%)\4_0[FV*4hQ,'\0RjTREH(n*SU'c)YVA'Y1ZA90Gk4HgfZWZ05;N+@`hNe7e',]_I6QS^=?Kp&F"W4K2Ra9M9"?;O:Y"ajo8>e.%'5ROPSEO"[Y^BF,J6@9m()6Z%rM:k\Sh6RH%[T*n\SCe;"c%7+;3(3#?9DF@4ta@'ngTU\lqrD^O*3JFZaJsc)V=7aUn>MR>(,IJ%^,]=2qp0Erb`a]`1\QG_pC#R3r@^0P/%;jA^HDT02`H]bAF6A,]T@K?@8H%JqqD[ZK]/P+1l=<H;#]]"mT?[^l%X#V43/Qr9;F>(%=,Ok#aWFX*+'Jh9GmlSKd1MJl?"FW4AOM<"_>a:&Chi+)kSEIs"hE<Q/4gmj/3kRMXPbdH^rR58c4RqE-*aBb8RcXrOQEN(Q%,eO%6]-ZtP:>7fj&7ssVpSHV1,;A+fJm)bV5N6JcDU*lEGR2Ri]S0i[##T.?lA+h#8VpFi+,9`jY5aXohWV_**)X/,c,kEMKkMXmpF6c%=,G_R,pAT9DgGC4C%NdpfTh&N5V*Il7uo,4PsLh7Ymd2)%2u4q*1i1MBZu:FGL`K!B^4BcT#-J<@HojUlR250T:9*8<^%Pf<38fh%G;4s=>Lb*`e4O8AM9H^7ZE?4Cf>`GrPf?Uco-h^-Sa%%&,NV?h3NPEiUSe"N.K_)SVH*56@ON%GB'cej5k90Xq<$\.r/IR\O&U@B%d\gKg^Y-cu"dqjBi:Q@>KU"2o!tHPso]AT;\7qBJF7WW->K8EFmXc759mX#**uC!M7uoR[NVtq3KfAIlYq'%h*t'H*;8HY+'ZU;I%`l*DE(N@2`Z.-u++CTPXoc?H`\+jrV2C6p=lkD8L`VnsT&*P+^P"ZGLk5FF`6PNRe:S%EAVr+%i0A5A>F3lmoSN6%Sf*b55Wsel%%CW4P+^;W[__.&XV;$YhtO1o9#EnPl"@8q>Kn!b085VWW3+)*:Y&F8H0#9!'rq*G"*qpF#r#\;_'T=6U0hS+S$=`O.]raMq7(Ud?-%\)V&9D1>1Dg`\gAG8Ql2@!'5q!tl:,p#kg5rq'4RE4*:W&]3\IpDh0,[WV?)k[\@?.Ps(+:PL&"`M$.`r@YEXb^XtdS?%,1<nC.5%o4JWl4u-PASpV:4T[H6j<hf@[Ks?E@cOhUfA4>iCAJX,I>n;1C5?h9<8fbRMT6u>XD=:p$I-H&s[JFED9s%Fq4S@e[(EiG9@[%.N%*K.,;r\HS5d&DF(M[)<ho1CuPN!r?/*]tT+Ntc"%=Ud-E./r[rraUlk(ZC8l%&gI2r-J8daD\a.ViZoT/Ap1^FpH.']!M0G+A!^o%.r_t)?fb'j05Z920'9:T8qAfqAub%s!]""f*^@.OVH9Mejn#6o`Bp?oeX@$6^0:KUbP,(&qP(Xo4SrlC'?9UWr_b';^%_,d="b*A%'_@4tILlg4o78&;H7/U0cARlePTp^i*39YeYV*KX:NtBUSnoDhZXeJZ_[<8JA1r+m+LL#jNHB=Q.kP,6(Y6Tsk^b>h(i,C_bs3ZI%&nh)/<:,3pmu"jZm@Gb)H5Tf?<r1@pdl4,lgqf-*>^u;C/u4QkGPZ%BAIc1!hdB_Jg=GEP4+UW=\H3]X4Y&p_4-^>lN]fPoo].2$%YJ@)'04.=:ii#d8DODlAl`VD-@mr/rXkd8ImHoDH*5*u<LCVmM7e+s)%GX'MdFNTIJ2&u)e;DN"@1m'bbTk]q33e.jCW@r_U\36C%]Zc$+M%^qje_V,fW4cgdai26tg3PLBI^#-0]`7on1;sB!IZ3Vg9RF*-a6.J,@9oILc[5K[6"OVKmH(ebm@oWR]>[67Pm0PL<a+CM%ebn^EohD%(LZ.NDpuO$OB1F\cQ/>CRo^.BkDViOepRZmOlO,g]3n_3<r;ielTMns=jIO:Q<[;l;9&BMnhu1g-\)47PVpA,`2V6e#%j.sb*;sk]sbfreArHS.OpIs"qq/1n#/3of`/]7F5=O2c)]c@tcGkZBOHO-tK0915E7brt][@JO]FAM?ANfD'Ar97)XFDegsgt_:.%gs+'`6@$>S3"R^Ab2h7R"W5bIY3;t$I$6SEfgI\+<\?3.G[[ql'(dsV#HOKKWaG[&=Rik]?sR7#%Cr6n<KNT=7hD>@H<iX>5@5Gt%e9^]!%Z>^XBCl#LEYpsT[H_?$PL`mjI.h/T_-i*C*]pt5IAOI#$l0'hR3t)N<^]:O=(M-g9"%bZ:-i2=5'TlSp>0_j[fZ0lckIP(%$Xa>A<V+U7,`/g-WLS@NN:LC'DZh.'(3?0nOZCRNb\YP=k8W"CpZgnphQ*)MYaC-T,Xla'@\`kh,:H982firFq>IU8h!=%$)nVZc%[GlSUHg8<!b.Z$4H)dW,:\bgs\6Am!h_$#;B:ZM4pX6p.\T\:KL[hCSnGMNGnEa)YX+F`eLhRF-(Z,"HqjGq2ftG^l=DOaS&.V\^%7AOJDLVus*-48SLa,B]TO&<J1(J\!q[/)"ciljW5E<!.eI.+lpN,RrZiQJ]J=k4]Kcf\?<E0>XV0K6bT]4?E8*$%2PdjH\B[l)hZ%<M`T&YsV!Js84]A5b?d^jt`PP7,6RH#BhZ5I,sR]+`SH+A-tgE&KI;EcIZkQ#+7?'U7`_Z@B-]EdTA]]i>H077rOu*Cd*<rH4.Hm%ehA.M5pFNZ4R>8X3q)OOI^\dgH'i9@.a74RZB5'=]j,BgK_2%dN9d%DfgKcR*,D*!>h?[p.Dgi_,-bbVG?u%$hsYbF0A`1`=Jm)k%?<6W^HE\CHZN/8d^rl+OS43.<N,\CS\Js!s]mE$LGNi]1>Q-I(?H\s'Wm1i2?e^X"R9JXR/;F_V$`lO0jfQ5?Xa\F-Gk$$D68e)Z%iC^@_Sh:`/1'`#K6/O;FjZcrA2N!nM=`;%9k-n!kq+LFZ[_E)hoD&B'Bfc9'qecnFA\S:0?LI3q05_]a@p&?B8b(*$AJ7tof@VFS%5]c:qTS?8@(g6a`_BL:mi^eIU]rTERrnTLj$1#Qam<U*=s7Gkg0u(JM=Ia:i?sMQCB:F)<K+mLD$A79G.);!mGStLG0:.6nB:Fr`%dYh3#Jk-E\YZUf0O:(\m*P6NXE>Gj`$O`MhcY,kn_9"Gnb9,dPJE!`E+54os:=`T24h?f0q=&Y5;s"mak5!l/GighT;l/,f`]$fb%Fn,F*g]bL$ZLXj0X\W0m>G$>*Q]#/Y\[tf<%'.-g?\TbFNtUJ`Df[k0hE-3,PM.D@EjPOSES5suaI.f_@^@C?)qW!#r'kP>H-]j<%7iF$H4LL(4bBK]arfW5Zh0,i>>$Q<W'uUnkb3H$'p[CI#F*Q+oV/4QMm[e"UGPuHb887ZulT8lnjBlFNDsbRkZ2SKV5BGJ(D-_<5%DEGU=YBI]uAa@-?bq"8!SI^HF!./LB%q*D#.m*L.?>bcPr1LT(/t=bjXc1(XHLUWLU%EL)DRR:O+Qf>"`a[?9e!KN2V5pkLqZ1.\%]t6+!F=='-Y_^UHI><o2q^$T"Bg0;>+206hkdA:/e&t(T".=<`-^Q7S"Wo:/\kpS!qmO8-hlaWWk+=:X'QG(6S+_gs[8L:b7YU8_%m5s+po,^<[Q\3n\X!1X\`jY>9;!sW*Y9"^:LFh'%\2f#plPeM"[iQ(DK,P+#.-753QX<L6`NNXM3m*hl2q("07;4!j`lp[43R,IS%EUaX2_n1X#l%@PMYPY'+;*;"X=8R<CIT\jee`]+.CL<A;EBe,NE*_hLL(+07;p%'1+#X5mm>KMR^X_T.YlP-o[S-'I4,`Rqk$L7N%r&l,crc0r$0H'J3FhgG<[_R9<>4pHAp)YJrNGSbgY+@d,*d9iP'K7+g8"#!5o6X^N+feZ:1#C+2rud>^HO[?_)u2;A]*jYW;q66c%rD>k;9sLe4P;YqbKX(2JrgL0Qr<Gu:o,F1YDI/n_5]1Z&YgRp3e[kcl-)sYeW`c/gqq9\\H*m84_n/D;oMmghQ2]bNqmgp2-SQT6%LF=AWg>he;mq-MEB&TtM%]kob=42<aVlM=dd/Y_.)CK0gBPV^cW'"%1N$A*FF6J&R8VTZ_%pnqm<NlGu>KDE8;)EL5`TFWM(jGpq%?[3:Iq!2.g#;)^70cn)G`<rP'=W?%LO!3Z35H:lP+\R-Dc1oK:8F\ug^k3&bH!VJe('P99CcSiri`QS3K&9(Q&Dqe%9YJ#A.)-9W%Y*\!3CpI7>#(m>Qe\[YskHE#!`CE27?bP'<+2<rn*UOP*%FC,s0h:Z72[a28dEV)3/lkDNqpj-V9(sil'R,HG\)rVC587/Tqe$JO%gFKPZf*^\hIo1O'nL5P4JC/^[%ZX!,H*ji*Z?EL8s'0u%0.(@pih?e^o3XHR=k3`B=1RqIb"@,pQ@#*8Akj0=:.$K!Pk?j0+-rD$%nb:SH4Zp=FYYacDXeJ=/$R\FJ2qk>$lhQ/DJ]b<Vb`Ptq<'gb%Yke"CdXs%Wp1rSF^+Et9:[dWd^FjoB:`2IYTAMXd@a$:Ta'[E,%pRWCMC[YT%^f\IJX=/Ps\qQlUK!ORZ)$U\2d(uWFfLW]`H_1rl2faQ2V8DXu!*Zk=/.4u3pRaPM@]pl\mK]p'+7BGIDqi(\1C$jT%06DRGGl5<(I*lcg/6lLf_j0st6kF]DD*M(YZ0CIE>,)s@pr)3\jlhuiaf`]gWQb(7CU*CkJeC"t='9S/.a(-U.SK]:WC3SP/$!UP%Y"c@nY"eiF-t.&%99h!`.4d>+l=SJ["cC%KT[[W[:Y]R9e4<nN]]NKLH(D4EJ!b<f#^Q1j>fPSukCO6)f;%>H7;.N*MpSXh>L[Ec%FH*j0fCt`O`:rJu3/QARf$`hKFGgXJO#dc/fEs4A&O$9(<N.o-@BGZZL"==T_MCePJ's.MJ(<fX<i_doig$?^/\6Zm#.)M9l.s,m%NS0>PkmQ)]NI):"H@P$BrA*C3CoS""*K>5+J9GWV^GSep.e2#4lsf<87(JC,l:h[s&`oRU"F-cg8[VbU[76o(:AaUAoLmiu>!$#U%G8.Z6_0?*`LoHC'M1"RLE85U_h/&kGNgV:`49[7QmqRib/Iu;^HQT/.`?Jcp^gX@p8tRKLq_=VMelhqq*Qm!.O&R'T7sYh#iWrLc%TJ!rrGP&9[M$eQe7Q'mkR%]JI5TQjLDs'ZuG3o1)@o2:KmZ[FrTHRR3i4ToQSX;9*JD;/j_58<`4m(m%5PE4/gXm.PNYeMf\P@\1%*I2#(+#h2^!pfqdG%jZG)r5V4enUg8)l(oieOc+&CMP0b^t.JXSd(jJ]);A*/);7'-!0"$#0aD!7L/FIc09RFa9Xo>F?Q.']@-->%l`,6\N(Z"AbL@DL'=;"?o;b@'oj=IF?%gksT!Nbc65$u>$J/U^&(@Mei<b0=V(P.VT,%pomd5L-9`;2MKcJ`DbY;2@pOU`0a@fq)%l,[$;k7qu9bb4%K*9r>i`^p;#Z/T\S>(GN<XBHomngfuD=+BjjDTQ;(7f5m*0`U!B+,>.9rd0?ck73X8RoDj[E:g;mOggS%:IY^T%g]=h/`]GWbq%:4iGVtfbJ6/U*(2nlD,G\@We;\sp.5s;_AeK'oYm\Z@4\UXg7m6uE>4lm,Wm+T?.[J1qp+=CO31\n4O6W_qe6jtG%dG%o\R+)dpc"eRs,<RL87n\dqi=HV[7cW"BZFnG1.1[=RoB2rBfT*YMi_$;$:N5DW-GUU^I?Of&lrnO"GR=`$<d@*#+qZj\L+X&f%]gR/75eGF49AZAo.$$+`&ujAonB6&G@)]87\pjShQ7t(QR>Tj.F58bc)+.?lUJ"?>65b#betosuQ"dlc$nLUW9L:ntQt"hX7e^_P%9HdU&U=t3pUG9V#,?d1I\#k<Xq$B;20en;6E<3%gFe1Nfn=FuCD>NNt3<%+MW*bQAY]R!Fj2s;G?(Rgl?M[N9>gtf?@(+Z(.;oP(%Ib8AYj!#qdC-j.]"$Kt+b]NNOa5<sX&p)9&oKaP0YnmRg<uS&_Mb;XckVlTpm'iHq0O6.(.#.7J1a])UUR#Y#E9PTTYjH47>M$_M%$/<!GBC&!(S;m*AER\_NMK-nJ(e;,Tm_,lQT=2Z+^$$15,G\S=&'3d2T"#:orh3pK0i]Q_7!S+/n;\/0CI$jc1qjK9[H>f?ib0VS%8*a=[AmJ&SXaU:DLi"FO7k;,0>(,Bi:;!YonM4RGj"mc.T)ar4VVa:k(.W.:HEYK=qTomJYB:lM[B:afjtQ&U"i&jVHZSI+!f=nJ%]TtgOf+N8u>1V39,jZc<e*N:>EM@?j7=C^$R[:upN"KFg3oXobM!o#&1^D!D[%*P@`Rhb_pmTeH?XoJuk'iR6@qF7_0"]-2ACn>W%ll+K=?/muOCCeEc@j82D8@id]8N/7nqA<!(,_k@NmD_R%56*1`pY*s05W\b3Yl7FLR`>r$_Os$b@8uf_E;EMLkX3&=Pi]J*&]c%`%b!kO>$%7KY@VVeqGNGa+i]GFmDs&:L=,=f%E=AcG?Y%`J#<s=);(qX2C$%9:#1#-]Zsu(=C;k:H[-b^5eH+m1%EEEt5Qk5U@hQjA%D$_r!+973**n.O`<1-qD[NM5YG_kO[m6F">["8,J#VcB(6$Crr%^gE,Q4Q4]J["/r.0S>@5rMt4D$;g`%+?S[lPdKPBaPf7i!*o5%Zio=?BufoQ@KA1iZ#&$KJZtu9p,o)lcUus+&Ps"P'mLAPfRX)aIUK4RY&.;E1^qiuG[:q`1]l"rKEMIM.@\1*(k@ZAJJB].d0G\@%c5-[[Y%snObH^,!iQJ'SFG)?u88Uj,*u;[KD4ft=E1FY=]!S9pTcYOr4$_4-Y)=C&4R=;H&'r.V1?T#XbI=!0+$BI7aJTGRP=fc=%1gub*h]tXf%<G@45i6VB5Qh7AX[L>f@Ho/)/LSsIkqE99,f#)pRKR^q'J0;FJM:f;4=b@raAt%udP'N;C2+(g&2,&+2K`bZ&l#/*%p$'97$72SsMB]KNJ6hF@KGXBZ&`gHnWC5>>Pqu,R=R-&t;ii5e5`GsZ?e@cjZTrc>V.l<g;A[65+p1*bV;[?>j]e%ho)h@><"0nG%`chNR&)Zo1in&4!T7E5A42e=a<WK!5-JXa5!YN?ne0ufM1Oo[uWUO0IoAgH&@M`T][7'\oC^'HY)QD[-)fd6EHHgO3J'f/o[RDEp%][Jag8.?Xu&jWT2*eA^rng2@S;e2A(TGlPZb&@Y$NoN\^_[b0?QpT`4):0Mq'e$<.J:JPa+pLDjCQZj90JN_#lp17.HB)_f$r:"a%gQoL(]`aas@61RQ8J$f3P8:kT.5K>cVe=(p9o8&FSsjOeGgt5_9u.t2WhtMf`IT`1C#<k\U'A'IOs!iZ-X['NTO\nXfOin#HbPSd%?lkS91i2'5+N*BYK,#]-,sZWZARrWmTj\`oq%@5MQ75*B]OhR?h?5Cps6&h+FY$+M,f).Ds%m5bOU6A!pa(h=9_5fI+a+M$/?fqX%^E4+$'m#GWj:bBrB\Y!bZfCKI:fC:m;4Sf_NO(l$m*C%n6#FZVg8h[G>&,$0Tads@Z#dV[q[(W3]CB#Um1M(BP.oplL7SY)mAY#S%bV&aH>d\=l)P=E-f.or<Fus]2cKBCo71&b/;9EZ<J;/9VnY+@`kVH3^B90(M>!8bO]M4BNe@'R3.XPkUAcGl[G,`T(Z?XWtnUe:@%]#Oc__-U9kd[ZrS]/;Q\+/_0uVP?f:=\cWJn0`5S%lf.`<E^@f[@Ff'8MHLY/[)DMVY1TlD(UX*Gt(b;p.S^@g;iBX==XSriQV=k%i!MbWT]n]u*s&Vl@kuO;5T:)Q^EEI2fc``Kn^Ypc]1C6LF;d#&8#qK<X,L/BV:7<o"ne*]]Z4.\MpP>fg']rI90VZiA:o-aJl??<%0\T?.E]GY[k)eLW0>?lUO++A\Rp4d@T6ef1Y.`X,O1DTDQ6edLF2cLs&HOl\SkXidKIi4+>,5.)e]RVG:r<cBcVi1*GUDV?c[8-r%TIMY"b+Xi,#aA1mONr9R&Po`SH;;W.J^%Mt7*K6+S<u0[;GT8[4p/(^cr*J`_1]`,FQ?&RO/c+Qn8_1eb`NH!^E=o9L2u=5jgQTH%d1KI,Qh@&_VYpS,IWGfmhj;pUV\T0.G%psAs8!P/J$]uhqH7!S)sg+6aP/\!dc*#2X'52IVE5uEpGg%U&]#Fh*+\l!@1B\WKl1On%!!etUb_WZ`!b5Eb8#jNG4'L$lkh-2U_&RN[b[+V;2Np(egE!6B)UK'%RF'Waq[jcnh*$(l%MjCU?MA--"';C-a6:\SeqCReB237-%<co2@^>S3kq#pibZ%Qb`CcObQTg^k5kmqqWV8T'`Fhq[r``sMn[Lfb2$:m<YT&W2M+oPR\Lnb_,W8C0ar-e3"d\&I)oq5M0UuduD%Jh&O:F(8OMN#1l$J6A='KO*!oQSkj"k,f`K]3)K+nX[0\5Pcc$1^_F6*boFqOSK,B;LKDI'#/'.VO9ZUK@W4MW)eFp*?S93J7h*[%<N?4]WNH=rHk;_s"iMp64>h$K8"<?0<mTMHh!K7-W'`4c'\fc^(h;m20F%=Mfs@^EdD!6#VPTEUTcKam-P_^3g3L=r9PWiUcFh-,%)7[\A*jm:[$7'hrf("LWiM`At[heR_D@#&G^'l1JkN8l9\gqi`VG8h9]so+mfq7"lI6m(CNq_Wg4kC:Q4*/oKoub]5TiA]AP-,P_%kB>[dM],Be"81a6NBQpW?Mj:KjCmOc%'7.6Sb\Jrd;#tB&M*cE24%E!7h<^pB!0^,k2spt6AI#c"VS+9?*OB[FLNEFNpZM`B\)W=%JDFiEnm+4-i9K%I%,%jC:@.Ri3=JOC#[&hue8s0pb@[iPPN+3J^/F=ZZCs4J3?G]=C6)+<(^7t,$3T%FPV'HfiAU<X>Yfa#Zl^iF%W)16fmN5FBcFBL[:dTnQc1TbJd)k:_f'KaYg\GZe8gLfE?dK<9Orb8.[`_b4B\Md&;GAlf[<+!`oR38,QmV/JJs/R2/M/bQ8GKGP%q[5a:$j$(,?.I?>+$9M+(&.5[^\f_G8`0(N81df5%U7MP^QrhrLIl5-(cCS=k#r)of,:>XaHHdE=9br).#9sFk6b]fWSS0PH>ZqK%obW:a\2Ce^D0JahGf7n;qZH-7/^F`1U+8r=g8tpnF[4cP50!s$0uDp=;^D2[AR\WrqDq\-bRMJ16D$Zco"!=\[2i7kfD9AR4,m%N%$-?LnSG8hhkN^Idgb.X+H@pnOmH+a=\B^nQ7t%XWgoJG\7L7c0'=L4pBMAhR2EL7l#?oeN@d,X%*,s4EDn#&CF(+4Sllg,);S<C]%QHBS%='U/h*-S]""1"0oniCVS2%K:(RbR&oR]V"I!^"YP`9t(B="&1*Y.u^*ZZ:[A\V(2rX>?[)<Tf;3#8#6!&m@d\m4;qR&dF(I%(MCH^fh9)rrG\njBQkLp=*Q!4/f\O6R5P(g9cjf.H%'F^CU'Zi2EJ!!#I;@:YhhikmB-6PW$*2F9^)9@%DR;V+$5N%*(]rF12.A9%:`6D?%TTWBR7sGZA+uYD\S#/S!3b8GBrsVM4PB)fR'<*NHU-\7Q*b&1_0;R*ZLR@Q,97OZb^HK7<Q9V5_mo(j?dK<9S/lgtgTJ_1%Vle^`:]!9Tcf;Js+m9hnZ*UJ&V=:A+3'1j"cCBD!T27nD*AI4&G1WMUm_?-g"J'>T)#D`9bs:j^ic"3Ga7,s,3npL8Y^=;Qccaqt%iRj[Z++RgIk4,O\:*WqhJc);)X1k.H@&qX5caYpe+5r2rQ@`TdiJL.LS`=lO4165S=Ret&,W.5'fUS^lWg_k"V;JSDlLPRVr]oSV%]?64?3FE>(fog?<,,)HlEp88ZP_u$>KJ;pdbO,#FW83$qZ=fIU&@suf/S;--nSu@1>P?@Z;0efp='SOFX6P#\DVnP`bCa^peW42A%"hAo32o#$mRUa#R4`ucqh(islSWT;RH>t9PRrCfV3+K!Ypjd!!Kp-N'NHCg//r6:ZE5!5QH?O\_KWD8g]1^f'K@XGiX9$ko@2^f>%,9_p$^%99f>oka!>+1TX8(S6ilo[I%f26.d[O)$iFCUk]'0=H5fjB'no'?T3<]IdQ.]-7Sg:c%r<F`F:h=oH<A7&5p86p&@]5K,A%ac7RQ]<)*4WZ1(CXVV2;[2b(Gg:.n>W$]j\m<Q(WeuaYAUk4FVh)\8H^gB"b5=#"NZd3h4aVSh@&3^gejq_?#+[KiLW#'-sN;B1a%)!*g++d'4Ek-4,;M:L:/TVE%Uf8a*CUV3<BHtputk'+E\gDGAK[P9dG_Tnd>S8>u]$7A+Y8^5O][Qf9H*bb#+"qsAfHB,p+5IMO-%@6Tok5_^n_6N]'=dV03DgPho+Dgj/g!VZLFf\HS!$VblGC#Dk?Aq0dt)LQ8>+5N@gS4g*Y4RQ37qU@Fpr6PrQ*rfD^6W:>/F"k>3%<8D[c!)*i3!^:$P4CrF@q2nij>q!9::GkFUL@mI.^qn3=Kf.k%&7PXC[!$9.F*oMs9;+sW=[r25k26_9kR-KVY+OGDAlNnS!`Emd%XZP)9^`+d*pUVJoa=Ba@heLd27BU5#?L<L<&7X<8,j):pAo)JdcC#O?T6:S>DbkAg:=s3.E4aLCqsB4g6+`OP^a97diQ'p`"&rI*%e8ns/6*A^VkYKj*Zr0QA!VN/h(<^p20PKtRj34D>f3DKJ\Tm_%7<>8SNikme[r#hi4lSIr\aO+`(u]8pV0WnnQ@^9MDhkU)Ahp(+%iJ"@61(m"rgM/GJN(Ck;Bm*V1_7)Q8X01uE[+][u+59)F.)YTs7X.0Mg#l^b,Gsa'I"5-=a0139rCDc?Z1;#SE5'FP80'U3Ga_lS%;#Q;H*%>[<Us+706qBlmnmJAgBb2If@UR8&@<)2a$2sNmSH0<A2U$GaM`>e_DAZH+*)P`$An'CXK51O]2F_MUf&V2q[*sd])KZA3%,H'WOJp,fi`+SU*)EM.737I/bg-tKKoK6r<[Yf=7V!&814_m6ac$\DocE1p98KT#1A+(;Eh!i7R9d[hNl3:%O!QD%PF@@>Elq<'X%LeqHiB*m[X-8Y?pkhq!r'rLU"C$[dSLGJ/beaC(Th'M^%$&'%bi*[u"pVF!;49F8<;VhF$DB:i!+G:$1"n1gu`oZqjO>V=#!FsFf%_eIJ40Dh(a0;GR1r"(D5R.9@_N_<o`d*OJ=/,=g>(W<AG6U$g[&X&-K1"'?/R*K')hq-a_'.6\8/^V+==:R=UF[@5WMGUCS'#D'k%;QF%nCA<HmC?l$)lIGa=6<GRdn(J^I=+i/321Y'p;Tsg>98:niKK#_]Jm/DK0F`Ag9&H+7;2XbQE+@+5RLH5^5gU+Z>BRV`_/unt%@]3,i%Q'>SlkLk(kSXtl4i2X;!:*2bYPQN-r_Z2-S6,IM)Q',H]@9@Gb6NV=3'GmP_b^ukCUS5Jck!:CXWSR5Pd>!2lpYgT05.Yt%^SF<O+[=;G[2nhJdqCQ%$b)iseRJ7<11&Q;4!@77R%`4S_)SM;je>QGoVl2HYL6RZp<10;g[%^fq_#33+l.?oaG`4O)$=\%[+_4r%DAb5G,/(!DJ/B`Mp+,Kog'AgY:<d0D@)N)hQiSu=MD$nd#[?R=JE#-"OeCpK*<(&4)&@huMnLYD+e];,c7"EhU+@^`CV2o!/$;W(%p`,qpO;gNgf8blnqpfA6!jll"%F8CoL>r]2/73_Zg3;bLVgHhW::jL5/1H+paHm^=VtR[-5m.h\mE5!"KHY2JB^!3&B?U/",<D\b%pID2hCj3%Jp5-V*![pJKdM#Qa\q3nX=Rn"I0Ws.qGE28gaDit*fBg(1XaXpZ8E100Fi!k-I<1'W33Qr5FXm_74_^?BfPn#Ucm[RU%\-5&N[&W!C4\6D?7%Td`;;`A5'7;*ZoVd*".LpNk&Lt+*=0`%0o#Lf?<M&/6JEZ*@+SErim18S.BTKo/C%XKJX\*5:MF@IFb@L]*%==b7n:H^=&B2L6IH22XNf\BJE']n!aRsPPB?lqX<5Y7q;#l5\kD7"MfA8h/^m=`iJlI#%fpkm;3?[ufSeD%lWWLpZj(An`VL\W:L%$b1qn/ABCgf`WFCn[?t,g3OIZkZYT.8f,PQr:988kg$,;%&6-6%;CJrZa(/0FFBI<?6S+T6ZmpQB?aOIIG+*Z"">!_[Mj3>QWhTb%V=oMJkkDL;WS+f0!_+R=+Y2JTm'4*B]j]Y5`f6=`#jM7+Jc4[@U9e"J>&*$&-5GS(^Wr;HrgZ9iJCJ:W&08&mPZM\?XmdZf3I>Df%&W8#=60rW\".G+s`?>qCXhCnLF"f"KY%JhCmHdG1@6oX0hBR?4Ca]4mUSB3D8CKb_=QtLa$E>`b?0;[4#)MjYODQNh@:VV?$2<g]%pt;lQ'q[fL!,[P)iD\r2#=<;(4IAc3a[Vf`N@XH/VKh!,c[3L.!CZNJ5ROULLlT3I&3rKDS%`h_G'<G2`@jZu9Q5\D@b.]+,&o0S%*StiCN@h*+i^7D%NO["dQ6:bl-GnRNcg!k'Z3&Bf=7g]VRl7cYG'a]'ASjh1>&\LOnigQIRRLW7dC8-9IDBo>pqEr4#=gfo(!fpE%g]82e;Y[*hmH)FS\i?Zp1$rrbaT?S"CRiO,mtBbK"r7(RR7\!cL[sL4E:RT3cCo#QL8/[W9"'j:F9k#Q*.@:RTbc!Wf3f"^(8*Q[%DPG`P?+hcQ2*9(RCEsca#,m6/IA4joR-[>#B'HH/$o_W[!7cE)8V7'[]7(p#?-W)S;;@FP2p:`lA^hDOH,(=1<5Ef'1ou'Bkp;*[%<KgC7"58c=igdoa[sAQ$-lNrDfujaif;amW[tEMhSfV3:!L4VE7pS\lQcUp#-9BHM^)ktE@I&)4(t+-fIV+02O1VUL'2L-c2PbV?%Hq3SmG.[I4,e#<V65oknBRfi1W$L#(>DTNe/)X3TAC"pjNO+KC[BKa#(Hdicd*^;%RR7bd%sG@=iQ*LI9*M]ZdN$jBf+>Pho*Pet%CU4_bc+:"3>gEKZ1S>f@QS*arH@c2Sj/aJjMU3YQc<RfNE:"k9B(tN#Y.1ARo^3WK)/Rim,Hn%e"5@\H&XqAd2i\Wt$:m/\`4+\?%=N&YhfKq4)g7;jGCDD^MTc:9q;B!rJZ$bGH9JmsA;=CDhCHq1cdI6T=9Ka!k4KAR*;W!$%U#n=?B@2Kp)]p#R?U45272Qh3aDiMG%(BQK=80[IgKf"%D*dIY5i:d/%1qKI=TL$%[la[F89kaqj)r__/Los8F2n'b3Kt>8?d+JWAj"V;5X2XB:3RYW^h*4"P6pYW?X_\6?%+`ttQ7Gi:ORLjf2;CF,$NHNJGYllikXOg_87nd9l(p+<^DbiK*qU$#dYnaQg-171AYJOoqSO5lYXkR8T.)+448^Rr=Mm[fDq/<(H%f9^`MNce8\i<VOY&*3<BJL!eMZ9[Z]"_=/Baq!H(#[XWOSGm>;mj:A>\%:,rrkeoE8'bSg6,A3)%Of;=4JHU!al!YQ0%--Z&U/(X%Du_@HPR%2uP08j*#m`[+c?\H#&E6\TrGM:&0h/4n9sA5'W4M,"H6F<YJ9nV1@Gq:6Vad?ZO>BmB9rEa@3D'J3f92YtG'`+Qo,CTZ%T%aDfhq+Pq(p8Vf80Vbt;[btCpnl4;JVW9E4s4`)#qfJ?!Bh'0cE3)6YM0`E1ABj1@-b;F#QPQI07fcDBug$:1[2t!nW!bS,]:Z8%1"GLP-*j?F!ZGKV6!Vj^K]Y-1SrK57lWVi*]ubHp)G2\S92I;f+]\*%nYLBb36/@Sfkt,6_Pj!+oX`<]deGj:a)..r]cpEFcIPNu%pP?<&op)];E6cSuOKRN!/bmLir<J.NGqW*P"0A'Q#FF?<_Ff9Un6)_g!0u\COAo\Kcg-3W$:?Ek4O<MW1-J&,iORMUJtD;n0=TWC%g5qQ/"%WnhjdGI'%D@iR?%OS4&Zo*TTram$i7!J\WQ?Y.T&"]'nO..cm]qO0?t"'gMahMc+Dj,,UurT*rn<XM-Phl+>H"ATkQ3f6%F/Y4[q"VZa=ih(pBd/q\@28qBD&g+K9a!kjAI?(SI>I>p']]f^An7&G)*O1#*&(Xu8KkG[694ZN:AY)7;Mh5-*_/"=:KhUq5hm72%4mCi^2,r\s!1:>B7N&Ue0/l8V%ehX*ndjC0q]8.](2*D'G>Z:P#08qabc2d+R]UK*V1Q;/e!U_g>\sU/3O#f0Om]90#GdsbY.@nq%n/"D)\`3]jF!-=0Sd,Y`5ZS"#O?RT)`I^8UNqY4PiS=HGoX#s;`6U'WAroNY='@*\$KI?oF=jB[54+5gbp5Y$OmM^B?$V2*g*Dek%a8r)L5$sCYe<rKmFGt`A)p7t\AXVGs.n4fR2hFd,E$ma8UKtR!r?@FEThBkejn>dQ)OtI*U!@W]6':ia8;),I-5?k41sNEI"ac;;%FUrR*LB*l,P##;]Hl2?GQJ\HO%dNP4+"_pmJi"Pf4@"r>@apF*d`gIn8=KT\bdpi\)Xi$gjL@ed?ieF)!k+rn[;4'09=)RjFW-bM%hl#"jJWJ0$\hI`&M6j27:tAkHY[N-;"fR2oFM0PZPAYmE"Q^!Zl_J9g:FCSU_kUNRG8nF<U7U$DphRuFpq,WPM2&2emRX%DeVAO(%1VJ<+hYS5pe1PTq0d2'nOOUUm4$V6&33[1++Rt,q6dV&X2PH8:3\uOLf!m?OgMYfi$%.0a7f]sF/M,mfK<@iT.4Z'0+\R4fJSQC\%pG\`@a7L6[$OAPJS=)Sf=R8lh7'Voe3?W00U<__-\YgrZb\3J$\Dm72<d1O:J9JEtTdNVO0>X@+i0;:[2&j]*0*:07Xprsk%e0@r%/RU?*+U`hFBd'k\]t[%661l5H0c5=>orQhqem<,cetnau[J[a#=dZ$PfmDR7eElesW<qk3H00J\7AbaLCpmM0g$0mAH,MpCb<KBa%n&qLm=P2P(gXk:!&Llm@Gn%dP`;nCkC5/N^@f,9d_LS"[4+4mQ=Z^cgUtqd.R,tn;cIVo_@)%q1KPp8[2]E4^*dg;mEWd(\h?aF*%ZYU-lUG[j$HVjGbIZG%DLn2^4;W;6P&h\\S6.(rF"?kp*bZ0?tQEorBAd(>*E:(aVk]Erk#'"3gFep99e=goAK)kN\8riE%;aH][%hj75E!3(u[U43S9DgC0Wa3lbbE>!oLmC4tl3ZtE[X@is0@m@[`&g`!*YhDsTroV8imGK/`[`c67U54]gmr\kd7.`#q7g^E0'K9I]%j9U527!q.Qbs'YYZ^or`gE\r?]?C-#'#p>a2i_b!!?uo<N`!-41ZF&fd/kJNM'c@P,3U[J4m0D6Q(./_P7H+;Ynb9iTk%g$3gLR3%;BXuTm'E6`1I#g!58asQ,n]i`KH$%=ak<ZeZSOZNh`<U@-:s599:%BYpjXm,2!oNsSd9F\W*9_KH?lHEobubNMW5!`A[?#n2<g=>%H/C8.U(PjV.WY;ZTDn$R0FsF?ea.iVd`]N*/QUAhp^iNUH"gI!jlYD[HPJA8r)BK,-2"9U6M:`ioL&(%X]S**ZNe!H*jQ=ZZ7KB;%J9j9%GNr=]S<Id/8RL6N,fkSrLZY'VQ4@]C*&[\5,#pobH+blT/+T;4]Z3(dVYl*r1VU`]cM&p!O4s_C44U!J1ZUc(Yr2EQX@9dq%FfUZmZAuDr)QX\O=C'+%oR%)i3oV7f8FPl&(-nBo[GDb)Y,n"\puDQ7>A<pjX,aWKG"&F@A/3T?5U2PE(mD))*i38s(8fi+VOl;i%oa**#ZHo<3<6h9E"EZ;lA;C78fAV%Y<',CA'7J3?9S:I!Q!OPiK,i%prCfa<Z^l;!RN\YM^5!hInpn%;].sR]4]aP`NEeS24?C2^%.ir@&L9B77<uG03WL<Ka<F0O&g+Ltk(IQ]Z/\VD);B+\UEk%?IA](O,:gTq*?I?#/Vm7>!e7#]B"BNG+fo_*lWU#SW'=Ze]jU9l:%X@[S#C-Yt9?KJZP\u09Z!?SR[+$'Hcn!*Y\&ZWdIDPsD.i;/Eaqq<h%^\qsJocO50f73aCjcg":Cb-mQ*(o#VPFsln`e[IK*?=Q"%,SFP&@m3>sWa_5,'Zggq&.<#jD#ch#MB:u:BO?THj(X9n<cN.7\UtTf&ue!52-4<,GWh8F%_i%d9L;Z,6(cnfb9-gYiO">k-)A.2%^k#%fR2pH4ig*"cPiD9'e0](t6SKF7:aW@kh5mGc+dFM1=0&mE+M@2%([SRLbOj<s=j"k8C(s\cb@0g>,WNff,djXEW^0r-no8'!%38TcV8c9imi..X_M>J"2H&N.r*P]-FV'*!:Z$6c22E*"^?HeWoL/i.'[,<N\[mD'p,+u_BPCjd4Rt[MRX;*$RR5IM>UIW,,&M8a4%+dE$>JI!\!e$J=O5tF4IHmTGh4V4t_GU2bYk$$0!1:8pYSQD17*p;*_p0a[1),$;\^+L]h#JOtJ*hhhhckPCt(hFeY."_nfpF+2a%rSBo6[bB=K-)@$hejb(4"sNsn6)=ZK?jt.h%InEmZHUUMIT=!ML_s5Mebj<-NQbl_aH:#J6G"Z>Gfo.p*X*p'ptTFBpT+Yq1P-d,%PjX61LBW3O2HC3<Fg:SH<QH/TkfBG@cDi.ll52Q1?Ft;B+IL&WTn+CNP>a^c6J(;bO&N\3,'#;D\`Y82AkFM$C]n$cgVZ1J;^("`%K!*.\dl(!a'*;u#iJsKi1\D_[RUUiX/AR$4T-6+^/TMi*lm*-OIUa"TmM`'f8^B_,NW&pH:-!A$60.N.(k=K\2T<A2jHTtuhOi?B%1sg^Ij7VPtJG^-dF=g-h7UV-+3lLNb1t$aE5!h4=]F>u<D?k5.QtABIEuIsh`=ij&qOrVT00*s.L+j=[2)/eOo#21")8^V&D)'.e%I)`ebBsQOfVP+;q^X($;ie1_V:u7Z.#[Re*SQJIFZfKn_\#iapkO_u.M9EElCN4)oHhLWRD$!IpfO>\>(aJiHWV*[sUT<``T\jJj%0JL+RK@*<i)d2\'jVqkc16W1BIO_C]XR%oQK4N'Ep&mt+eBWS2`,/db`M@4R^0pn6\!,WeKZfgs*+]g%f8KSOofVUSZ48aa==@__%3j#KtkG_F80Rk&5*,ik#5_-_:$^&OD#SSpR2.S&;=CU:XHi/(DFsEq$)j;7aZr/dpXIiWKM-"sl.+Lip?+Tl*oJ+\5>Y^;m8?CjS%e14<VW.)AUf;aYJ@EZ[mh'"tZa<VoSMqU$'BRnTErae3"oJf>60((dsN%nad'/F2`^oPM:;-P4Y!G2%^XJCnR'G`"dEan-]Hqi\W%D@oAE*Ta]KgdGP)5sVJcqPV7VTW*=d@k*4/?'W$A"S7a?Q?O=Be<BurW%<@99/BdCd\e?);rq#dJp0>.d<;=ul/k`SW@QEWZkl1q%Qc__TFdZYRNO%0CP:J5\<:X@)%W51aG4e<S,*@<-E;on]!`FuTR#*ACOq/J6@1FR4!'o:obhOPJafA*+jW)jr`F9BT"R-=uq^76"%23%-X`-mVAR&:r?LmJn/*=9Dna%".m^BcOg_:4akjQe.@?r&OR)Mt&2]HC)I,,j^>V];TqArqFK0e+?B%kEU<@oHpU=UdK$nb\2e%_P6KEP5[5LJ!?0.)PP$lTou7o)`?j%@dXZOX?iTdEEMYT6,nB4/?YGC!I#.1ehFkZ+MKhp]<Fkop_msP79]JL,>N'NQ%;u@7%Fd)%!`GH%PXI_)[d$.L'[!DVB2?.uaqmmR8JM'p;nr6B,q4=NlQi9Cc-/E^51XC%3Qtq5.-r35pQJrd7'$3XI.(mk(P[bb5<2LReG%t-%Mg]Gs6pHR=fr&+s`YE/nM,_5tOD)D[?s5EB(U\I3!!*Gu_,d^e5XC8E>K+S220,`L=[(J3Q<7t8+^eO)V&(BQ.=;>4fuddV<EV3b%V,e=J0[]FkBSsO;R?4\d5Va"^"XJ+]!/X5l)M0Tf.`sMSZMIP4Y\ZM\3Qq`hNB`iqVcl3m7PX'Fpkt#"V]?&3mXDT27[Btb4_LhH%f2HY(4F7`f5*.C::A_sd(G`Ln1[;E2:o;DE/kF(&W<r'ZP>JIkYI':47lul>N[jl>'R"1o@Ur`u2[^\FXV+6*a->NYdrA(e[/Eiq%K-kp';E2S-,CiH9%KNjlVOl\er-h#-#tC&BgCBW![Vm.Nr6qHp\Pbh>9FQMb>(?boiP[b3?Be,BH([Z'g.Abh&.t0Q&ulDA878bQ%6spG...C6QCbVY\NEj+!P8K$i=Y$M?<9@P@_j;0cU_ui$KA)3M]UqKJQ6mUp2bYd=("n,IE@&`b;,]AACgDa!+CbnF@Vi%o6Bo4f%^TZtC&-4fteY4<,"N4bNn)'S*A)+P7FGukOUbMq'$6PPA5&+QW9gVN.oKZlG>8C"K>@b>2mY:Wu0IVcBV0r=m(KA019G\@Vle#rV%qdD*o,%B.iJi>#Ui/d]Z,Md9Vk?R+#*]i+`au]5]0gN_K6b!"MZ=E]BP_[7+g\B;CEs.m!U5mXB&MG);h-n\W=""eD?3=s)Fk)rP%$S3iU\u^M3i<ZC-]?=7I>h(UB+Unj09K!+qUJUnqA26O3TfI,UX5+HjF"Bm;6G$D]b1#^d7k1TR[=$e=.ZJrD!QbG\Jr>.'8/,9T%EBs*hk.;(bQou=Y%?cZ#O\#G2Cu=@@,P3(VS0W?l9"mVZ<"l\6S.ZUUY]h5sJr[B,Zq)Et-SVE(:ne!ge;aiPf1qOa?#"5r@UO()%5iE3*-AQbL$?9fk"[ZrDA'**)M9*e\PF56NYH8C/[Nps+&M1f/\*OBk83'r)KCQ=;c_1t`\6VTm*TftAF50i:gg\CD6[d>cjEV8,%,f2Z-[AtWGj$F/,=[IG]'M.\p7*k-U8Ok=]CYO_-B.WKcQIaa;N:e32:U$!+8I:`r]XuB0=L;4g65V$W`83p$RQ.['VA\%\g3!Se%07s#C+#]pW`JT>W3Z&p$Jlg,E;!9-sH]muZ"r&UO6R!2!=o;t=7<-=V@t5)i>K`96NFFLrJoe3^d?]UB>7nE0nP;T,i+5>+k?u>Q%1EKs:74eIsPmsFI<(Q(f&,WHRAhVOhmL`:U&8D`S?M/,IrE-:2!tcck2L?dl9I-Dq5#)4-qeiN2We<YaDG!2+fBoY_I1>)i5dUTg%`Jcr!&aT`1b9")b$Ke[>L@?/3V=+g#As34P&X#P5Z![BQ>WiKmJl?LU+?kijP`&L^Ac!Q&<r%m^!A7uI]YHZPp,U>4#P,Mk]_4JI%ETkh`bbmArUhB*Q(;j9:EV*+J,hH;4mr1679?]#HNuX\S+U5H:P+AsXm9(JrGX7bUAs_F%`[%C>%WI6[(eb#/)O?VtUU>@>.Y&Zi%ZPt'MCA/sc/2K&\",]51O@LdV9U]PcngYi;mcfuTXSin+4"f"@;ur]ig7o$HFWTc8.60-eppX.YqukJoTWhj>eIY/_"V/W!,S%SF%L9E8u:^/h@P'>IQ'ZDik*MY,,"aP(Cqhc_:&gcr,b/$bDc5DDNL-$,:k(=J%2:&3J`-s60K-<[CQg0PAmCGsW^t4m1_VCtL_?XGK%j3<4>4W%rbJl.TBZ5F`cMGraJ-KkA$_>J>jNjq]S>88*!0V.nK)'bXgJ0J+(4(QVZ_lK8N7:n79OXDWD$7g02N?)";<FV8pMH&-f%UdWSPR5+hc`K<Mi1OHaDM;cChlL&%nTFttFY[5Zq?A)?H_+ms_s3kkQjCM&V1ti5*W3QK)CIeeGFtHgTf&Mo#$hFDTqFIgC?,Q)?%OH35,-CfH@MbR>p$+Wg"T:]jo5u@HVZ:or62?*I0Cj)rZ4$HsW8k.kj,!T$cYCSBN-28Umj*i!W<.$t<ZObkr^Y'NT1k$8FQK&sS%8e1QY)_U@Q;"f1`.>W:Q0aP0A]!pB+b&A,9\,^DnfTe+lgm!JJ8jU*J=anMLA4TD'TYWbXP0\*%#UPVT+suFi5LRZJB^no^H'-BM%S56O=1#5$Al_!3)0;j*STu@i]^9XIHi/GlOI(^`q%"gWn#qGreUGf+i7$/[UNeAhn'=?'t!UHJ1V7<1o)Y0nrUdX)]-0,Z'fiIs"%Wh]G5%j9JW63ds/%bksPbE5"pP]kebo;)_)'cEN='q,6!`"TL;jrbXm*2>0:0JZTInatMd=uqp:l01gn9]lMG_/D!3`"boF^K'1L%jiCs-1`N`ibGY`:0qbLB<<Vh$OXptZ3C0lc&8Ngh:["/G7EW<n+$a\p@.lSrJrkF7@S,JEJf2S<+A=ZW5W^5S1Qr"r8Klc/^J0,F%\@j5);GVakY)_b)(cDk]UA>]j=@?Y-&I2HW)L#'n6[U#]*?LEiW2k^kd]NNRB*J%b'oQG=:JuW%Uqg,b9#iUY&%5PLE,E/j*ASs2%4LE7JKq4WH&1.%0n.PJA3Cc'S_q8qOV-%>-r8lf=o:;E(kdLQ\%(ZI"4LuOGP1[]_H[0$F5F!qXd8^Q"dQg)".2+G&YjMrs3+2P0%;^On/PeQ2A-H?m\LLUuK*X!IIW?I>HZhSiG($8Uj^GD[gOW<Y#=7"pSpk#4+cps8-eFfnl)l=0-7*_'<_p/l?J7!N_TB>i8?DA*t%X!B)M6]e583pWp.G.)&t"*6"[e!;OX>'A*s-IKK9@[$,+N_jC;LQjgROJY+FT0M_/dl"sbd6h5gHJO(*]WTd6c5](C;e-B-Di'Ud%;8Q.6<j4YPCsnh("mP82ObcDiTPuTDW=U%3Z<f0p+]2$72u_Va!e16uljMZEoi)M1IZ=cG+UY\0;1!ol2kp")_u?tEfibsN=@$DB%S\(#s!oPj_d2F2U&\gT.70LU8'O2,f$(lC-\q"-,8L09dXp'Na#Ml\T.KmEqF_F=":q_(%6Ot)+[BZg/DH>,#p;^c5)=c<&Eg!s5%[qJ'IO9?9)TY<TI$fM=:ZB-OlY)@RS=&:0IA><E<VTa<S:Ha(Rr:]4P2nEba6UfZGOg7toeZ<L?56[Gu^:;Z29I-EjYo@)t=TD>k%=RqVICQmLNI>H11qt1/UUWAc^=!@[o=LRm47;:%Uj]Kd7Q#,40)!"r<&B3OfjE4_?&a'c-PJLXAEcM=ShHR:nA^r@&;t%G[1($]\%LY-2-orR$->D>c>'L=?1+!Pg/BZnmE+[VVIpfm\d\!::Z$`r+VUb!\ACtU"sV:ir])Rc]eT)V59I!LiEg=Njccc4H=BC1F@0/-;?%\g\G,O]s[_nc?MT<[&.LoMooX;AlA^@S&u8Na*0bk_"\Qa@a:#I(-H6luEfl2%E=a:8'0n/ih]RVC#8t*km?2R`(X=6h7KGWTsh"%!X'QgmY[)4a>&>]T7)8J0j`5kfb!1-5.#)sW=N>+%Zi8K\LX(B90Uh.[+e@Ln9i#0(X0^\Gh[(f$`+lF<;830k+ER77*`Y"&#)S*%]&;&[Ar\:("t6G"P]bM>,C'is>s,DE8(qTf1rM310L7jZklD^s^5+k,53cH32i2>I#4*m<me!'`fF804&s1lh6W$\F)3BJm+mY;X%6C]\b.N3?a]D]jA1+nqj/ZWY`E67HeV-O^2d_F?SU0WiLoRO;lPO^Rom=l8F8DO"lRGjg<2]E$GQHjr:]/JM-L>i\77`"/TQKo.,%b?&DsdLNaX3cE[3P)iA1?niG5Z.s->";YTP,B6[!OLs[?989W'lr^PR?SY<Pq$Rq+kB'rBJe1O9(Si"9^dPjeJ)/9UdL(K*Y.T+#%]6)rBaJ*N1GpZUgDXd^ZJs/T5pfh-2A[5bZn8j`@mok&,"Qf,2'`7dtA%Q%8^+1q?$_dIIOkeD\g8+?[&e0^68YI#m<t"HQ2M2Ik%XpubNHP]$ePp:7a7`7,+q^EaM0tR):)B13*X1PKH`?]P<mM\sD<]sLeC+MjD!=;glmbu@tK1b#n%E8Zh\J7rl]0#A*m&YD(p$SIZ%XVf%"MeuH[/c[kK&1Ac!s!HCde0r8.Q"tETZX8sVoRZX]N;.n3WtsF!Sn\=B'Hb=h]IMlE];e"S.Ic'#k3.-+*5;FbQ8Z:HUqQ[8%1U:6cMN!L)R_`smqFcAbKW[]=p:K.:E!#r>9V?tVB-c,2^IT'S3)3S.cJ(f6o.72ss(54/d;(]W7C->A21$SmI&*?TBI:K:$h`[2%qLZR2K!eb@jDBp[=c/gP&igsQhp&-L_YguM;@V;`*V=d7H%-t^98YV)iH;oJPiaP;7@8#kG=>9\T*1YCj9ug$1/"mQQ/)F:Cih'-%'KAXYQu0V%aF2'?_^\;Jfs`2rY:'\_?'E`9&^4u+M'L&=re/_.6^H]/.a$&ap+nYOH.8u7AMU?i&t2G+2tIKn!gjr?%@\UC,p^(L%%;j3MrTt6Oe?SIh,/KO@g2qKT<=WhuU+VEKF9S)l7VGUM75aWT"fn^GmBSG0<K-Ad0%7gJ5?J[u_>TfOjU=YUpGcg7pDoE>?Ek:N%76j`FGf7r/@`i/ZNKM2nbt)228e0WuN>*\n![O&HC%=uN(C*Z-YkSV.lJ7SCXI91RL;f,n8)E"D[/$9IGp;`mN%.)HorI-X4hWO>%?FHUGJ_44Xb&RQS*9KaVlX;3`,$C!YF'6=lGR@A4(V_P=6iC%eJ]8\U]]hni&HDlA\AH9,oP(4OGmSLZ0?UL'%@8&gT*1dRS$cWm%5cOEc6WS%0Sf?>i!+KZ<kFlNBEpTge'5kH2lj=stX6@H..t(cV@&3,lZtBi2O\?C$[ESm9%7OQp5SX(`$PUUN><(:L;2+*4cjuHp%Dsl;h39C[sXia^s<_r@Q_^G9iTS;1#\9Qr`p5FFDS@XFIU:-?'#kDC9Gi'oGjp`uuVObH4%-*P7;amMOO'k(:c"j>-aIu:fU>khD%Ak)e$Wt_fJ<eFJP)B?J#2@1S%$@0"mQZ$JU7B>a!ST2clq%PZcXbr*l(NciFRf!M0qM*)_r4uH[:*FX`b.'bSiComn!fGK*/6g=,%j8=esY\qnP$G#0NnUIVB!(VJ3&gr@8h&b[U?$GZSSnbcj,&)c)m46hHV"e&k$u!Wobd)b3%PEY/NeiY0I=NIUha<R)9u.c+\'_42%;k-E?CNN9(D[Ce@&/**$H^<7f'NX[j`#qCulB4b]aMIu\-j!b(mpma_n'eDfC>912K5;[L))LIgfp\AhphrO`>3%X>fIgpM@)s_4%eH+puQqW.g6f`)90MF>KoL?Bo]W@1Q"-gEUG7R+[NoII')^Vd.!4n;r.aN\?h,^p-_q-:H!8#pTr6k/_XVa`ciDl%D6g37<gZj#f%`MNQgjYO5p_kKefaVa>\=n?7tZr4it>m\."Y8d-V+FLWhM:2l>=d=]PCNa;1Uo4:CFB?-_%O87&[uR+Ego2rh>$cJ:@:,$RXQp&`%K^bDU)d3T$?G+C\SJD*23#2:Sm<,+WVQNTn'Ll!a[^^d4W]$G;A;>/laZ7^&>Ke3?&p&lgPh"k9ffU`b+4<;cduIYDXN^\?pG2X-%ZQdjd&i@Hn?*3;8mP(6K`6<kYU@'1'57-nqBjbi4MnjkM?CVuB<tIWXD43='e^IhTeG+VhT%C^Z#Q_bldX!/%=`;[BD,s?ETtM@W%_n6`(Qn1mU6[;?bAum_5$+,]NJ2h.0!`[b,^/B)cH)XQS$AH6#R#;P_0V_DCe<6:-?SHE"*^E!7Qm[$%a##+nco"^r1$O8nMt/4D%/_(m$XJrkoJB)bj3g7&JXFRF6UG6Se`q>uYK#pF7P.]ka9&=!mB<Kd$V2<Uq7m?sBm:L2WJh<@jb/0^'U'oF4%,6rG;KB(\_bBOQ%8[_i4!Pmt(_q*26&<M'5=;GednO-P:=%j4Jf%MJC$Z18H"SErZ2f#@Gfc6P;1$c=LGK1r5:qN<ePh-F8bK89Cho,piMfSSY((?fL%4joYF$"+@`6J-\(R\-9L1@FJOD3/:oULY8@qNG;$R^aNGW$X1c'U6E_`*Bf#=H7s&/pq:*!241;Q*1_/7.TFVXk<)$?-1Q5I"/#D%/lTj3A]@/7-%qu@]PO"F,r;a^)WI20;b7p!`n*5#^k_?=&8X8*hAa]9`^X#S[J:Wu[QAl)>`-Cg?!bk<bYc0u[:Lb^bjb9Sg>P!7%?B/Bnhlf\P8+?m`#b3]2WJ2gGDX:u*"OLguDr2kt[lNOUc*\6^2ub/QW6+"8Z7ps)R6ERLPH?)hM80Zd3%/d5jcF+:!)721-1sl+%\b>.pl(].bTe[<P+Q;R+EO]mOa@[R)F70A?,/p.kk!>HfX$2.]J]4[:/Pbg>"5@(aQsW2D\fH.e[!O;Ie3a7"J`,K7A9&f^Dg15=%^92PJDPCJrgXd5a.&J%<"?8R.!aGJT5A].#$F6#:oc9GBYYL>:k)$B^ZAft;c>^?B7TgPi3H=foX$@eWc9m5C$8_al(PB42/!@W#%(('^>b1Y[k9Lo]=Y8C*EbP0jE%lBAEN.PX:K--QNFcC!jQ0e"5d@Tg!CfrXfK>Z8l!!R>J=UHG_[rI4XPqG3Uke$*t<<k/bGGV7O%4_>Dk6b9#eDH@ljl$?_6alh[mW/:\!=^5)aAE'I*dE'Vl]K"=*Q3\?qEV+0_?%V<U=/1LIMUUG+6,D*:#2.O;?O.1Mc@aZcQ]M%&%cq87TL8$_6JD-r1GRERk^j:(`N.Te2f%&ebA]-0d_IWd<^`&MQZ5s_)5V1RbduVIIc,f(EY,0k@FNt^!@$)[KS%hkcelh7Kj+F-;%kn0EFiN6%-<$)c__b?j\]9su-#a)F[+XXB@\gi.;=s=&S+NK6$b%XO$\;r`GO8?u&EJCm1F0hM`JmB!rLI3"N&(^St6o!L(KTnP+%[t,rsL1/Z,_@1h8gVeqDOdM+qOPH%]2MsX6\)!7/k!$0-4>U-Z)molD9?km"!VPPb-k%.Ae1S*pPa(K`a\a2FObG'N:@6[S1pu_H%79m4;'1pkBnJ*4un-jFKgnt2PnqR`]HUnj9XZNY@F'^*^$lM.dja<2cA`/CGip[,9^C8NK.Q5Uh%C(.80qHa2L:,mZ&&#ug=M)h4%2,79cJL%/[@^Ngpg.#54`>(pG?6]gmO^p4\aif_r(F)]X0@mgYlR_)pY)&*;GR&8]<@;s$9l7VYie)*+ji`t^L=#Vaae*a4V/eVu%U(>nb_([U<<p@?m6l_#QJIa:8`qV0V@(t2Q()Vn8p4l[9[L#5j$HX1#GnqS=o4p7&ZQ&T7m$3%U#Y5.:.`"2MKYA%/F,ORV6RNm<%WC=nN_[>)=lfGEBG.R&bm1,e^Yu&23EeL!$!]n7=,)C.(=1jgRQPdg05piDTIC+cC#9&M#&]SnuEl-aU\;ls)I5>]j7>52VO5Nnf%3C$?uZ#4hIXG5NNVfn3>IY@`c,I\\jSATrlk4^5^B:`;e:QuoG#@*PEmW\pOX(P*i<(S@<B=hT`)WR7e"mONuhDa\BpU".*+F(/^%nb)DY!GR'oQ/?c+P19CR"9/rh\GC;*XJuXXVLR7u:/_(<j^/&]M]DWbo!on!>I(@WN5E['VD*(DJDSk(W;&I39_M+JQ[brL[Hadm%!p"mtN_WTFh-I/iF"4$5&&(WV'n_%L`=Y"Y&kT^(DJTSaX!k#(7'arKT\-1s4qIug"bF4j\RQWXLu3pP%Jdkm#RS\i!Lf@0!;,RN%rYfXbC2rNOQtp:-)_KS$VM^D_o`\NVT/V$R1-kqe#/VMlBU=,tdX<1O-7]6.T9Qq29_SS9;b-NLh0)TH!L)4<U9@-I&gb;&f6Pi,%TK"[!<]oap^$tX*,mA2inZD&YQi_?g^:?4"S:\qah$EBje`]rFh[s['g$B$:<8DFW%h#He;[2j.3H\'<l,0mG+G3WnKX*aM2+iL2%]gN]BNH0\SI?B>g_&(p:iEhg;P"fDP)t+Xe[_\.^F>?C$B@fb-G,),t"G8(/_trq?([*+MCBA%M?Fms^#IHWR7:6?5]3Ud$SBsaq%%JPO4MRQ.Q\:"g&-qV2rX1$g%NrLXI^:^O/lIjkXfgaH7?snNX@C6+eHeY$LK;8_dBoHjk_Ebh2IbGQfgs)MuGU,SeTjoG3,!F\&%;UfBh/ld%F_hH4E_<CC1K`u;Qe?kVj[cG[O@h''CaNFWBp@\n-#/`((Su3eC\N@Bqa89+C#["V7qn7)Mr/XKbXbq*#e>Ipt#bgR'%2Op[N\)1ad.X)1E?iD&p^UoJWGe75RLfA8B.JM#1j_I"\^_mZBP1beYcY?O"UqB;U1\IWiKP#&Z]-84#!V5$W'@h5B,L'4e1NU=n%<OqSl\fS<\!L]lA'hJTX>j)m/EGgA9n'EaKEcu,eHFjIs!MGnhRoU*&-)YHr+p9ITL^P(m;H[p]4sN;;da-3P#S>AmJ?3Hpb)Zf/%A7]Y8'<SDJ3Gk*[q1KItARZn_B#FQLKLgI]"5B%OC"IbR@9.p,E$"KWUJsqnA1GmV$3LK%&fq.Q#N?a<:ukT2@0E#9].1^fTc\[I%\d<Rb3EP0s$ru'Z^(gS#:gLGH.`nsFop-6^NJc))em(s&+D:E*c9t4mqL"YnJmF_<,Sso1fkQu#`+Vkfm1Fmg=fmafG`MJ4WZ1P^%f-f15+`q!K$1VlADM7+JdI#*K96[9dk#*F+0$@t[b"(eGFg\r+h?572Lr\T#)hj2B(T"HD,e'4>jFC(f2M=i<F*+gi+I`BC>:uW7%Aj%ur!T)@PUB'M>+@]F@fS4IC0eKWl^m<$t@Yfd7Mbgs3E=S0>OPiVqj-V[&&1hfT0Lr3*g?XLC$q07&_q<S"($NI6'9d4*?E5-5%qnS7Ueh9;#KEUg;%?Nnfg)!guE`Xd3)pq94Y3"A6dWq+[7s(6Z3D8Jqa(O+Top]#He,R4c<h4E*O`oMp%QbdGhq=N),+>nn*C5=\%q6/Z]L9E8sEk7+Y15k/j,Z_@;O&2EIVK*Va?Xi(=TG<#ea9BM8f]NCIM')j&o]0Xs#,RcH8X6ZBo0`g#+d'.dSrl5rY]Dn3eIQ8%%+HQ&Q&:1e.q75m]_SJQs&G"1a^gTXOl3qpm"DRCCKD"FN%".8M9_ZOG=(OuoD[Tlj!(HJ*M!tZ/R/C`6XD-Q\'G_j>\O2\)aj'`Y%LFED&f3RWqZ)Jb<AZCT\0R<2`mZfgg&$Y@/0./E,6[@M3)PUUiL-;KSKLWXnkQZj@a*>hrj+aO.IU,DBJ;nP$g='s,`Hhg*S;o`t%9Ycd1mn5?=AZKrFEBN]mOd(Sr.*`8l7jOb4Cg8-ZY%E4@G!e]-66g<1:aFU<7.(>rSu9g[\8h[t@^p]_!+`:l:#H"*4I&X75;gcV%.k`G#J0Ga[&9M/9#OQB:S5fhLS=9Rkkqq?Te'9h^Q>iRmZ;e#DB?'J'n%UWigH1um4jDal"eIqZS?srX"q7XE9-g=9&L[Np(\.D3%?>G8A\d;=aK%0Hb'MWuq:uC-dBr.N$(5L''/;d;np-"UrVsc+L14j0JBR7?\jT(;9Mo#k;\Pn\AV/rZ6/bmQ3YE"aZ_K#UGq;J^X%WDW^+j^6Ph?d`4Ma]H<mG@nIoDQ_Sk]m;=`BuN-uc=CDrHRA*:j<.1=Z*dhFYr*sAfNZTtbXd$Vg+k@Qe34.$=U-2E,Mtmlq]MVp%Qi`B@PN$af8pl6Zke&:^DX2N,pS(0:=+ikel::+.o`\[D2u-6;!<"0&DB>MT,p,s.HCYQV:ql$N(i+-rZ6X'`8$pa"TIK,;(P<KS%K,S$rU](RnCUk<1D`an;Fubn2:+8GF3*-H.d%P54ZO/uc3$O7_nB!#YqCQ=k3L?=*WrPDcNnA+ng3LljD9GE1`\fRN*\bXm`Jrq0%;7iJAR/n`2FGA/MbHCSWf5J/W8fd#D\p4ZdJ]%]SPLonVVP(Xu[SI+oE'OqfOf:=i2.CiuQM8HR]\T]`<nf/nCq%Woje-7uR@uo-%K.odc_<qXS@kW7FPk-(<8f'j*/p+5:!c&CfD7fQ]'@CN9YGS.4Tq'JO1IL18L?0")+<`9OJ#p<N)B#lYA[Lm]Mfq"%<ODE-@Q,?i%MAb8C5L7#>rOU4UMRE>;5\(\5aCCX]$\@s&;Et=gE?aTTSrl3:X_dBr3t@HkK*qd*LE9iAh\jF.A.8dk0Ce3+51uiYg#PW7jrp=#%g7ot/+FWEX4+D"S]u!q)m5KXUlO1=n*B?IX!(7h_rInh!('EXnS$s+@msnS"q4%AP+7/i7:OrtH89MRJ6)dXFq<H]dAB2,.j&TaK%*6;QRYK.ruDW/U^Z2fV\.InkgMRp.<X::.1R0BG?]l"t68i`G5OBHk]XuT8bG6;'W&Z_B=M:$H,WQgAQn:9f3lcL,Bk4`Cm(_QB[%:S:dr)XdY\r>+BjD&I&F=TIZ6@G:ra=8Mp;&.AJdF7R0rcNMUGm$Pnbfe*sJ3k0CalREU)hX]L^91q.[J72c7SiTXA5`YV&%N'kt%iO.6.W%sX7e%Y?AM*-.F6\X[dG>n1U`-.en_^RCD4+M5$,m+=XN1RBXF<kkj/iu`cc+I]65<7f5DJ9)<+;0?*=Q(&OkF1@WBGKNL%"?Tpq?&Bnb*rpVM.R7BihIligajD+P_3FG';Kb1U3JoZYMDSm>a$tLtON:sM#_Rq0U:rgu/%8J]@G!)l-S&t=oIp;n,0l3\M[UqK%\ZGSTOiSoO)iBXu4?fH!V/,Qh!="V_BpZ#OKG:L?-n9coQ-G8j[jhK>\9r&'M%\`W!Ap8`%<LjNXH+/^_?jsoY=i["\839>hTZ6t%#[Ks]n:-m$kC=Jnlj)TC[a#>ANq4mmV#nhjEj6FG]_]cUJi=-oZl#T"<7MqdQN_sGknV[\C;;q6-n:<fN5TT;(boDqm/(^MHu/V_%8Q@*e**,P-9\+D?'jJ>5m;Le&bAQM0<*<3mn@HSA!bmtP-THlX<mVAkeAQ@>)e;ti2]aS$FDJ\DXlmK=%#eC_[KY&9`mN$X,88Le%#?CQLCq<V>>BB;0jRK(S^-h`6(kC3df.;aQV;LX]58cpp?Ptf]?/Dq/EI+Xg9dj/Cf=%<*ftmdC`4&^s=&ZQ10:<:S5cuUr(&?"o%^)i^hZ[[Bi1]i'n/gS!L=ui53pM5]Os7WYpf73_]?iTfV?[r%SkF[Q29n29rcWQ$QrQ"s8^]*ErqWn1Y+92(brftbns7QEi/$iIi%rBX-tX.R>=4C,o)3W_bL&H\J&5`rU[K*"QL#s/X:'_J2bPeUQSH@&\PC-\ar$M:>*p#oSUI33DVW=>N!We:cjn1LtGjlt0Zl>!85%f]i61N+kcW19I4`Fl*Cf#8It@k_daeos#O5"GK4@@RFPg9<fC8,oM_Th8PMDK&tci-]==]Ni7LbP^p3"B(R_5-+[Dljn\hL)=$$Y%U:6h/l,EEGB'J5Mb36mLQbqKZ87JmXY4J'p?g%#r05Zq:bgd"[Onto\1eZ+gq%=b\cn7-*(%%#r7<;3OB8o=cF,P>l*O0KLc!&Y^%FOf=S<+7I)H5'1dB/ngak;(1];r.+1`UNsC/ofr")8,8:U^9e3#i;7KO%55\c(pRa6^Ofk#[R&r>sC4l$THX`kA(d<mu[N:<J@c[%hKClUf4:qYN4Bre`)ZUGWUR(<0iBOBbD&<p8'5C./b=Ya<R)9Ug<Qb6+?_Q!Mskg\;*^\O)>O1CgXr"D2WuqA!B`W7D#pK_@e[):%:SnXtq\mR9ZJIOnB%IcA%O@c'H^G6B77eF(PM13P/9Ag9ETk_7DLE%`C66sZ;!E:eX[K#<Mp&Z`#u5;>7eMM/?lUkn5$,rLCYD;1%Q=@9>22Fc@J_hVk1*BjF]4)2r&Sbj;fqR1l8CsGnon7(dW#DM.H\V1:I:j_W9c(i5^W+G@TVE=r=<T+=o+VXmA'W.[5c&5Ki.AUu%U_9:Vj"lI57uZLGBJj*@ab+0'm!o+Ylb;-HHh^RZm6)]MSPfQZ6L7g+Z.G<tm/lQFnV8-Cje\TA!AS5g\o(AA1"aSF7jpT"RU(^/%?a.%?bCZ?3$:$8eOU<K\>EI5^`UMqdhN.qbb[!E>]*1#$1sWkACFGmiME@[!CsmDeD1c#g;=C;NOqTJ:VR7D*f)4;R"=M2(q^fD/%GRq%-[2YT(C#7O+89P\Xj[/In>?"iVr/7r]#Fn%lk&]lNC@aZD.G"b-(1o31=X^Xh&D@/`QQ>s`(T8GB)V&7XY)#TsqO:lG&7Su(%=?UG*/!OcLf`?VJ#WrZImj>Pjg9%E76k/8%@TkU7GGMm>41`_b@nt?ra4tS<,bf)9=g_Q!g!Ju@69c[\"%6a_N#H>'?#*!HJt&,1%:U`%n?s$"s'LNHSFs\L\!CHlA,!kun*j-:A`)+muUUqlgJ-"0:AY0^=RctfX$*ekZe-%Hpee"V<1W.VJFhOntm/V/q_!:2L0/_a'%LMMT;@1gc"<i*_:cH:@_e`CYm]!^Q13W(F96h6=le@1Ck&kX&'"*3T6UZnhB[1nAJF2bO)144suU6XEd$cHt;BCS6X8*&hZr?lNF%R/Oa4#jlUUr$3-1BH0,W&*H(D/V,>oM$,EBhi()+I?"Ju=^8"D.rUZ!gLOCL(R]JrXQn;.N$q"TZ>*X`H!1i<#%NR%b@Ern9&<pa%h,:+M64ifT+tQ&Y,Mna;`)+=Df#&$4Uc3B%kMH]qQ^=b_SE:GJ5(,TdlSJ4@>2OH3&5_[U'V`taD484cgj4FR/%:pW&C+c.MGJd3%`m+\I;`c,olmBk;m?k[6+>Sb5G5]*Y3F5=i%P3G5QnDM;!(F%#g`UQ]cE-B2IEBX/d5/t:#Yc'(@r.I?mg>=H'T"Y5Me$E3oh;(6%5V:]7gNkg&L)7$)b'd&Q9p3+JFo'Ri.0&T0f?2VgQ`dUY)Kn)IL&h`pn*d&Go&oTQTPQ&=n4h&@gq-cZ+;'i@QC;H3^,S=RP2_@;%;X+bU='uRA)NT3P2()(?/#^r5"*E[9^-FqffB$>WC*HX;Hqns3;H@/=`P>aca=;>)=c]A036qA*@g,;t6lbPI:3)>OqU7HH=9m<?%<Xb\f_PqlJ*8'bhX:ZPc_!45;4hX8XP"&NMA)jg'9%>/T8qB2'kEgVjjlK!%\ZWWY&p.l]>$%.68)+/r2!_:)G6*R8&VeRj_Q$tV%@%pqHXpldj\@Q4^+]<YQkScI`hX-bP.8#9uEs5C9C\@p:?!H+H&_Dr[#00^lDd0Ig)331-*W)EfjYC6N/l(uY3A.Zq04Yi&l`hCE%h9A*p<;rbn$ToSKo2tX@.J\+2s/:rC^Wm8\#C4aH&e".N:[8VaPJ&]=SIX]%J?9(Q_0$AZMk5+V>5DD>*)NVNGkB)S`TY,S;T%EX%/fs2receMSo>ag'b0UYN=S[*2Fu_*u0OCELgTM^qjYnY"HB_ZK<]QS^'GJ!AYtN[NE(VmDkh%:^1AB3r.c4'V\bP.J=t-O)o\'=<%UW*%1i%E*L=&N4N60L?DWr93Yfnj-9"%*I;dF85s6P`dMNaf1e'KsP,6E%t,BC6T\4dAk?,5`&283(3@=U0InF==4aJR@RO"B+89%;t4uN(m*m,,'P>pF%qUGdjI"8Hsp;ob!*ihbLT7p`;!h^VaoT".7/111C@-gYj4dXk2m<gB2!HT%R+ql]e,D@9qTujnmU7?.8V,5%?q<S[&#JAFFLno"G7!>aWo\#^jZ[U9WX,:XYNb"UcQ:G]5e-9&3:jlUlg"B<].0SO_j2H#.n]L$W.nQd;NCk^1rM69Ofp@C7S!k^%%C8V):fet/lpsa+!t^N\qR*+f#&'tY4<[j*;'J?cIS[S!XW4:C!J:UAI,l1Vn7k<lH(0,GEX=-<!hO?*j]hc;@<C)Td6B3H-8Q&1%4IY.Hj=4-&o"LsU!E--Yc,&-B5Aa\.VW.OKKK[1c_D2RfS(p=4AIT-o=,A06W6QfhYhF?>/6j%&VVDE2IW4NSYP`*Yl$_3r[!8=q%[2PCA+g\%=$'TFcR0-7r90LKCYhD!KcJ`PHY%[L(]2*GnEKQK$h42WEcD@LR"UNtRrMa<=9A1W\,6fTU??a27R@(1ma5L<(Ad0Z[%0G^4uL9_31C+3Y_!9NI'N79de#Dl#D>mD3iq^PX60\e&n,2*#l?t?>CeAJa')`^iVE>']qhWAun6&9rM6U(*RO6]G-Ok%u_rhW9k%E)*jOa<2`Gk911jN#."IB;2X=NlkB_FKZDaBj2'Q_h.-j?)stag-pSh,<=M,7tV^PCP8m/k`11b8.8VWirQ'er2r"f&.8srhn*V<%)\5.lP`YEL2l3Wl&s1l->Qqj&\<7@WeBrDp^J8_^m`0<qDI?L%FY.bgc6b]QYqDtF')m#QP=isKLX%(.OIkJ98ao2IPc%ecZJ,pn%AIGO3Y-0*P!")RPaLj<GCM18U_Nc/,89Bi%kV#:'$<rAF!af`DHJpWC:$KRalPk(U0r8187V=rel@:9>U^Y)'cf)">^*%NO_563'%mAA"AZj"BQ<DPCa:2*Iagp7L=3&+XeqI`J#As`K!,gWU^2;l11.0iM\,XYth'Lic^Bh87tZ'06r_3ptg#:5Ze=K"q\;_D%3TMoKc%l/Y>G(Ef@mHt;R9F1V^JH@?<eUC]A;p$&7rW$&PncO@5MAK1U'=S"Z/'IF_0]!CD_"X36DF/"UEZ4VMmOgl$X2!+#ceNV#J?08+]%jknol.e/&M"2MJ!aN`l9FaHuRFA]3on;>:'KCck1U6cRUa?`_\Ee@8e*#$[q&;&c4[R8`?&WWU9DdsRb1AM6fpEMT1@)Pif<DPE(%Sk(%[o7qM*'E4l>/4)a/L1NcLX8qtR3t0;4a`Tff-3/oS-/l/c[YZlbfUCgO^$T"<(B=RN':Qg8DEYQ8'9HSdG/IOuT\S58eLitO%i)X7/o=hSZmGP6p;[!Ecq6SS69+[FV)r5%skVke+k<Yc4TUo9q;B-!Zd+O^n`d?'4P?Tgg2`n,"ok@M"d+o]R_(pSk,K'Au=sqM^%>>m(>KcOUeWrlP8N>3)Tm6hJ5N0]<<'`i,F6HaO[`m!q&>K[4(($X/fePH^CaHY%$ECq9H7H:F>G/g1'&ciZ0\(rKPh=-\qDkS`G%bn%I.:LB\ogeui_K2b\<2<o(.!gj$P+;P>Sf7dHY@4ODeh#'gVWZu3j(lKBuI!+0ZUGU5>K$L`3aMZGeFhY`>NrLHP`_][kpf(B7%+@KYtda1N1=n[<1csQh"@8S=tmRXKCV[gki=Jo[^En.<0!V)2co-]fZaQ#0@_`40YMr>@0S\TbSjX7""0^YhZm<D!r-NfTY`]WXo%CY(M`jrjR+XlSDU>?hV[mClcq5/NE=?K-hM(Tse&eW?=6ViA3((0&oO_IuSKE5#XCS4M]lLL*3`B$uIgYS_ZR=Wr+Fh*cE(.p[g:%BBh[WVZt8fT^"5fOIs`-Yfd+&>n1Tbk4Ffad7\b6P?l\JP;,FPHQa<#Q$6JO2r%0N-o+.'B>nrs4("%c+2_BZE\)TOC$>rrQc-g4%f9D%\UIti&abo/P,nuq]+FSBc.5S@/Ac[AZ9uX[Ep3*g:4!][n`$Grf2M=F?S\Ad94bEA_ZJ?o*!0T\6!Cj@!K7FpPlf]&t;M];0%JC##K]08]pbcN(h3c5i,KETar3eh^.]^!^gqCSS48[S!$Tr2]I.7dO,<=ZhVH5>+f+:-5O)3rt,[('_*#hE2=3T]HC3=7jS'fJ4L%Fh@IC1Aka3s/;]'NiRhUWQ.40mcuC$ir`--onE6n$:(-7jo^^l&$D/Y;`C/Q=6SRqndMHt7qP5%H84>jaQ,7PLp/^/$aVu:Y5,%/%A4R5j<(KeH>U"$&8FZkU^@]Te<k:nb13VK@q*DX\\n+,9k4M,W<M\S9R`Ua_[[X$"Cati!:#FTEaIsRI<U:k753C5bja_.rF`iWZ%cC1GM8]C*@>NlGr[l.`'1=Mo^2!9p.%+)GNY'Sfd!4=C'bAt67+<<!<9TR9r+JIdb0I6am@+%tj@fl].,\^kL"X8V]GWO-4Xtm/)%OiTTXpqd&d`Nk=R$D]$Sn)_M1K2u7?$dqCp@e-lFY2e4\ZctM[N[Stm$*CW!HGFnqTj^5krJkf_'f`DZK!d6nb%e)F#Q57G24tOL%Lrd+..$F3fh2LRF(%K"!j%ufYOBp=>l>&jTK5b49B>`![1!Tt/-u*Ji'k%Hj.j)c%9(La0RctYHMF[G^fN$K0:t..1R#cVtW55]d%5EHYfShU$k[l0oBhI]PB$@.R@i6gX\G/rtg%P^4G3u9O_f5VMY:s+qr?7hY#P;#>3fVUWoHRS\,^ngP9(aPQf;$Psimk];;/Dp;U%+S?;/<qa-Gl81o!r=02Z9#dt#rR'Vhg[JZJ+),]mU],jCJ`-]#eR:Q*NQmS\Kd%Z,D?a>gJLJ%u#-tNcLu%>)@o?)l4+3;oPH-%d%F/CAA,).=E_hL!;Ob`@=LL:M%5FF;WZOV_.e0?JCAeeBKAk:;0bkJP4q`%<XB-J@h+YEW5cV4sP:Sd38F]:aekFN+>86(UeaJ<Ne%VBN,@,quJer[bOnr,Is`gN339(\=J7jQC@Q-P?Orl&@Z7:^POLRuXh0bVsl!-(<+',^@6@<_8XDJf)*?>X4iK<Mom2O7)/:LfQaQ%gp64kqK7>6*QhFSUrhB7Q/Qs'_#]F8VkO#>Z-NFS/X2?5qFIn1QC.^ZV+^*(0+O*(nWu/5\jlC>S432[4JIM=4):c+Ls4,>H,q7d%KXL-;6r8^0[bHg%3nj[(*eKaYI1OdUT6@H!4XUiu^H;#p%\b+&'#5(F3/O*XH$"Dg]9sF^=aVdrPaDR.0a%cZ4*n1_`Sr#?9@-p-%dhrjXT$B=:EsMugh,HT(gLKa.e[9ID1pL)&hN8`8!<LllK+JOJ]?t@Q31*Q/kZV7BQ7aXTmi]gI]qgh?N#-aTl=dJJ*q6F5+WOqJ%,^VXZ.Xrq28d;";3Yp5IM?>mO\HlJn\`]/PTIN%fc49LQHS(>QX<p*9-F6Qi81$o%l5==7Y((:9f8atZ)5&A`onk6Rl/$q8WbcP&%B7:<`JY!OHK+/^/SJqf(:b-:img7KP&]N(SC!@;^U`U;ELtdP52F,EnmR>\?hq!"8U=,%:])=i=1>p?6Woik[i>0L9NseK/aGRfN%LU7/MV#q>iTTXa$A9V9S6n5Un?,&Vl==TkDg#\3,T6U%aAiCYlh&K^^;P6=;MEXCa1\*\VE0#<U`"g+\-2!ThHjY,'E@3b.)2XE'%'"!CLFP]R^%_?RlrCt6G!SJ+4Q0[N:]/#9X5pl1S,kC*%$7XGKEh7M#kR#3lNt9L(Rgg+C!FiVX7&R>EVjfAtB)0DXA)"FT?iUEg%9=$nI4F."1/)dK*W,&lW!Wa2*\fG/uV\ZloKd'UhC";Z4;kc$$(iF]7+`n]*pUT[QG/CkhZE-tCO\53O[jG/#6qj]7#]?/N=]@e?%jQ-b2;lH[n3>"Ohik$MoGfH>,,)I?IXXZjLd+1J9I"=\[!1_!@ksNK#cAXgr^e!8I4&@*fh53EJPr6'g^E<u'T4T2%G*,RkiXdEf%^s!j#$$oWtH[s?T;;//*[J1]^,UX9NIWfufgaJN<6T)`tAT]/QBo'Zidab>+lGB61MDPXZTS)oF?QgDAlRuO-">9_t4X7L3O,ugr%Q@0@>%qo$ke]nP<]4@1+Q<\#cI&:Mb?QL7ND:':oh57[FMHa_Dr:nG`,an!XK&Q#']3N(r]C@WjmD:E_*_(I,$FARB.8"e9>:Di]%[$&A+14Z^"VaA9JTL^ZO=Bd=SOO/W&4WH0[0WGUKT.;<"!1p\m..jLCp*0K[CatupqLfG2Mmaco;.d)F[V!gf#%IpEoCq7(7d"=`%f6^YGRolL)GKXd0c$`)PLZi7JT_qp;c4gEU+Nt1CXSfjoWJuiQEK"([8%B8FC-9ka9<CBFPV:]*@)m$==4_7cg&[Gnll/SqV(RqQ%XjaP`"<](F5gDqp<EaUg,GlmM%]%@^T)Yd5m7-T<:'-U$\+W_Vcu6XMHIQ[j>8p$NL2]CYp=FBN9p]S1,U9H":_X9*;gDUK3B.$:%DAA]bD>E&RE#6O+V4)e8aT4iE2TV(#+oj(\kO@V'<=`!ik;<^Eb#.a<#Gfaq0)01:Ct?EM%i(4*[E\+,;>M;kX'$>q6jU,8]3FXD%?T..55jTW$[M-%?UBjff4BL;<$X';^m*?CT(dM6c,C9jU%sBNSEIol2*YG,)$TVu(47q+[2M@[kWfQtLh7>'lndnP?;/cjc`3I1q%TMu8;]Gl5WKlkEU0C1@eoVI%Pp'S*88$$P]&2<>8IA4%n%C2(SGrKINe?Vkgg+n,UCBW2H>)73TA/V:)^$5)?q=3nsLe&I"1um4B%XE]a#gKrp]\'/hr%bL0Lp'P^*9>R\Jn8cF%EJFbJMOCdZUkt[c3jarHKj#9f6Gc9bOrq.u5=8;\Z<08I+HuS7Z#tg46^V=Wh>gO,%d0'>m=cR>%<<@36b8oqV-KQ>R]@YU1X(^c_$!JSYaDI29O[>-MO`!r"UT/cjlH.1=aD67.VOTG-p?0Cp9g,,!F+OQu@@Q`'/1q.J%i=5m^l`D;V,;UjDT_.7=Vi]U$QIHH\4.#.lSWE';Y1'^&B.e"_PRl-&YGU,<IALJ<FU:AJ-s;!MrE@1l,<']dOTd6JZ*A(T91Uhm%!4%dI:I)MTCD9i^R%h7AJ\`\Yh\tX-P2$,[hgX67!$=oig(jEX^YKHN['H2Q:,'Vhf<ERO-'DY;qc5+fbG.p'''f8;CcaXg!5HYL%''XlNMBn!`Zs@cIfBQ3J8-LF,+60LY1b0k:@F@!3EqU4C$14]iaM9cXK-nF3j\g>n18E]+FKN0E`>J4?E,Y8Y\THjQ*fu\*WAc\g%g-%sV<`1?;6,dq[`[A^@[-[0t\21lY9JEULp#:e!ib-t7crK&&0JCIh:eF%,fD>]WUFPbAV^7+qA+fH6R]gCK^OMCS?XMB8-!r5O%=9e063i(6]A\C>ooeN?,i[dd*hL_+/-+VE%`@._,T^"5&OJh1HNB'N7&3&EqckZ45[52^4IWl>[)3h(22KYkD,<9(9bpU`X'T,Db%JF!(GIehJXVTL#+JBHm(Abf7[V2r+#P@CTi_T6hiPV`3YFJ-LY-,8e/ZE><161\]M9aBncDVhFk>+%otIY7-6`d,Gfpne9QNS=mJ%lk8s[6'u1"D+nIg4s=hB;VF*0[2U.Tk+cPrONMT@OeL]O2`"\4I1-GS6N[An'_cCG[2HHR<O*b%9:"cRlMBSO,1EkPgVR,9LAI5c%q$1a(jiSUJ5bS,::P)@`0F"*_Uqg"GE!@_0Xc02an\d/HV\4PHm_"\K9LRlU5j!k5Bt*@gPjY"N$taE-:Dj7iBQ1us]dD0To+B1A%aJqRT.4jK$rb<6lE#nVn<fqd645VuHmq/e4KIK,:X<nP$!6G!u*[RWiGq#1B_ag95$a['(A>*OY6RfiLIirjhQe:PG29CS&]auM=%5`^btX8F8'n]_hdVQTu1Ir2^4nG=!Sbo+h-5"Ua$A/+LemBg@i(a'5sf-%&/*PeVL_8s"T21P5hSQfjmDLcoE=[jA^IkP8IDS.MB%q_<o8'NaM_A6<p.+r`Ok53nAd,oh1;<W3IMjU60p1^)l^Y-:!9q[O]:O"0i\.Aqjk-!54G\BYs+<@n5@!KVH:ea1k`:QDQ3@ip>d%`]7%e="JfkIp98oI;%['qIO%5ak0*Y:>?GNaqjsRQ_qe05?k5T3/iuHVJ=-Ec'T,`"'fq,!/u=*_Gp6[Y%2^rA3\iN3@5+a%%)Vf%mEY^BWIpQ@rAUqWjWubc(^oo.1t+OS<piW`o=Ws?>ZbNuk[`Fj/Xo&N0*2KU[':>:bJLb$c%$molIP%c:m;YUK*(kb(NE^&D,t5/%r:X6J!S))=99fijTD5mp(_D.^W+&HuJX]N=iimgBUaC5DLan'KidQN(;]1<RQ1OD9\n?;gh?5N5XjM^.RiYDcej;/S?WOSt?C#f2%['%\$)sraRW;A/3M(;,X]cAa>V8N@'U>^%sU1Y0)KFC1\3$.qK?3oe4=]Sg9`Q;*tea7Od#tf@$(DJZoY:!B<ZMiB\:;t'a/^mj;%9!.MAI1XK&KtKHpL<`I;4?goF&ra=U>1Hh$efZ)j)$_Mt:qf-E-:^,5H\EBZE/I/eYZ3L`XoYQ)Xr!n5=Xk$ZZtlfmaAC4uOD/Qo%i_*Bn68BN$J=JZq.Us8;T18p]X&Zr:]97P%-i"[BG@VHg=GqA`=G8S)mY#S$o0UjDU)_cl]tIc8or'GL9+["%=M0bn$YWS==q-WH%+)(aMqA3L^3t)fQ49m*//.'^*HAM`VM1]M<k-U^Fj^_W>&E5\2_5ZJ7QUEsaHeF2$qMcKlg@G'1+.dST]7X7'E%nrnJ>MBE7LkmT%8>@[?//p$"--@]pHq$rTg]9jC)fXJ"1Sn#6aKBBmTHF1HH^HnSC"I9O(ej?/?RO9<!Kp._i6bK#5c+q!C&LV^j#rN)K+rfI-n%Ab%Z31c$k7XEb2?&C=-&ZZr>ZTk'-:5C:#V_OZeg#KOSK(k5V&fmq%/Z5Y1YPP<-6gAn2:AemNY175lW`C9K"6FO!.RD"=;TZoPa?/8%SXjPb=(L.-o/2:^eM?Dt+M.uQ,pO(Z>I(!oSO?K\9l!/'etN-JBfYWO<=CMQ4Ju'k<Do7t$s.I\,c-\G&6:E9`&ZG,@&;Y&]DAPa%fP1f8-)jtJ4aKRufBEEhpouQJBF/Ica7OD"YLOFsA.V&_+".2d&@SMc_5-'9i)S+0/3`ubiPK%1$n$'03CN=QoP(d_D.u=S)'T>k%%YjX@IhH;g+P#8_e.NBgGsi#">8$ga`41[YU8K$ubV!8D;aJBOU*pOrY]f)"Y&)B-F(?]UlH.1$L@Qt"l^T#.@-AI\75$(0)Ii(^%OuTKMH^=&j[CIhD4k(I+.+P4@3oaP5%:Qqd-f0('4Dr=WMgJJeOb1I3!QAOibN4Rd^m'JGg&cLdYg4_@<fON#K$/lU50Yse)KYmT%-q\Z)Yt6pJWiH,6)Uo5I`)3f/W^;'.==PK?J?k)X@2;Thr<6n!_kT#`'WYDZM]<A2-%]!4,CXDZYCiiKs.]bN$eGXK;&7&s@T4%2%5(tP]Ss<e4A>JF^D7N8bn)TXCV]<N\4Ifbn,cVna71*RUau:':%(9>>&f*jN<`9oR(UbTWEk!eA>s?r\619\J;3r<h'U]I'j#r^!%&jLqc=C#[",S'JU)A7_jk))Ticg%@Je38,(V2F3roR+/h[AnWV$+h!(h@E<d/)WRk?Th]HZ,jr's11[i(<jSj)gUrGAK3Z]D+><l%3e2Yl*$Mus,TS4(WpUutYF?^B41>H%/BL>Y`J6f]9U[r2ak?qt-^%LK1-`hpP]"+C#kQ-S3B<N).-j$`T+YG)at#a^'*<2+g@Tdt%U9*;2=ncXiD5\si!A0`df0WNlJ$`+lk%%na**q/Zr`PX#:`_XJhra>H[_)_eL2eIEH*o,.Ut"@S7)ga58(0q_loBBudR?m5>Dc!Q%2(>hrGC9/1_+YoS3l]$JVCN9iHO_48"RpeAAJnknlYKHTn*6&hHGXbl1<LdVP%G<:+r,ZNO;bG<+W1Ibc!/h*/.k.VqUM"Pk,r/A%i1s%P]P36^^)bZ<O\.240%Ls=:0L+4IBkBHW,Mbe8M99P,!e"eCaqJ;7-"YnkG#[qJ=pC4-dYif#0C.O24]?`?t3:d:mE@=_l=7@%]7iFc[=<`%BVl]Y<r5[E&`Lc],dXr6_2CZK7(dEDNZiC3Q\%-Qm<k!?\(MC(2Qj3;`+"(b)XWh.U+Su-l>C[RhA87S-9.?^j!Q5f%BiZO?,b[$+;DB?bokO&+(%&;b+(:YEoEhIF/oH(iESWdYlYJBJQW-1<3jEEJ%^9<\pQ*bkf.`I*Jcm"A:P.ALr0#:1*YTfG%/0/N%^?JD30nN<*krtPLH\(tOLsY5eZ\nlF/]r@T&bjhP)N1>#3'k4]`2FLOQn4VZ`0?3[G#,_&WkXe_SOC<noVl2H[uu6UZh([ohL[c_%P@.WB#/+Ii(6tV0qi6PD)[Thc/6V+,'h`8_2)D!_'cBee%JH?F?,qC[5uT8IBh(7T\[kUJ).CT?ZZ_`N$O\N\P0j,pBkUS50TDP9%=dml@.rZfVn\3Q4[NfN<X6[j`GIXl=R-.?3On&eU\'eamkIj<\MrZT(3n+d.&<nCN+tU$OJQsVTX[,5><fu8A3Mc_t)<UM]lIp,I%E$]?(gIfW5o<$jE&o]4&bFH<)0@8!#`9NgT'F#I>8`ru[igEfm-.n-^a2[(T%T#]o)+>)BM/G;@`IC>.#f#mUQlNEk!kQ(agl1NU%d=bt4UIHiN.@T9p+:00Qr=FUl6bjag;dq<^#EtFLaYj6`_Y<"Q\"I#"XN^V3#t)?j^ZQ<.aBS_=c:mhF58A^*L_?)D$d2&HV=PqG%*H0,%Y,CS[ZaOpNi"TX?2A-FfeR(_5PFEDSI\sCXWG>Jk)PMqK:O"D)1K>(^>O7)poV#d@3*`:,n)ous<L<\D!ohB25&uj`!TO*/%P3"o\ri@CZ+?,6'3MFi0[D-l;P5]"J<BqX,JkbD9,.CF[As$/.P2/3I&N:uLUH"A(B'],"6,S_Y&4cn%A2`)X'fVQM7RY?DPN`5%%3f)Wi2VF0Oik[Yu8<3Ig#-E`N,qZW*;W<hH-3YuGRqopbH57V%foj!@"55b'"&"6EV[ZTOF9$:;UFItCl6>rr=PdhHJmCQVBc<NI%6T7"B>#gMY^'68lMA!Tbigd8b=L)g+Qht`(AYKs+%2CToo!Rok=BORi`-u,t6U8gQPOlaVH9OAnSKs4=D>T3[$'Tjq94ehP+jnYg%eb3l>XZ2/@JhRF2e_WSuH".5B*C2">;3]'"<kGk?:WZ*l+_EuV)5>]iC<_]6b[)pjG"bdVI=8Gd3<hPHF)b<c4C\R>dN?IFee(//%"o68([e3j7Xr!mF\n'NAg?i*B4cF6.Hq6A6]?'m@)90fIpjg`^ZAohUgsA^"l<\0Qj,+)J?cj:Ka*,6r3og[W&l9JmH:B57*4a,u%YG(<VE@;4siuLbjilt=`,=m&5)(HFr"S2?)b@U@jHW'J^G_Miih0()2^i42L`^HWZ)UhUsKOFdSX*EFJr3<OpT9Bd$lW_"mf^2.)%MmN=#)To_"21hb8AH6p/Y'CBcj_s:*.b=jJ%5I<E?=_468G;OE2LkPoL.nm5MNuaf%SW=Whs_VM0#h%I:1-,np?)%"c*/$"(>W6_%h5Y6s[Ee!A7u:']8j]B,dnJ[Jj9R7Qnh6.i4^=o!mjX!peMG-"'Jk;mmtdNij6";tVY.?bmla#m3r8"c&T915Zr`Gf/f?[MWr8#4%*!XuE6m@)f6]hgEXkS+d<bSKCA!dkt&iB</BI"9&!>LZS\AL2l(0ZX.p#KonHr,p0@7h*a,7b4<#CQr:b.DU7,fO&blgbu,;o>#*%:0i/K9)e-F"!9fOf<g\dq1,""j?0@u/TmTk\=nhbk3*^`01HTg!g'O)iBQI'=8;>UNVDg8(^T:Sfi0D&;T#3%krMEk*%e\Oa==Et%19/;4Z5Ij)%FL'#A0SiZ^\*'cP,&qX'7k:+'[q#(EqqV;p%=l=AA4XcV7MEVPI@q7#r_<),PD:bKV=C5F1oj"T$l(5D6D>)T],)T%]6-,2q=0Kq*a&PBp/Y!h4hAeI8LK.^&4)e-b#C[!7)RUmGBoR/J^&6'Tu"&TiMhk@a^i:@Y=OhY8=<BfgL(Y7;389Y`522\ZfjPL%&eP%[`6L)Z55,kf+S#eiJ!r6-3Po)G"W<Hgp\-+J,'7+ejp#=5isEl.NS?V6jR=4Q4<;P@PA*Mb)Tc\(A=RtRh/8%'&an-\D?@f1%7uCr3%'?*bp)-WD;!>,jUCLqkd8`@uY,ie4:+2=4.Puaq`K66Tb"$WTZ5hge]n/utM1-Rg6&cV[[D%`q-n=#EVG9OtJU<dOK7fUf%->g)1,OX])1?PY(NF64!M1a>,Mr!#Q7^=MC]>d:_+<R:ZAqn0Y(9)n0,H0_o9X1.]mO4F;E.$>p=rREF']F-kBh1]Za`7jL6<q%"%`_@Ql:#6,:rcWaCdSD!5@K\L]e)'kp6,]k&4LW"k8Z54])IA0*Nfg?9n?rp;KI#@_Dq/#8!kju'KDg^5[kGH:1,kCk?#F@,6R'0_%n%IG+oVF@6YsSJg]5QB1/Lck\K)6'kJcp^"`VVBC'J6_=$P9==1M`]5(V7T!<@'&lipV5^R<q?'I<LXu76/Js>]KI@naQ%GH*@@R%"kigYW_?+H\Ab,%Zh@'AXj(%(^%g0.>Z#SZ-]d(ffk0((q%/Z^<AgN%IY5e2Q%PBg/8iRn,(YqPM6i!>-(c&u8;=&qEhZ^1D#\7H%?`JNC*,QHk;d'Ff'=+JbK_d1:[%7g5ZF3VHBK/rSn]b4GP;egdM;m5(T]K+#)&godME]832h*P;?Q<5A(3)r%(ffBjqCq(<'>IYX%;-]BP`(J%`Zlp1(R"_c:X54I(DU"ld(os1<VO'\i)JQd*J=ETAEDKr58-\UF+s9.1<O:4/6:/pI!HfVKVMiTM3]kCq&VH:QNkENU%goC^s<BXqO@Vr-5!5@9fZeJ?fCu2Db<^;]L&@*^RF[p'.<;&R0+Y,AUSiS)kWuS3m)H%*N.Fs3?)*XS%*ai!8U7q0@[*W(Ye?!3t%.u2VF$$!!crC<(Kl!%U+;dXFZ+Hf)W7^.\/$?j,W,M-Ju9BU]$gdb*W;Y[<\_@p1;kTordf%)%@5A0XLqmk[>=C;QhqMh>@7aD;#%rp:J`acXPAdh;f]h#Ouk+%.c[M6f5Tk)rG5Ydl*l-'W@pQ#c)ML<e0:mCDEp.njE>=pF;-bmc%;"#W?LTt7X;ACZqO<THT`30O=*%_Ob)NdV,r<s'7[>]A#[%MN-mR*2^HTasrgHV?Wnl(T32_U<5b)+c>01,MQC7O,Xh$>+:\g*o"^CqgcHWiH>/\"?!d@b'!,tF'f4l%_4$!-h6<.^7MCHQJihq-)ocIgi5cF/JJ_TMCkkhd4-N^$a*e;.o@lFRa='!j;5QEqftW+r2Eet\;RM'I#UB\U$m`"r()Zm>71Z@U%bJ/4H4OsX(;ocsOaas`C"(q]eeh6/mEQDlTAq#'MMAPckd#s,[1i"de\Zo!qP$Obt<Z>Ip(&RsQ1;^W1OPs]Eg#Rm%,p4FYL<1E(%<@ji!'2hCuSu"V6=1e@@Y7"%S0#^!SA37AN!%pc%/*-c!_M3bG`Qi@uKe>?)Q+M-6\)IjVcVdgNqJD!O+e.GA&>5"Uag7R0UqhSF%lIRi_`je]W*5Z70icQXH=(qY_oQ/^E+f!G=r?@^:2IjgD'*XH=a@=,I)qAarVOMYm%bF&R=Tt"hQM5IJ/)6i%<3)!/bOrn40Fck3%-(WgR0X81Rg[lQHK4T3F"6=hAF!(]F_u`oo,4&k9aN4P<bS=(HBjM+@NBI2fbc!DFj8L;>^3O^r3j<`qZqOp[1i89?^ju(9$GT]D%:`6]>1+fDU,Eq:BoYfeHS;RU"M=0D_5*.Dr#cUk(L\^Sp[(NWGN+!DaL$9J1FQQtA?cf"dr(C]=4h\!$l6fb#%l[W_18objZ0oJC%-9Z#&0be'CkOM_)*pO9TjHiqL$3pSL"+7F[/O3A0:7HJ<+)8nG&9\a/6SujW"g%)1:0$\lPo)PeFEY3Wq8^^8CMJ/&a>gLHdZ:i$%T,r(:#%Sa>hW]14P]b(Q2G`6d;2;ZNCB>jJk/r,j9#@mCSW4.[e/?T)M7TQ[YH)-QMMF1Q9@ROT6'+0^U5lXdmL:6.BBAQDBBrg$%2>7YK:i0m4*b8/$q+1*KCan!6Nu<4&pZtLA?UCnUqp6+!eMF'GjQoe/d;rGAIuL&aPI?ES#DGLIkj2DW5nDh7&>1a_dW".:,9an2%N\2Wg\_^"7-Y=kC#tfG@b[h583Sb5C#FY)Kb;jZU*o5;j:o&'P3Ab/&%mQLr6KXN2Z7^DXYuaj1b1#(+NeMiTZhRgN;J[c8UV^B-%jl<R..>##Agjb;@75jsoJ*sUbh'+L1G,NfO>mJ+^`Wl&RVQ_$NQ*F;=RIun?_='[<-1+shB[;C#LIm0Y^)=HDnZkWHa<2@)L&a'9%:^D@3OTi46oL'%JB`KX=rJ#tZF9g:GF*7<M]+Ub*e8Y.54\-LU=egTq*C)0YmnPH"+]`sGCeQZ3HUAjO#U8r8R%5aI_E]U)C-,=j%/s[.3Um?:a*4Z;?,?8/56.2AU?:]+1Kui+RK_4Ho524ENXC5WD6Un@GI5XC2Ecc`I[eE35;Y&e:@59Au?X5VT@o8*a%]EJj+>0r@%X53/U2YZ4t0#`qa7b5Il\*$d*A,J'Cal9#QD@Fs:BVZ"kc;/VE#elI,V]X7F5Lf17S+Yb))MQG7ZoHI'2IT:+mHKlJN/@_[c0mL>%+*#J8Qa:tS.uRHu@Ti5cDMfMdcSF^T5?`9fP!A,bCFJ0,`VY,U,+=fV)_E_(6K^+''J$@,=)RscAkXB3kWihVS]/#Wmi6%%`4YN2%U]Ch*W3A-$L:26\=URHE1ck*O),3r6mTc_"k@?hS8i?>HH1(+Z-9i=i,GXMC<!0)".KhC(+T&!Wq<N/OaQ%j7U6e\+QN9m-#3r&Z%()pt]F^.FIR4QVKm]r"Y&pppn'>hh6*RXg*ZJpbBs8-`:b)9")\RL?Lo1+s-)1TlAG!\lb]G,i[H@0Y0@js[T<ZjjS9`]OZo2&=>%hcJSq:`tb$*M4(ZFB1N(k^1$AU"IbTdjAuhTV:_?CUMBMl6)a*1muJ4!@W42&h3<eB_B<5Tbecq%ag$">QNP:UQqWbgK91`oP?:b%'itd9N5On9D7NOXVqd@?Uj$NQ+Yh*9Y's9lDhJV\(9nh(>J%LVj"MU]PfR.Cb):7q4rgtK?@nt6QgofD[DYQCT$6IBTItP2eAifc%'9G7FZT)8t*fc3Ac;Ic-^JIsK-r*E@rPs*7=p!1!;VW3^;%pM,4CP'&AEpCYJsSJJc3;EoJ9]T%g]g8F>8=<j)b<?XA-1$J$au#`%o52f2n+hTh($$PNP#$(a]jdp/FBLY_>6iC8frG-_/:%o;gZRS/oi<5Zf0P5td@iah("]Zg_,4CkVoVa=RjCkE#Rpe<FHb&<[TFUf%p"SB&LfGC(#1=Zq2JRH]CP)&HOGtE..PFrlkoFcoU<022(-Rp7129TVkSm@'&#T1.<u@ht$MZ%`s2IEj82]C,;60g(<2O^A:ug0S%lleqUEMRBX7rYE$<@=HHN$gq/$#aa<\*(m@DBi0kXV'6%h3/F"s"r5rR7Y4Sr.Hr468C2"2YjC'-10:,"%0,ca)XY2RY)<7kUFj\%bm"h;Pi`=#aOnB`*"`f#L$7)nU9=V$#`;@3aL[<7%89NKal"]A^m;XQ`(a!i`rnKIerpoC0r]IW4J8pq]uh718/LbF'1*Onr:Sj;%Shn!WZO;/X^mgX6STXNqiqX?]1'fS`/2fAmc@h/7dENm6WpNI!Egqfli!I_hP_")<lj8BNaBH)=UH-;BT7#V)]\Sl2L&'9r)M3P9%aH0<J'RI\f^\CCac)%`4b+X9\g..G?g=WM;C[=p&B&`XH.K(WU4H"6J$*K*s7T*fB&pf:QdtY2Z0BIr&T]H+/,\=H%n"#6ml%/CT%2-N:rAf9i`0Q\pYBg&pC4fkA,Yp@oPBl-epnb5r6`(ZNYq0C2o,U5nRX#_[IN8u-WkeV4M_M'pMOtP2a=T1/nUa1G7proTk0Hn9g%.Rh]:'R+[I\!N:1Z.Bu"UAGm$N+A"P"bsQk5l1[ao_A=&WC3"GQT)oc;`t['b%p2Il@%=[=8d!lku"TXht.$&rErf)bkuuBci&SP%1p))Moc/d!/@Ffl//o16\$@X$M8_D[T$>8_J;iEFN$2I/SW0Z8g<e34gBljko(#mi3c?3QSAc!&6UPsTbaq1oBK*?PZ0M6`X)?CA%>*gBcm7][FkT"'dY\A(&e<;OS,P+Z]VL=Nk1H:SPg8OY_L[U=JT[ukgjrI2#B&jc7L8[cDNR(a7c'<.^"A+s>bWY$9<pOpDMnq>t%:@"VspS0KVp`-<6iMaa>OsTIV:6p6geoSp=p)BN,72-s!=f[o9-rD)rRQ764a55<^bTYDN'9.'WSro#_IPc.jCa.M(8J%m>dA$0K%^Z]QU@pVMco,J)%:sgG&P09g.4UJf??]_UCcg*dYbm*FR.a+QJ=UFGrdt4a=lC5456ea9=4cTpc$lcdBHH#bH-aH\mmq+r(P'W#o%p8UO>mrgsimtgm@5?pe!9>N<?oJ2%E'eO^JZZml[Vru=6OdA<j)O=pm1-iOV)FG[f&abNA)JKp('WmVPH1Ad`eSA*.H8b@C/l7W/%L&bW:l23WbRAVaOkWAl>Vl`B2Agp[BZX"huB(tm]bbNWg9CHbd;Lj]`T,YAoFjN8W)s&T)MV#kZJ@!2O=>qRbOEj]'B@I<0pg-T0%r0dfm_#5a_B^*TYM"ZV(d>S/a/um35EW.,>NXe(PnU&hIXBF:WNANj^`,b&=Zk\40<nGp3("?:_)jl)MKG*?V%*olcq>c:B+7$?Q%X,1=nrEX@Ji53?,\.?s3cM`"d'?CQ>I9=QX*O&"8Wl%60l)"#W-``_8kdk4ATiPIe;?ah4&.CS8'8i2SSOdU,1X2qmOdnAJIH;<U%k`N+Z&:ik`Wt(E:QY9?:&TWNrPL6F7m4g9>pR!au0O=BS+W266]2+IT$1LTE2O>K^rhdg%Bd<):0V\YU:Ec=sL4nrt?(]Qa/$+la%':cJ=PS_g7Y3@4;\$53m*2TI^#OG$S>nNMr`?_:ALXAYY4OTAp#&.PkDmZ.[U*l6"7<&ZJ3;'%Fh&kR^.bBdt<DWsVJbkM"*q`&g%*sgnOnVO?bOn?o(+U)Bk/^h"mgDSnQ8lR9FkP3D0[F2!tinMA.`gV>`=reoqn)p?Cja-f>_7O.KeRFnmW-_XLp1q9(39QSk_OQ.L%A[PS(bPLYe+LCP?98JRn:CrW,H+H&!;j8P?l=>1:NO5om[">#9S=$MOh0iYe%dcJ;8qqsS4dS:#Ihhk5W'tYm8)*F.J4<V$+\#Nu%Zjo<0ETJC.:5qW94!KpmdAN:P6TQWph"]U5$&YYXl;tgiPs"#LKXD,fF4GSF#b9sqMqX(3,?sE[8aEo/;mbqpN_!@eZEeRckk)L)%=GdU)$FQK7!n_^F"bhgtrb6hrq0Rlo^!Y?*j#\Rd<S]ggH_qED2YJPj[FLhoHbdcE^<T_]Atuknfr[JX,)=gXo+X6>6?Sk'LYhhV%7T$RcCMpF2s5DTFDK-OR(g:cr(^/c@75+8>)lPdO)kbAR[uo5DcDr_?lI?,THfj);-@*#U3CgtiFk@LMXP.!)`:@371KM)*G'*JR%n)oGspQ8r"LMa,;'q#VM-lP*9gQtO!(k%P""O"b)D,G*Qml$6YFV7f[Z3IMaWa9(>"e_6RGg0/=Yb]Y[$gbF`aj2q%P4M+R(HbkY%gNbF/YIs4V'LKI9nK[$Ge8ZN[9"ulB`q2.tX((.Ao#dep`uPjW*n1Qr-)/2t156Y)(um"b<r`mZ5cVhD85$:s#^`_d:B4S`jSN,J%dF8rn#*?-nGc1cc;h2O5"H@'QR^o*YFq*%&!)'i'\+SNO11m"Cd,3rpeFn#oN&li]0N5T&q$Y`NHYcdJ<'miZHFt!CHoB>fph:EW%UUc<<+oBOPQ"0Mm?eO.3A`<R\l/^E%.DE:eH>[VH;BrWdqK:]j\ZFVKVjidlFZMIq$*G)Mm$j?hBu]6pfM5l%\M[1,,RDIcG41Y(%BIoU@Y4TtK.+B5i7mKF!QYVpJ/9A4cG3GL#dWW('5<"noN^jP#EJpi3.*HBQDj&haaX/,$6X#m^%)c+"'(@Dl1"3/f![Sb*mm%_%%.47PqN="Zee(q@`&kjXX53r0XEd1_I>C\9VW>YLXL)+EgAIU6.;3U>_oC`K[UTTMW<PQ*O(hCnO7Aa]35lCj,h.A^5Z_"gH^"f7N%5>DtU!6sALZ/$"N^*[[5%VR4QE?CDiomuAP2E`RIL7MH=5q\[:a&Olra*+Y\dEo0I;Ntu"7_k;/(b8K:_;_oG^7%)aE:KBpT8?bP%l^g8E7X;Rd[>uP>8ark?>ZaH>aPF<bY%C;?ESZI.P8`Q-i;O/j!O_-6$t<>-Rg1=A\$1T*nL^:qcjf_hJPH8u(I5tcjgB7m0"YSS%BcS=51O_VLM-rX?'>.Mmg5k9a,u;h3@%ID+=I8EfIuk'<"L8M3FZlLb`M$WF3fU4lBoXDU2R7JJ>fD<e)p*dkLWG_krrSd-c?ub4%pPIZF\%@XG0p.F>YB,&nHN9AWCH080VkVW@Xu\);_HHj1<!R_7en3?OiW1V\/?@8('\nue^C?hVAnNcb$aN5B7kG9Cnl?6f37&/4%]56P<(K?$BPmLl4?+YAF=54&0`S+(_3,=SQaTILI/iBt,)Jc.n^^-HQq"r>7`ni<ge<nfW_i'(2eec"BX0HI,>kQ<Xf4]_EDUgkr%,<Y99MR2/BSFA,!Xe"86mU0uFd&-[_d4ZX*"Yr5H6W<WN6gos&VWVru\.,fgX(X`pr9cC0;usn2`?'tr"*npp5f;2Kkl"EaS_7HQ%@KT%a7`^E&DV)JiWT6.0Hj^j]Ot5Ak[!VQS$T%0ko\mH2o.oAf&Md4jIdh?+-();OS\/G4"XBq4l4n=+@%Gp<e1lT51;L>7,SX_g%$"H$N*V<'cFA&"J4+Gb;GR+MT<E[Z,qW!H>8"k8"+7&\VZoTq)gJWR-nXc6(9kZ=Q.!-!(X:Q=b+uIgFRkNGl#aH-"@&BfUHC2(_%`5j(!b$LUk,A4"CC*b)-^XR5aPWP,I4ttX#I#ID$@JK.37N:PS!P4G$nFriNH2Brfr<pb!(hh'fJ?m?UB"_;@T#ja5*C.W[`fOg(%Jc+Np/-'3te(FUFkVkX62E=DG^s,<e=?%[FdASeuQBUV<8sYR^AR6'ep/piS1[\*@</3P<_CXDl:^n40B+.L%Qd^Q>?\#ePl.VcC%2qrpJ-!@4cfW*=9(G02O#Pc(!#t]a84>;+7Y^s#B*nD8P12!?WaY_HE-NS-p^Q?,Ne?t*dOEV&qh@g?k;_AtW'2R@\N(;l7]B'qV%Hf(B4[%>H6W$;/nkM$C/n4t1sk+Yn7Ck_VKQkN"n3=V\E\YVt?"OtI)>DYu$-"IeeK0L0g7'bT`:d]8^I_jB$:4b<QSciJEop6.2%ndtWhYi(&em7RE]&S:WVH>UVoo#*)FH;c-4'GR)h<(RZ=Bmm^8'&].tgST,i6K)R'k50-@qdLRN#P&9-0]=&!ALnp.*Z2Hb'pqJs%+79;/9t>Oo0kKQ0U6k7NQ2MP_?WR(]EGC\MhCc)7NpMZJ(;*5/`]@BeK#,dT(B&,T`$gu_[p0O:T8=4j3>YG/no5=kqr].=-b+*7%Yjn":Nd_Y[&o>Q`Q37jN52B.AF:Yao&tid7lD@&Qg4[+l1t;33oj%0UUsoa^LT3pI+s^\#<ih[cM2$nL\MC3d&Pt@bc!kMikfah)%lc>lMF'=A.SmamMhs(c-p([g=ch0_-MgM<365DGqY:@;<6`j8!,(uK]>R9Tf$#Re&:N,/i@W/%T+7u%BYtU8K)j%*P#&1"`2'1)S%%Ug(MJAr6"2S8phn_u9ZrSUn2s,paGh!,8YX;P2ZgmBq-40s[`=dbe#?G.;5G#;K>+-qEZ-naPA-9WOFjQYg(d*Ndd];Ddd_L'4P%.4g-QeMC>[D&]S]7jQ4;##&@`be+DQh6\(F.?t!C9^Ar9_+_!C=bk('!]3qU)_')e1*:X1&7`b+J`?k_(nf,-87"%LVJ!:?m4glW%8.=).#WaW1>W@u<VkJOAFP3f=Xe&ue/a%gmq"A9)$;LTYXJ,AiJk"g]bm`/W5VB@$p'm+]JhYLRZT)#-<)DBQ+OXhh<cJ"5%d]c\%?qc1jbaW/]7sZe5gF6rD=A\(\Rr7hZ9b`uB\&.2l$8\AEY*:%s#YgA<9R4;O[N:_:-gN^,F(n?@FZsC4\r.49?nZpG-2BS>.=:c@%B4_-aT6YJ^X%VFl8P\tan^n67qdL8FoM&19A9*9J[QHWX!2@s7r6hm@$,!D5]#JufPMtum`U6Ut#,18GRY=$5Wn@o)\-)g9P/5+T%(L`8cG0o92Cuq[Z`^0[=+!)+iS(GDf"U[6&]/?U%$is]/Btc`cJcb\c?8l"'Zq@H"%nJ6rjHSK$#qZKmqS3*Uec/%k4HDg9ACj@+%_re@cGrU/UiA(ZhM^Q5\gOjLI*PJ'1LHddkn-gZqK$b6AZ(W4C`d''1Kb<c4_Dl3laM=O4f$/e(LtI;=CiO`Q,'RTX\3pVUVl$i:%T]\EqC$j\^aG+V?hW8]5dRf"S&K0YYomd%P:N<C>Sl#*-g6$Mn>[VQ\4Bk2BZ0p]N;Qdj][ThKD'*:Ph_"0Q3,C),4Y*_oN^h?W4%N[P>'7r'hW-NZ',$$lIu5X6[VM)1Ib5VRM&=SfE3Gl]-_nhQR^=-56/2_hTuQ$kU>G<dU\b%%Z_!XaiXH`3&n-K4%N\"i-OOXOgk%D6Y5TGirL&GN+<=(gr];]#i#)4qLcel<)<q,?qK2"*-[-)9HTY)6X&ta.i;H-=tqhocZBPpf1m*.0Xg)`iM1am00?IZccnA%0EgT%2O3lJ_KQa$21Hkgr?i0-jr^okGc6W8:i5XbAu:):P4:`?#bp#o9R[SY<?AUI-B>EuH2u:BHO\:iL%NUKJ85He/Qu6\m53<%d\6:l%5^E1ZFGrC)[XS>Zi`A!cZ_VpOAu$HuM(7\q84JPu*`-)]6A.%Rn]XSSF4'scbWfi1G0R0j*>E;*1NfiX)/g%;T"/CJ6pR%f%;9.u%j6u_2ml;5J_+Ju#e+HsJD-_`S;"LZOmoJM\aZCFPX.AneZ$Ril<[qb1-$gHHV.8^6&B\?*0utca3IefDNHA*O&$N>R_T;!OI0j3b%&r]=hh,RkT"-aRJQ$IenJs;g[VLm;:O>D)`>s82"Z)]QU>`&\%#b.a&+A3'FQErM-OMUuU`k3!n2%IEG>-W.Xp>-=3f)N^:;ONK)%Xsn/FU"7^&i,<2Qml;HC2+7TV<q*,/G`l;D=Vs*cn-hm/Xob'0FUu2'5.u1obG)Xg?l"11GG6u*O<jpPfUc#GS25n]k1e<<cKEp@%#JS,X,?.`MZ^\(%;,?@`*@QAZPA)0ZoAaQ_8#F^TEJj4S9:R@:#P@[+DE5OSQuD&Ie;HU8\OpP9q?V)]X\^dpbQ)KaA0>66MnMHC%6^<8ud90LnLRq^?$]4aH8*fD^^MWN=5<mE%TDn3EGQ7!j^\r<JaF(neobQE:mf'-!q>%5njk%9DjkF]<s5D/as*FR]QbRuuqr)2_%hf$:,djI&rJd$qD<0]?>0a?rqi7R)*@K?'u+rI2aME<fQ<,rP327rsCSH7r[dVS-DXKZ[_q?`!*-!7,Z+?TN-DP5l,r6o+26DRND%PQW4"/c+k--RsMpMNK.;JJs%P.NX=._'(HS^(r"_4P$^PU+R@.&/@n&-4MB"o3GgJD(8YqmQ3pnmN5*YN<j/lnO[GK6`hAok,HdI%$F%ZsKDC2")X38k3+:'XbYCpn&;DN-<BHL_J]E@pO?Z&C^V\:4QRSDEIg-W%38PuNERWW'ULQ6POmk-b\'`/-'<c!EF-ee0m1ifG%e`MB>3In3KG"C'D2:Pa,!dS2fT-N<OFof0P*m!1@)amI5Gk`==Yc2sk+W;$`b(?%F0@FPn_!O5^'7/i#6un@P0rA@k]'Sb)YE*B7%e?_3IZdV=N5=`C#:`g'[f,]Aj09[(/d/1@5%c15;=[_gcmapAO4D$Okmbh'=c$COX/*1dSKTJ5;m/VN>A7u::!]ZPM,j4\/LcldX%KVkN=8.F^fW=^[+!<2-`DNEi5Xi3;nl>G;hN2l>qS7hgY\G*c>qTji6-\IaoP>+<e[RF)QLk;\\/!GmZdOe3u+M*4S>sq27=Xn0k%M<7UQf+G%c`7TRkN$Bm=r&9$3Ca"3Zf)k\]0<+sa3sI3jApaTVlF6NR5_\[gg]3.?GMeIq!s/j+o!nqNVR"8'>6#\'&_\!()CBRY%Zm7Td(hC-U6UHD3$dfU/mSN,K><9PreDTq<"1*s"j!Pt[>E@sJ:irafo7#eD.7I#>JCK03"NXKC+Pd_U"^%3dGe48,p"]/MU`;HB%lMIhINd^_JG<[_Qk#+(`1):(YI$==d6n5?t4X5<.-A-s&4I"cM-oqF+"WAs@ed3?u95ra=30`kL5s$P>bbch(:Ca6n-.PMd2[%VL%?%p\i3+>JEGq,buV#C?)\HE7ZY0niE#7Kid1(d*6M/,e6F.FTZ!S'I(c[%g[ho_J)GGr4tTXjpHqurf$2F6^g-Ze8O]0R[Bch7g\%beD0]X@Fn;B(5?mlH(=[Vd2[7cP=9!;0^mSAWTjV!9o8s/eX:X-]m>#8Q57Zkh49)(l7XBG@eL>Z_008r`3jQf,NO!kqt"M,J@V,%H.f%&/J>p-J<Y;oSjlufNAih#X@XY%+pn`!]'3T/q,gZ_enOU*-6#(U"PTZ.Hf68qCm5'$jP2kahIN&MdC@^OrGp.A8Z>T#Wn.[=%;lO&%&%Y/MEWYMTfH7Gg&qH=.Iu;fJfA&&GaS`1Ha'=IEou3?,,<hW-*-,.kS;4%[9<+u8,CY'HBFu6&%SA5FV`L;TBRP.`I#AN(%&S8@t4%)W!k\X;f,,@OIedP`KAUrSEerM0j&J*pB_590s_",1qm_l2:cj&0:E_n&L$6!_Cdb7+W;l$ENl"$I%ajM>@N*cejge<t7%/MqnU$!H@%7P9dBpHcW9"1<N9KF##6K70TdUN4c?=G_Bsi,m@:/eu+*6;Z<;@/8f+.BJ=G(l!N.%F`96c4QtMF;K;ZcJYNL\\?l0%c(<tU-uAB41pr2=mRP'&G[9*CGArLaT".sYf[#T\<`.ONSdnj+gOY8p*\\5r<VmIGhu[r03V<"`C%\RTWmV0<j9H)NPBVg5BgW%J%J$\p!DZ*^(Y/q@7&!21-N;"LE'BtN9OLj?IJ5P&+Pl8*jT)uk:)L\(mHY!")#"DoH(M(L*9B]]DEM$(m`b%SN>1XkaQrm1uS8\;$%0U)4p/d?fB/bNgp(O/]k&ecq7@lTjI:"d:49_UMR#\j"S[nmcJH$8sDOc;cu22h0`fCj>S!nmm9_N^.f186L$C1qLfL2uGgRUc2g%ebB8%'AA0JF;aUn!m-.hT,8n]=E$MrZ5GE2G(5dQ(`UnAd?>T4=b[`WL/!M&e:C_?HOu5#A:KWH(P"(*AI6G0f#;nUd/-PE)u/N[%]Kc&1[bA>6QN=%'Api#S75*$UQb`Z%D!:U@a,imcA)J.#//Tu#"1Y7-+,^b*dA!bt!2Z.+caVd9UNo.lhZdTPH`c&\JG*ia_;dG`%J[u9jNHi&En=t7X=`t_mD]l><K<Z&den'BXP.1%m$rASsLEB`,#/dGOO0aMNg)<`MrLDp.+E$[.a!g\Sq+&8B38u2.IfRYC2e@os%"4IDb0*>#]FI,RJ)1ZcS]BnNg!;;D@IBIf4$u]'kg]\pJZ2D0@!7d1V]ANnh?*M.n(QbpM5)F\a!%F.\Jd>0A&j#H4%IUjdL?U=`%^ONb1_92hH)kiSpAH6\HHsR#U`K+f/GSqW+cs6bCb5ee/AalhFJ0i,)[QI+C-r8ToYN2-^BfC91_3P]e_,L#W)_A?DE6)QSPo1hg%XQQ=>r>g>'Y\_[)&`!V$oNCo8mfF-4\T>m]K!r82Y.K5Gi5**)]F/V=hZXr]mXcCV])Y&Micu7=OUL9\$<WGOcfloE/49)ilRK^E%O**P:?-m+L*EN9b;VNWj(LQOr.Q@S.^'[%rqr9/nTOWoEFql:t/4R/Z?tXYZ>A_[f5[tE\cN<s'Vm8uC<g'a$`Jr$IS&R*Y.3^!1%E*o%A45MYE4eGpa6Pju`9@S28%fI$qgCiD`oCq)">2TX@FXRTH4*X,^rJ'57N61gj]h\4&A`d.rP*WS=Y(\rJY(\r.f)l!)E61Dt%![+O<g9(UnY>SF30*5krPt>tIj`"qGCB8#!`LW?7/^33R1X!1FKA<kR"6E_%hcb??>RPVLfH.a1ekt9MgFS+]7a?^5We'SCR#Jkk%$CURSe\!Hd1059C6eH8F]^_l*9>:T?&N8#bBA>o?$m(..2r4tg%WpKNW2M=aYMdDfH$3<<T)JoC===+WpFi3#=hH*)^OX2el)nEn%,cgu!:]?'/LO&\30GA&4D>sZbNj_d=^OQAn<OX%KKoa.?re2%%FjqR)Y[bY`HO,c:>j<DXYcI'a"Q?c#4UJ(@;_arn)+i_gE*kA_%#:ltU!bm=Foq_AQ$.)A#5fDi-RN](sfGO\os%0pZTHWWe<ra(JDc"j3F+DjV0qmmK^>`#W`[K]Rf)T!K-;+7eHe&DQ0_)c+9nueV%1M[T7pF1$oNT6iA.C1(I(7j@O8.m`(%ErS>)SGDAo>IN`N4QR^m.6).D>p<!p9Z;fpX2a]IG#Fbd7!q<f6Kb\I9Rh,DmoM;i#[ou%bN@HlJ]=q"?3p@TZ;CANr8R#&YCNqTPU<g_2%4VQC]Wpm+H_ZdrM@,5n[\NVb8eAU:[iM)ilnUB@MjW!E5Tuc8bS+_TE)UX?eZG`%TEL3t!j.b(P'QW!N4[/j$p`"sB>]CHcA,ECnG3J1Bh]RPR^#*KGsB$D!Ur5M#EJuA!qTO4Qf'SZK')h'09UU*hVKP<a!Oei'QYcY%m&Ft;'g;])A#YF$OiJ*WWN[-3$$k^")b;Q2J'A+c?#s8@md@kgUJ?$B<$RXji=d<B'9At?isG)0]?!(=MC?XkB^iX<e-V+WP6Nb=%5]E]eL:9X9%,>/2hP>[BDLMc27\FE7bD7B]8G'(NCXs_SpjENd$%8u9!g!$2;ZA%fWa4)af'_Ho!pt,Lj7_S?'U"&PS_e/geXNZo%9ap).(M)nj0i;<h83C,EVDB/3?urg986s!W<[%NZ*`&`.FJJ]RlE\&k;)d>sK`:ZU5a'l+=L-2W%f!JuW+$s>hc*lXU^>EiK6,iM%MDig:(hjspj"Q>Sk!oYeH$>#l5&TRq)n`\hpUuRsgm327h!+#e-F`XkVotgc729QHg'F1+'rB1u3])bG(/[K6;.`<W<,*hiJBTbA%IfcTC0Gb_>4Q"iaccrODDGW4rCbE??YTAV6\d7_$dZ@a2X1O2/=cWcZ.b:JF!a^rCNuOG44549a+0'sS'9"?"(th0Z7%IEnkO/W.%(/p1$fI9O#6=XB3Jb=A!T2=3)6.\/D`MuCt`QL]`@`<SPSW^*bpZdKcBig)7me#4A)QD'a%4-C:kQV\a`Yq4ErU`_o)HkX2hSW]Q%W*3uu".2U^Q+Pkha@JUX6@N1*Gd+1h]qRAM77It/$1i>)Aad1b-1_G2abb:EPn$2AZ?FlGe3$oJJ_I6Nn2u6U%WLpO"5lM-&on)4%p"qZIer=C)NPPKZ+/*lT#r^EN#T>5u]BAa,=,jSGl"r#N&%DjEK"$6#mN`3KeRarsi<C/CT1QMP#sR#8eu0J[i9>sRGS>8B.)Gd:%R+ZDUdo;cRh#bsMdQE`<W-QSOBcXYa<`[mt[,*b.<@C0`U`SX!(60Hha=@%7B*UC@nNk_=2]SF<OZW!,/]qCOVe.]T\a^/5rq!_#%=JW/0`[JbBQ?cEn0ErmD_*s'l!Z=%YhqltIRY:T%\qn9^Z8YPel[sW'(XlZ#^QNho:_b/1Ta`348`+j3f^4obMHFP5,^VO31Cfl[%TK)J8qiW1JIhjZ6c9CMDS4*48l>L.mquBTALT.Z[gfmXJT'Ul1=3'F/YH*^CdW&QX[NtmeY%m]"3Nam>1QuG3+Ies:K`UjmlNA!/%33h>nT8;"eh_B&6D0r!mBVDZMLFn7FD#q3\X[u1B&.]a0.BB)fd'QjBYEV1KJI]Pj5!euM"0nYa/VZY+#>KlrX#;^Kp&>%f/N"[2%f)]:]q)e+Yk.imXlZY6TEqb02i;)L*$Glt.eT]:eJt0hI+)9R2Y[Y2^$<g3T_r2kSC=/G$(Y$jT86b:`C75b#]LdA_Ra4P!cm/-c%po1[5\O3-bjhk$a`e4-0gl)[4-Iu*O9l2bB34*/ej_@RWpB*P=$Mq`$B*hO=)[TbS82gMS[_8)Y'XTZE#L+XtA5+F7[uc]pi&On6%$d?3Gd1X;o<obL,'Iio`f"C"hZ7E4s_l8T%#^_(DF*2ntZ&p)K<U6u:pGg!!>5"Y<#p."3?o6I.!VG_IJ"a/qja:ik07rfO?TTY*%d?[4W[uA<^%^5N4bm0qK4igGF"+[@!DV8o=/;9s*=2l1ig<7K&(T6]]$'^&K^G+Gc_%uH(Osdch.C)LWn+*Vd;CV,r,92<>k,(Dh%J\0!J+>qU8<s[r^G-FKD[BRDZpQA^8hDsW9;%'VNkWM>;JR;a*A+rG6]:!bAU-LiL3"!=JQFp85Hqpn/K9Yt>g';V]!j\E,:pdiZ%IHtjPIAk]cs&&EH;[Tr[055ON<'9N1S7@@/^ESN[NLWTnd5jFeg?kIF)J[HpTc9f'e6e]2Sj^.Fri4e,QDpr%ecpeU=hM6*$9.K7%l9b+<,]V*kDn4U"7V5LJ->kBpPk0nAhC^O$!qC8YT%q$842^JY'=&E1%qB7VOpcBp3nX*eVJ>R1aFWRA+k#iHH"=\<_6T6')`",H%PT7oi]aSA_&63d1^EMFP!3@R\6s,g+;S@E3_'RO"[G,/O/3ACBDrd[d@T_q%G;]eR='q!Uoa8JU2p;o1*bTPX'*O6Y*!aR!'6A"$%BN++c+tE[sj_8ii0gd<R:E4,f@9'bg7;uf-NKjKjm%Olp49S?'ifBtS]AC*c&#cM\cA!s5`PrGZXB5'uGmV?f_rcE<_dA$6>p\VH%R)B$L:*(`r)&UuL=HfKc^OaeeUP?Wc(pMDl]>o#LZnUe9,/?0reF5hlEjRn.bG4Ji0cF!i;Y^a3D#qOl>CapUEe<(3(8eBCL!!ig%;bP\uV0\RtW2oki%3G1N<WfsR"OH/C:2*SG#1#me(TBlal&WYbc"7])q(tGPe0WB[dR7-F6]!tY@:eLSDe$t2-$O:Q;FTFkXX1$'%.+2JPKGX_2X[9KdIYdF=f`P]2'A^X<+XnY[fhoPB.MdDCgOi4:B$mWJ0+*%LW_3lDQd#q39%90Jd;CqNN$ZAJK=aSSmBK?Xgd,`*%k9/MhXeH1+O4hQhD?iGs``gA<lZEkW^$#d\-0'7Dir&q`qPIL"Ch`,J7:!9P*P,jB<=_VQ.2ut+[QkqqX;kWV*moM6'a='*bN'4u%P#K$0i'pQ908m>p3gSGhH)[.aJ42,[W835t0'9!?C5j(V,"&fWPRi4E9cRrTb9fF07#+2jpDpjs6;jOm%_#W)=k)*M.(d:Ch(EUk%7>2N>&JJb8A@g+BZ#/_7jPj,"X!\DXZ>O<HhN7!/X*<+i!;EWA4_/gID.OR2OVFV@L9/"h*$Ak/3[4%%>J-+\[=QPbFX8u15r?3s%^f)3?OJOkj6)HR0O"L+Q#^Qqqo<C(j6s0=c1]ba-cNq79`[8&K)b<_oQC67@?+gl&R+ZG6/@4:F1:)O]/%U(`R19)=i(5)Xfg'MZ%9P;@T^pmW4d>=8#J;gOCB/TasQ<BO,5U,<09>^sEjQqYU[D>4T9dZ*a*s3%cM&ci\c00l:9IkTD>/pXO2XJWlJ17%S'5U>r4P"1?%)3EYA`j5Ik_7ZC'(I\sX/m]pOC`m;=p5#5M2S;#kbEfq;k[n%U%A\I_:PBHiD"WIsQ.YSGoNfij5ukEp=a_T'Mk-/A(\`Ob;UMMG%d!hDr,T4Q]J$N^mjM[m[_n715Oko9G1c16?l2==bfsPKe9<ic4)V,aNr6i4sB]SAMq>M?B^D0p=i`V;B,)Ssu;hTYN9Dt9G5Xr-G%I&aD8i#B<rfC'4h]"seSip"ZeL>#I*@/d1uJRHFsHJp85>fb>bnu:b$#NCJZMC6eTX[&&X0)D($I4Z!jJPDh0T9_8OeX)gXB#1i3%<b;E$UKP#pMns[`XBfXQoAW%s*A:@pTc"+_&#ccgT(2=:HH&9lV+Vc1ERf8`WWOP@k(f=^E$M%jd09M,,'/fIp^;5`A/rGdBj;.)%<6HoHr>a%3@7gthP9=+!#_Z<hYsW"k"S92Y;T%%B*m]o::lD#D*g.tshAAT&P:?`.<`:YI0Ihr3'opDdTM)Z'$TRZBga-oqRO$Ue%OJPge\C_hk-Yi+[BFf*2a&H2(;f0A26_E9d07Z?>afF7h\BG\TR@9>^q&C_pQgTs2$kjR\d7Vt0Upt:po<XRf9dEu+nMbI,L#`SM%OmNE.XaGa(_A)PD-MQKj*kXj8^N0KGX.C(u4!OQ@rS^1=9__nm(\[cBL8aaH-LK3"V2:6bfQ%cCY1lFN3^K^MZ#d_m,V+%5=;\;g%?/Z.9gki)p3,!`6Dhp$PgRf_DJ`r-5InC@8+uX!CI7,`c-e#;&LJb3r5f&sUU-t$uM$a:3BS%Zoq`gY0UuREZQifJ\D7r[M]Z25a%3C(s`:`MrCrtWbi764oL&6MR_]ra_Ki4;ITB$K1c'"mA"1r0T'Z5MHG`q*BI%ZBV=;691NKFq4-Vdag?Q\Mol>gMARRi`fSr?1fc%QX:H7-F7P<alh:2QWJCg^)Y6$-]YTr[2ZlDRAm?H5_9MuQ@aE2gka`9=nN9UjehS,#T65B4i--JCg=h>m)bp+mA]Yg@*tr&WMkG,%Z`oFi]5""BiJ0S`D`Q)D(:=-pZW:="'.I2K/;(bC`!WZ.HSc8J>WgUJd!!FJ:2Zca>W<4%B_QsBq`/G;UtZhS.R:]B*RB#\;!XY4%)<Z[kEU5]=GA&mKh&@WWD\,:f#$kfdM^U^A)\AHrC1<(T(@RSk\H@-AZ:2AO81T"4i*1i'-M5#cm_XjKdT=bOb+<&oHR4^fa"f$W%L0>OoAa3YLat9_3/(Whl_U&H-(Kc\>Mr>08Ye2U8QpOS&3J[;,mGu==;mOKRPu]6EE<ChdX*YSf[V3sAQ,/%i5fr$JHe3is8ZfOj%?SIG:/GQ61_I)+q;kl&V2)(C*kOA]+P)Y>jfiP8l+phCQ/*65[a<f_^f/nLQNF*iT`P&sK'Dn?@+=T$b58C@ToXlR6\rg$rX^oW/%S0lVHb<4SnOEGOgof]c[&D;ioX2.m_Vh4B#$^oeTb@hE&1+dt!j=sXA)/4U!/rdTX&s+G'T3.[]_p5LA[EZ8aTO1j`*U5W#`sm]q%Q,T!gQ5SqJ#8is7bs>CkMi/rcP;>HZE.L^Z%T1>4X@Nas1D\>5Dht!03>->S&VcsINANBpHoh$r817:pogl,K"3*E5SVI^E'"Yc6%U?M[*l(mTgX^h#-+W/HgP'H"$A*pT])9!Y,ZQ"?\Uf]po=gZMDJRSeENXtq'Gjo[?TEG`qaV<3S5T55'2j;shG:lYOE]]"eaNA-U%a#[-XIM<)Mi/'.g$_JOHo;._VFYbaE_2+VY8O:0\37JIL1SY9<QLu;TCJkLOo[:`7:Tl7i1pHhGrYH%)b_.3i4"a"qHHqVm7`@*p%0GQT.A'lp]Q@02hd>&W+_k<uVK![C1OK8fK>U`5^-(n'gXrF;>K7's)07u;)#gF?NFeHX:,#nu3blR'$Ht8GUW3F0[k@7QAKH5d\%ImURW2:Om]Nl]`L4*ZU8ahb)V]&<ea.ELMR3%:%7'u$r]`B$gip4c=Jj4Ut,Ig.u0Ct<1Y'?Z)$(-LSe8n1snI8@FAml)t2i0RNN%kGShWb!OZdhL_^QDfBe(V?>U/W(!oa^OoFkf#tM[6$I]S@XVReLc$NS8hOCOoM6spr.mnMkVa.a#m%<>GF\]QJJDq7rYdhnkV8jH%KqPs*_\6M%;JJ,<5U`L8"]Yd5.59JFIUUrJ/)V'"Rrju^<fl#HXbcX4qY7#'KEg\=g1'Qf#&hCD^1@PgA^nr5EL`^ci=<Pn962)g%"5N'`0DB7$&$JumX.M[i0c_oH=!3g4%;r#r4>'.;IY]L`)*#SZ/``i9o/9aZ3TV"dFgQ^Ag?D:pfE]dmUJFPTKPVZGW'K,?c+$PE%0Z1A@r'WkL5eju<o$LY1^Lo3i/-Y)//F6ND6m&%^XW=9gKhW4U!8(&,a^"">:\o(0O!D4HouD-#*9n##DL,QK6Ts@^V;ZP:l7osq%2U!52==h*@4aB2H&k-r4Iu1;6%kK6]hun\orAp68;s%6n'bs!b.YO5tB5JhKA%#<5R<+3qY`F<=&2g+jX]98lL)QI(eeDh"JBU'p%b/7&i6S,@j:]j:sPr(!1N+1&p:R$"V^i-/le8"hL%p#A`]o+oF3VE_B9I'jl)Ha?rg>@<n3)>Ehq!$dKQJ6+:-@H8U]fQ&g*nW[T%kc$(FdVEfoI^\Vao*MMdfj,d&h)Vel=:(<.+<D^m8K/W9/sS%Z0j%E6)+D_B@>Q1AF9Ki@,i\G?a<KX`du=4Fa9JEU+I^-"jQrVb%Y0hu-Z3OnFe651RpctqhlI69S[aaf?!cdn+9t3sF<:opP4s[`#qD>)m;NPf-"pSt1)i20c7GE*<;+;`QZ1QsY&7kt>6-saWfPHR(%!u;*')&I'a+jL6-a5g2$AB@i=H26Y)._*g,L''5>B=;i`m3ph:l*u5)AYW/b@q-M:SqAV_?A!TLmp9.;JjVQG`s_R6$k^0r,r`a6%_F8pE/p_&3M"l70rCEt#B0>=62Z^36AG0J-X0h8S-&t1`,c)HrXgA_+]5p:c2;UP<T\E_4-]f&8KS&SBnk)=3GF2&sdL>Z_URF1'%[1er[1/)Fl?N[PQ?=#j4Oob(#qH^#[p!^t@9_.MI&+AV&>X-8?ZEKm]2p;ks7sIE?cb=j12E@B^X:sBu"X5A$e0crR_rGqH]",<p%Y*;,'kF*pRdO>hR7:GH>:auJ`4frLbJF#O;XYQ$H<Gs7eP":V2<d?r7X$"2"<M#jtQ263!>XBT4&T=CqMPX>DKpV>I!YBaEJr[!5%o&H!rYa%h2fu/UoQ%5s@e@Im<N$%f7?CTsV3P]cdO7dr2mbpiKI_&PmHt%9*q?t82&%8W(6nYpEB\+KAiTa[TY#,DNcDa-<W4>O'%r"MP*j[F<W&s-*6\4V$59;ObdX]""AWg(P"\4V%ZaAsbAlafE.I$-"Ea/<j0nsCUcdDnYX1U8BUTBPloXqUcnd%4ebnG+k45RTZR%8hdh(hn]Q6-=Y-XR+J&J:X<EL_jP"ZX^2BSK&(Qcpq]E<Q60pbQT6f_:8=kW-/d,f86Mt33\nOB'g06:=WkA3/U8/sB$I3+<Vi%I%EGm+7*T"8)=1Q%4(^dtDr`kjA5We$u#1T@d`RJF\B0ADtaAtCDBe7^r;+k/ZH-!n'5,/8(>V[k_F%`F.)KS5D?<eG<r1[Y!h8]t`%;S398pJ8W:5$e`B*(%8e"O7gj4ajEhU,+ZTJ+nkj\$&8i<u=FG&Pu6"9EcF6&2`W3\p-d2j9;cfM%ir`<iSQKP<t5d<ojt6-ae2/%>?6=<c=G*kE6B^F_5]J(rCEn;`nB&u+QH)R.k<]be7G=#[?a5SI*tI%=\44NZL4BL"Jt-`TU#&p-&T&M5j"Xp5+*&k8ia8PQ7c]2%W#ms;=<`/rl>s84%78L1YjYcg^LuD+lq\ZW]^g0^NJ+A10I<K%[gt"/BHH5-Q>+8t$#Y"Bfr;,4*bUG%K=@ba^<h<B')\1bb?+@@%?"Jdo+`MgC@uXphr'&=18fSKrJS`BfdQ7&j_)%X%Yp2dIaIT4p=slt*Ddqq$"dW1QiUZ9W.hR*K=#:UGD/X2`jNr6/fU3k_&.q5R%W<sUdA4DXf%BTb:Q<CZ7&cP5L4<]Lgi[uS4X/$8WK&/ZFIbGuAX%OFJ$c5,hPTOE<>6GZ*;,^?F3'EP6OdJ]+H5]Le+H#i#V4st<%R=Q>pV,Xl'K;A@blP(e+hIon/6I'7c&d/F]-O>I_2O+#!4S!fMbG48DntrH-Dd]_[<?:;o,j*HY.B#i=YG3AJS.YEeB:_<h"/NFN%>onu4`;JciCjgAKA5SL'OmSW8"CSe1%RiBhCubZL(<BgFpDP#\:3bQK^BFH.<r[Tc1*RHdaDK-fCF`/am]3mD$UK6Gigm$^`WU9b%eCp3oOG9'a)D!A)ZSERlo_^`ag7r.:QGQllAGm"H3b"W^ACo2d+WUV;h-ZTB((Wb,Kr#j2#,n,sF)D]pDu0b\J>aBb",s+Dp?'?Z%ONe=RKSJ<3h05gF=#*m39)mbl-UtSb+E/3SY.?M+4`hC0kNOo..Yp-4I_$\\GS@fKgM0)6QS$2Z][^Aj_4s!c7U]NDaHIY#f3h#A%&-19R)4up!-\n))'Yuk+#np!D%ar`0+rgI.%-Q9%X9KN91-stm"Tm1Lo%nmf#S$3Xgp*kHefAu-QCk@sI=\/SB[>cH9XY\&!J4@C%_]@R]0A-0RompYL'?G9&L.[+I;`R,:Psr,BTU+DalZips-'>I4WTPhCM0"VsF$Rn\Fb%hR/+ZU++HoP+71Z"EVT!q2h$U;DlL,J8%JPgq%.s!+VL+jC(3LS"6#&D<($AmoR1h2l&/q*,/!MB,@2FBZ7H:R64;Q?bO4<3na#-JR)*adn?jtn*=0k2p4@k;%u`h:k:F:[+\%/TXVi.JB1B=kmkL6n>.'.eOg*7^.o]e`jbd#t*6N6V?bD/GcjY@3]RVA8,/Pp?(;%QZ\A]RG?=DdW094=bH"SgQVaKc(nP#>PAW&%=c^$"DLTB(!3bk`I?h`=UWc9`he`kh2VT3\_QWWf(!0h)%+d4"Zecm#8'c@6hTt<<Vt:,DJ]oYUI.@PTZF]j7A"PZ1LRXCMgIQcI%<gYl[8^4@@3_Ag!h2+G](7cAS_oFT.!;0Mhm+DgVd*h,tFQ!EJUq/]/h(W`&0eV*LJaB8L*3:)KRt=IY<rl#U^.@mUao"d0\Z-Vn%#+;f(fR1-LF/pu<e[%bDeojLY:No+?9/j2#fTSCAk$B%FGK\)u&W7Acpf6mMRD[cnA=!eT*O@j-#r3U8\X>6^7^*PSpHZDLaO.9c%mE?-F\dZpV_I](mju717b1?sV<#s]+c:1p=s.CgbCiWP"(1uT"le!bS-JV_M1mjW1e6h!5IAh3Db7Fu6(=[==7`_ft$_J\;"sj).%m_Qo=#?6rnTbMJO;7ndYU]/<>aFMPX9kRq5^KgEna\XdfWIsJ8%X"G3bc76TD2bDePHbeYc#>HrTCZoCePoGCen%;88&-!PZ/Y7L%4d%^j='Rm@B4]--.o(OTOD#>tAh:tk5tairdamQ`/4/ggNcX^5X)7VT"Y7=cr81N=;6nl;73D7=/U<]j]WoM6AQa&7A*=;6NVp[A%Pa'*FFS&4EJ,4gZQP`G*DBSNIH=4.]YlpT]lIc;/!D+u$5-'C:!S>p^pZ+Ai[@1(.r=<b`Ih#=+a*?`C[,HK@_+ID,s-iu^qks*V%%dfVV^[gpD+;od.qR<*6S,W4*TAY5e1\^p^f&:hfr<0]%l4k$dUe@o$/D]YMcdf0-9"epER9KU`#sBc'Wf(n@:hC+=Wp0'IVuH\[%;@h%.%k<HPMiR5EAsIetde0N@JX1IX'JpC<J?^8)gNd%RWHKd)`Z-+T%^*b<=ke>fDkAN%nXROkiSQhHhqpZs`EPM)H;2STY0$Ib%lbBS/l,DC1_G(B8``HQf.HT4B'/[1?LVONF`V%$H(QBHfnlou?c8U"`Dcd`#r.0t9UHW0RrR3YoDQc'lZ&kOu6g?(2n4O09MCIAd%UeV%?L6mZkn-MI]`=3_8d6$4G#2'A+fMHe3-`dIT$Ok4gJ:g(?#$<]ljN/Ak,lcg:PNnD"2AAs#+`s+,&B7_rELH`r=mrRLqJ5dX%U<P:LGX17j#5.Ysr*'pjF:<uZ;kAf6]c?(`gc0INi;p'KIYiW:JSC\\<b,%`0\5j94,-!_WDd[O'nl0Y:<;=;@=+L#0\akX[^Q,D%ZfA<qI>eYP*Oc+iSufH,/f'9_K\0O*cPS_]hQVU-+SuIEnIQmWXfck.'DnfhJK4cfM3tiY\o_ROj<ujm`L[ESB'2_Q]=s`-A8CB-%3.qo<O>d"U$CTE7<94`We]?L=4q7J(oY!#g1VJB,X;;mTs(/[5cba](Y_uOhQ'BljObO+SU6S:Ohbp.7hSXB<=dg)[2J^U<_WU+s%X\N`W`MH&OVAF?2MQad#8C>BY%R3p9Tf[eS-L:>N%E#.`[[kIK?3,HcAi7=Ifdp=5enYcnn-Q1!@WHSWEFMk;g+Nj]>`3e7FR,V@%==[-RPO4oFeZ*:7:o\KJC@u*;,RD:<eZ,RE3:@OW(D*,WW4'Ns),DpIbdFMgdUKM[=<_],?(&2eI(EbQ+T+4(-?Ja4g%&BM6UWH]%0m%8,oo?<"B&9fW.<c_@p\,cMf"2pSHKU9Qk+#]^f%%n&$"J%bo3DiB^%6fWD`b0\#7%^"l:3OTQNLI\Hsfr[Ci:.iZd'"VZcqGR%S`PTfA,:sj:D>&(iDri9YfQ!dmD`GXg+E.b>88"dYtLh]TeN?,`G.[)j\bE1X9U/X3phu`b:L\4D0SB.,7j[I3-(TGa3IUaVW?GE%7LFqj;VNLeJ964c]V]W$.CS:La+2B;m`9(1i]XG)COp!N!d39g0%%PFRZp#PL+66F89pPuM&+89kY]QL;Dt[B!T[/6D(AV#orEB>%`O2'"#YEi$6P,`&f-'.9.$e#`lFC1R%d.6nF[pX#9)Yo;I`Z=7`7r*fin-,)7U_nH=6+qkA]"o_@]\+-^tc.*3o[3H)odENGLg^`%$*,d!7[d4amb;HeT(T_TeKlpkP;Fnn.tOX2Xl/5nlMVWb`rkp?].8/'"MZ!m_H%M_RW)Z^)dD/Q.qNc1-A2(_?*T(-U8$tU=;#[d%QFW5JVYqg4T*&MK^Z=GQ6s9@qBhh1l'!ni%b^P,am)N<1R7kZQ]4.\_GUhCCCK>@EXt_!=%u9GYkA.,9#PMS#?=SIE^&SL'.QG-`%1ZI'I`0rZ2Sh[>6%7)tJ7ctP`.Qj.Hgj5Q=LoZuVE%B.T[0tgEpRu4P[JJ6?:Wu#p^p\]=@]frSXGd#G$$-9e0HfV?X@;i$qVfo[%$CIDo>@G#d,$bPo*@\CtEOR6>]Ys$Zq<Md:q?H+'XQ]!+hL><jTE"1`If6<S^A[cs+23.%YI@kdq<R4Q++?[(qfdOA.W.[A1a>(Q%m-:U?F6mmSR-50hS^/ME\1qs2KlLMNBuuIqK).P+d3QPd1(on@=*,N9-J$iYMSu+(6pK^WFYTYWW>=^L3)kA;_fuK>el,$4+GL$R%mX]I;3TE*>Z3hh[RB=d3q\$6?2p?^O"O(?0`*:$r7S;fX84o\,.I?-DNskVab7OV-CWNJ*b=3p]Dto>-B>(=B'Qg_d%#4F[N7+iA%KEL\8b&H(n]fI+e/'DDf;1A`'A$Oj)]WZLMo#,DS28j(MA%>HJ2o<3Z2tKF85*d.(g26\$?Y9P]I$Rr!^DHVddY9=^$!0UZW%t[7%,])7\6`<1`S1o3I5Vi@!Z)VoTrR]_!q`5Df'k"!Od\Eo<K_Y_0'q_4*%G3n(6qlL]Y^QY[)=m&/%FYNa%bN&hb[sD"G$dIapL=pX%qf6-X4>#['W\6(G9C_,0iPq<&d6#?aV%il.YP#c0%%\/Rfn34mdWhIk[<oa`mUh;0-,3FB/]@9=._EK*pIkW*RJSgPP38YT61*%+%EIR&c=@/kW35[C'aAkg7%9;VP&H[O6g&!(q#kH4d,PaU.J\D=I&eZ>+]^%Im"]pql+hs7^XQAL[]LFb1Ze?`CG?g'8Q/9r3YKVR"%<J@e\=Q,:r-2<K5_\&D%nA4;&da=e*[/Dq0nZ;^`^1qki.^K2ZURhTCXtOET%hT0>W:"jSld\TB5jF15-bp]M,#qP=dqQY"'RfBq%/YJZ(M-ZX@\<C6i5@t5$%0nD/1(aj1g0At^4)Hp&%f.js#^pt"1FRqaI1O"2^blJLeT2__j1nb2bi5hLU,%eNJJCu:1l-<^Z`s&>%@^i?k23CpAU"qt1;(UG@/_UcnQ4O$^r&*YN>:>rpCs7@s[#:E#/<H(QqML4TaEda+!s*n*IdY-jNR;97Qg?42(XFLALY:=HQo/*X%@3dQGDhep3CcRs5LVUK<`MR+C-RS1+aP>@Z`tqnsZmLQj3YF5.hJJc_D%ra@C`l:>&o,ip?njdrD)^_``Tg%pD#W"C]$_.hrAqd8%65sr_'$"mZA?*`;`+gt.5'eh?&p'29%7H_b20dmrK_*>kW^4#:(K/e^Z(eW/rjtf;,F^W7HRk#oeu0?kW,*3d"qYlb!7AI-!Zg7\%"h!0.N!hW+Y$<3L=GQPR86,*EB@-!L!^2!'<LM+'\dWFJ#!;HNMCt&,9/ABp1>'lEQuc15%UP]5BY#&oV0Eo9DmX_u?S1N%LAAIi%X@$i1!q7KO\MZ"<M/`*?]&2fX+j"$sC"75T/$_UA9i`n=4B,-kBHj2751hC"g0t2(fn+ZWSq(SSE8Jo3<RBn1;0NmQkm:`e,MUX`%//PLu\7%Bc^&h5`.GU<9N)rhZ('LPr;&pi8Q3`HG^fcOX`It)qET/0E7(X15r7R`>03t:jDk7Lc`?+c8+n%)PV@R\2=9&!h`M]@+%r4gk`rQB]h5EF_%rUZYrqsMp/Ie&ucs7,]qr;$*en&slYJ,824IfHn'Dnl>(J,QkVq#,\irqGaY]`%BHTE"I(s7YX%Dh%Sts7W'M%Xs*f>:O_lX?iRT2ruVZGPqi~>%AI9_PrivateDataEnd